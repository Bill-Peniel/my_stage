
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model UserProfile
 * 
 */
export type UserProfile = $Result.DefaultSelection<Prisma.$UserProfilePayload>
/**
 * Model Structure
 * 
 */
export type Structure = $Result.DefaultSelection<Prisma.$StructurePayload>
/**
 * Model Tuteur
 * 
 */
export type Tuteur = $Result.DefaultSelection<Prisma.$TuteurPayload>
/**
 * Model Stagiaire
 * 
 */
export type Stagiaire = $Result.DefaultSelection<Prisma.$StagiairePayload>
/**
 * Model DPAF
 * 
 */
export type DPAF = $Result.DefaultSelection<Prisma.$DPAFPayload>
/**
 * Model DemandeStage
 * 
 */
export type DemandeStage = $Result.DefaultSelection<Prisma.$DemandeStagePayload>
/**
 * Model Stage
 * 
 */
export type Stage = $Result.DefaultSelection<Prisma.$StagePayload>
/**
 * Model CandidatureScore
 * 
 */
export type CandidatureScore = $Result.DefaultSelection<Prisma.$CandidatureScorePayload>
/**
 * Model SuggestionAffectation
 * 
 */
export type SuggestionAffectation = $Result.DefaultSelection<Prisma.$SuggestionAffectationPayload>
/**
 * Model Message
 * 
 */
export type Message = $Result.DefaultSelection<Prisma.$MessagePayload>
/**
 * Model ThemeTuteur
 * 
 */
export type ThemeTuteur = $Result.DefaultSelection<Prisma.$ThemeTuteurPayload>
/**
 * Model ParametreSysteme
 * 
 */
export type ParametreSysteme = $Result.DefaultSelection<Prisma.$ParametreSystemePayload>
/**
 * Model JournalAction
 * 
 */
export type JournalAction = $Result.DefaultSelection<Prisma.$JournalActionPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const UserRole: {
  admin: 'admin',
  dpaf: 'dpaf',
  structure: 'structure',
  tuteur: 'tuteur',
  stagiaire: 'stagiaire'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]


export const StatutDemande: {
  en_attente: 'en_attente',
  confirmé: 'confirmé',
  rejeté: 'rejeté'
};

export type StatutDemande = (typeof StatutDemande)[keyof typeof StatutDemande]


export const EtatDemande: {
  en_attente: 'en_attente',
  validée_par_dpaf: 'validée_par_dpaf',
  envoyée_structure: 'envoyée_structure',
  refusée: 'refusée'
};

export type EtatDemande = (typeof EtatDemande)[keyof typeof EtatDemande]


export const EtatStage: {
  en_cours: 'en_cours',
  terminé: 'terminé',
  abandonné: 'abandonné'
};

export type EtatStage = (typeof EtatStage)[keyof typeof EtatStage]

}

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

export type StatutDemande = $Enums.StatutDemande

export const StatutDemande: typeof $Enums.StatutDemande

export type EtatDemande = $Enums.EtatDemande

export const EtatDemande: typeof $Enums.EtatDemande

export type EtatStage = $Enums.EtatStage

export const EtatStage: typeof $Enums.EtatStage

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userProfile`: Exposes CRUD operations for the **UserProfile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserProfiles
    * const userProfiles = await prisma.userProfile.findMany()
    * ```
    */
  get userProfile(): Prisma.UserProfileDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.structure`: Exposes CRUD operations for the **Structure** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Structures
    * const structures = await prisma.structure.findMany()
    * ```
    */
  get structure(): Prisma.StructureDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tuteur`: Exposes CRUD operations for the **Tuteur** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tuteurs
    * const tuteurs = await prisma.tuteur.findMany()
    * ```
    */
  get tuteur(): Prisma.TuteurDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.stagiaire`: Exposes CRUD operations for the **Stagiaire** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Stagiaires
    * const stagiaires = await prisma.stagiaire.findMany()
    * ```
    */
  get stagiaire(): Prisma.StagiaireDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.dPAF`: Exposes CRUD operations for the **DPAF** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DPAFS
    * const dPAFS = await prisma.dPAF.findMany()
    * ```
    */
  get dPAF(): Prisma.DPAFDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.demandeStage`: Exposes CRUD operations for the **DemandeStage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DemandeStages
    * const demandeStages = await prisma.demandeStage.findMany()
    * ```
    */
  get demandeStage(): Prisma.DemandeStageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.stage`: Exposes CRUD operations for the **Stage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Stages
    * const stages = await prisma.stage.findMany()
    * ```
    */
  get stage(): Prisma.StageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.candidatureScore`: Exposes CRUD operations for the **CandidatureScore** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CandidatureScores
    * const candidatureScores = await prisma.candidatureScore.findMany()
    * ```
    */
  get candidatureScore(): Prisma.CandidatureScoreDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.suggestionAffectation`: Exposes CRUD operations for the **SuggestionAffectation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SuggestionAffectations
    * const suggestionAffectations = await prisma.suggestionAffectation.findMany()
    * ```
    */
  get suggestionAffectation(): Prisma.SuggestionAffectationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.message`: Exposes CRUD operations for the **Message** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Messages
    * const messages = await prisma.message.findMany()
    * ```
    */
  get message(): Prisma.MessageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.themeTuteur`: Exposes CRUD operations for the **ThemeTuteur** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ThemeTuteurs
    * const themeTuteurs = await prisma.themeTuteur.findMany()
    * ```
    */
  get themeTuteur(): Prisma.ThemeTuteurDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.parametreSysteme`: Exposes CRUD operations for the **ParametreSysteme** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ParametreSystemes
    * const parametreSystemes = await prisma.parametreSysteme.findMany()
    * ```
    */
  get parametreSysteme(): Prisma.ParametreSystemeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.journalAction`: Exposes CRUD operations for the **JournalAction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more JournalActions
    * const journalActions = await prisma.journalAction.findMany()
    * ```
    */
  get journalAction(): Prisma.JournalActionDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.6.0
   * Query Engine version: f676762280b54cd07c770017ed3711ddde35f37a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    UserProfile: 'UserProfile',
    Structure: 'Structure',
    Tuteur: 'Tuteur',
    Stagiaire: 'Stagiaire',
    DPAF: 'DPAF',
    DemandeStage: 'DemandeStage',
    Stage: 'Stage',
    CandidatureScore: 'CandidatureScore',
    SuggestionAffectation: 'SuggestionAffectation',
    Message: 'Message',
    ThemeTuteur: 'ThemeTuteur',
    ParametreSysteme: 'ParametreSysteme',
    JournalAction: 'JournalAction'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "userProfile" | "structure" | "tuteur" | "stagiaire" | "dPAF" | "demandeStage" | "stage" | "candidatureScore" | "suggestionAffectation" | "message" | "themeTuteur" | "parametreSysteme" | "journalAction"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      UserProfile: {
        payload: Prisma.$UserProfilePayload<ExtArgs>
        fields: Prisma.UserProfileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserProfileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserProfileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>
          }
          findFirst: {
            args: Prisma.UserProfileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserProfileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>
          }
          findMany: {
            args: Prisma.UserProfileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>[]
          }
          create: {
            args: Prisma.UserProfileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>
          }
          createMany: {
            args: Prisma.UserProfileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserProfileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>[]
          }
          delete: {
            args: Prisma.UserProfileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>
          }
          update: {
            args: Prisma.UserProfileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>
          }
          deleteMany: {
            args: Prisma.UserProfileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserProfileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserProfileUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>[]
          }
          upsert: {
            args: Prisma.UserProfileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>
          }
          aggregate: {
            args: Prisma.UserProfileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserProfile>
          }
          groupBy: {
            args: Prisma.UserProfileGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserProfileGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserProfileCountArgs<ExtArgs>
            result: $Utils.Optional<UserProfileCountAggregateOutputType> | number
          }
        }
      }
      Structure: {
        payload: Prisma.$StructurePayload<ExtArgs>
        fields: Prisma.StructureFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StructureFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StructurePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StructureFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StructurePayload>
          }
          findFirst: {
            args: Prisma.StructureFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StructurePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StructureFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StructurePayload>
          }
          findMany: {
            args: Prisma.StructureFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StructurePayload>[]
          }
          create: {
            args: Prisma.StructureCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StructurePayload>
          }
          createMany: {
            args: Prisma.StructureCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StructureCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StructurePayload>[]
          }
          delete: {
            args: Prisma.StructureDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StructurePayload>
          }
          update: {
            args: Prisma.StructureUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StructurePayload>
          }
          deleteMany: {
            args: Prisma.StructureDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StructureUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StructureUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StructurePayload>[]
          }
          upsert: {
            args: Prisma.StructureUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StructurePayload>
          }
          aggregate: {
            args: Prisma.StructureAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStructure>
          }
          groupBy: {
            args: Prisma.StructureGroupByArgs<ExtArgs>
            result: $Utils.Optional<StructureGroupByOutputType>[]
          }
          count: {
            args: Prisma.StructureCountArgs<ExtArgs>
            result: $Utils.Optional<StructureCountAggregateOutputType> | number
          }
        }
      }
      Tuteur: {
        payload: Prisma.$TuteurPayload<ExtArgs>
        fields: Prisma.TuteurFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TuteurFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TuteurPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TuteurFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TuteurPayload>
          }
          findFirst: {
            args: Prisma.TuteurFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TuteurPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TuteurFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TuteurPayload>
          }
          findMany: {
            args: Prisma.TuteurFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TuteurPayload>[]
          }
          create: {
            args: Prisma.TuteurCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TuteurPayload>
          }
          createMany: {
            args: Prisma.TuteurCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TuteurCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TuteurPayload>[]
          }
          delete: {
            args: Prisma.TuteurDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TuteurPayload>
          }
          update: {
            args: Prisma.TuteurUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TuteurPayload>
          }
          deleteMany: {
            args: Prisma.TuteurDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TuteurUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TuteurUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TuteurPayload>[]
          }
          upsert: {
            args: Prisma.TuteurUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TuteurPayload>
          }
          aggregate: {
            args: Prisma.TuteurAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTuteur>
          }
          groupBy: {
            args: Prisma.TuteurGroupByArgs<ExtArgs>
            result: $Utils.Optional<TuteurGroupByOutputType>[]
          }
          count: {
            args: Prisma.TuteurCountArgs<ExtArgs>
            result: $Utils.Optional<TuteurCountAggregateOutputType> | number
          }
        }
      }
      Stagiaire: {
        payload: Prisma.$StagiairePayload<ExtArgs>
        fields: Prisma.StagiaireFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StagiaireFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagiairePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StagiaireFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagiairePayload>
          }
          findFirst: {
            args: Prisma.StagiaireFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagiairePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StagiaireFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagiairePayload>
          }
          findMany: {
            args: Prisma.StagiaireFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagiairePayload>[]
          }
          create: {
            args: Prisma.StagiaireCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagiairePayload>
          }
          createMany: {
            args: Prisma.StagiaireCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StagiaireCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagiairePayload>[]
          }
          delete: {
            args: Prisma.StagiaireDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagiairePayload>
          }
          update: {
            args: Prisma.StagiaireUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagiairePayload>
          }
          deleteMany: {
            args: Prisma.StagiaireDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StagiaireUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StagiaireUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagiairePayload>[]
          }
          upsert: {
            args: Prisma.StagiaireUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagiairePayload>
          }
          aggregate: {
            args: Prisma.StagiaireAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStagiaire>
          }
          groupBy: {
            args: Prisma.StagiaireGroupByArgs<ExtArgs>
            result: $Utils.Optional<StagiaireGroupByOutputType>[]
          }
          count: {
            args: Prisma.StagiaireCountArgs<ExtArgs>
            result: $Utils.Optional<StagiaireCountAggregateOutputType> | number
          }
        }
      }
      DPAF: {
        payload: Prisma.$DPAFPayload<ExtArgs>
        fields: Prisma.DPAFFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DPAFFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DPAFPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DPAFFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DPAFPayload>
          }
          findFirst: {
            args: Prisma.DPAFFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DPAFPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DPAFFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DPAFPayload>
          }
          findMany: {
            args: Prisma.DPAFFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DPAFPayload>[]
          }
          create: {
            args: Prisma.DPAFCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DPAFPayload>
          }
          createMany: {
            args: Prisma.DPAFCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DPAFCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DPAFPayload>[]
          }
          delete: {
            args: Prisma.DPAFDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DPAFPayload>
          }
          update: {
            args: Prisma.DPAFUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DPAFPayload>
          }
          deleteMany: {
            args: Prisma.DPAFDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DPAFUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DPAFUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DPAFPayload>[]
          }
          upsert: {
            args: Prisma.DPAFUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DPAFPayload>
          }
          aggregate: {
            args: Prisma.DPAFAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDPAF>
          }
          groupBy: {
            args: Prisma.DPAFGroupByArgs<ExtArgs>
            result: $Utils.Optional<DPAFGroupByOutputType>[]
          }
          count: {
            args: Prisma.DPAFCountArgs<ExtArgs>
            result: $Utils.Optional<DPAFCountAggregateOutputType> | number
          }
        }
      }
      DemandeStage: {
        payload: Prisma.$DemandeStagePayload<ExtArgs>
        fields: Prisma.DemandeStageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DemandeStageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DemandeStagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DemandeStageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DemandeStagePayload>
          }
          findFirst: {
            args: Prisma.DemandeStageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DemandeStagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DemandeStageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DemandeStagePayload>
          }
          findMany: {
            args: Prisma.DemandeStageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DemandeStagePayload>[]
          }
          create: {
            args: Prisma.DemandeStageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DemandeStagePayload>
          }
          createMany: {
            args: Prisma.DemandeStageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DemandeStageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DemandeStagePayload>[]
          }
          delete: {
            args: Prisma.DemandeStageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DemandeStagePayload>
          }
          update: {
            args: Prisma.DemandeStageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DemandeStagePayload>
          }
          deleteMany: {
            args: Prisma.DemandeStageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DemandeStageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DemandeStageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DemandeStagePayload>[]
          }
          upsert: {
            args: Prisma.DemandeStageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DemandeStagePayload>
          }
          aggregate: {
            args: Prisma.DemandeStageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDemandeStage>
          }
          groupBy: {
            args: Prisma.DemandeStageGroupByArgs<ExtArgs>
            result: $Utils.Optional<DemandeStageGroupByOutputType>[]
          }
          count: {
            args: Prisma.DemandeStageCountArgs<ExtArgs>
            result: $Utils.Optional<DemandeStageCountAggregateOutputType> | number
          }
        }
      }
      Stage: {
        payload: Prisma.$StagePayload<ExtArgs>
        fields: Prisma.StageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagePayload>
          }
          findFirst: {
            args: Prisma.StageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagePayload>
          }
          findMany: {
            args: Prisma.StageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagePayload>[]
          }
          create: {
            args: Prisma.StageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagePayload>
          }
          createMany: {
            args: Prisma.StageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagePayload>[]
          }
          delete: {
            args: Prisma.StageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagePayload>
          }
          update: {
            args: Prisma.StageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagePayload>
          }
          deleteMany: {
            args: Prisma.StageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagePayload>[]
          }
          upsert: {
            args: Prisma.StageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagePayload>
          }
          aggregate: {
            args: Prisma.StageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStage>
          }
          groupBy: {
            args: Prisma.StageGroupByArgs<ExtArgs>
            result: $Utils.Optional<StageGroupByOutputType>[]
          }
          count: {
            args: Prisma.StageCountArgs<ExtArgs>
            result: $Utils.Optional<StageCountAggregateOutputType> | number
          }
        }
      }
      CandidatureScore: {
        payload: Prisma.$CandidatureScorePayload<ExtArgs>
        fields: Prisma.CandidatureScoreFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CandidatureScoreFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatureScorePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CandidatureScoreFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatureScorePayload>
          }
          findFirst: {
            args: Prisma.CandidatureScoreFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatureScorePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CandidatureScoreFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatureScorePayload>
          }
          findMany: {
            args: Prisma.CandidatureScoreFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatureScorePayload>[]
          }
          create: {
            args: Prisma.CandidatureScoreCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatureScorePayload>
          }
          createMany: {
            args: Prisma.CandidatureScoreCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CandidatureScoreCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatureScorePayload>[]
          }
          delete: {
            args: Prisma.CandidatureScoreDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatureScorePayload>
          }
          update: {
            args: Prisma.CandidatureScoreUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatureScorePayload>
          }
          deleteMany: {
            args: Prisma.CandidatureScoreDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CandidatureScoreUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CandidatureScoreUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatureScorePayload>[]
          }
          upsert: {
            args: Prisma.CandidatureScoreUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatureScorePayload>
          }
          aggregate: {
            args: Prisma.CandidatureScoreAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCandidatureScore>
          }
          groupBy: {
            args: Prisma.CandidatureScoreGroupByArgs<ExtArgs>
            result: $Utils.Optional<CandidatureScoreGroupByOutputType>[]
          }
          count: {
            args: Prisma.CandidatureScoreCountArgs<ExtArgs>
            result: $Utils.Optional<CandidatureScoreCountAggregateOutputType> | number
          }
        }
      }
      SuggestionAffectation: {
        payload: Prisma.$SuggestionAffectationPayload<ExtArgs>
        fields: Prisma.SuggestionAffectationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SuggestionAffectationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SuggestionAffectationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SuggestionAffectationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SuggestionAffectationPayload>
          }
          findFirst: {
            args: Prisma.SuggestionAffectationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SuggestionAffectationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SuggestionAffectationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SuggestionAffectationPayload>
          }
          findMany: {
            args: Prisma.SuggestionAffectationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SuggestionAffectationPayload>[]
          }
          create: {
            args: Prisma.SuggestionAffectationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SuggestionAffectationPayload>
          }
          createMany: {
            args: Prisma.SuggestionAffectationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SuggestionAffectationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SuggestionAffectationPayload>[]
          }
          delete: {
            args: Prisma.SuggestionAffectationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SuggestionAffectationPayload>
          }
          update: {
            args: Prisma.SuggestionAffectationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SuggestionAffectationPayload>
          }
          deleteMany: {
            args: Prisma.SuggestionAffectationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SuggestionAffectationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SuggestionAffectationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SuggestionAffectationPayload>[]
          }
          upsert: {
            args: Prisma.SuggestionAffectationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SuggestionAffectationPayload>
          }
          aggregate: {
            args: Prisma.SuggestionAffectationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSuggestionAffectation>
          }
          groupBy: {
            args: Prisma.SuggestionAffectationGroupByArgs<ExtArgs>
            result: $Utils.Optional<SuggestionAffectationGroupByOutputType>[]
          }
          count: {
            args: Prisma.SuggestionAffectationCountArgs<ExtArgs>
            result: $Utils.Optional<SuggestionAffectationCountAggregateOutputType> | number
          }
        }
      }
      Message: {
        payload: Prisma.$MessagePayload<ExtArgs>
        fields: Prisma.MessageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MessageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MessageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          findFirst: {
            args: Prisma.MessageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MessageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          findMany: {
            args: Prisma.MessageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>[]
          }
          create: {
            args: Prisma.MessageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          createMany: {
            args: Prisma.MessageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MessageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>[]
          }
          delete: {
            args: Prisma.MessageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          update: {
            args: Prisma.MessageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          deleteMany: {
            args: Prisma.MessageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MessageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MessageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>[]
          }
          upsert: {
            args: Prisma.MessageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          aggregate: {
            args: Prisma.MessageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMessage>
          }
          groupBy: {
            args: Prisma.MessageGroupByArgs<ExtArgs>
            result: $Utils.Optional<MessageGroupByOutputType>[]
          }
          count: {
            args: Prisma.MessageCountArgs<ExtArgs>
            result: $Utils.Optional<MessageCountAggregateOutputType> | number
          }
        }
      }
      ThemeTuteur: {
        payload: Prisma.$ThemeTuteurPayload<ExtArgs>
        fields: Prisma.ThemeTuteurFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ThemeTuteurFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemeTuteurPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ThemeTuteurFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemeTuteurPayload>
          }
          findFirst: {
            args: Prisma.ThemeTuteurFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemeTuteurPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ThemeTuteurFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemeTuteurPayload>
          }
          findMany: {
            args: Prisma.ThemeTuteurFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemeTuteurPayload>[]
          }
          create: {
            args: Prisma.ThemeTuteurCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemeTuteurPayload>
          }
          createMany: {
            args: Prisma.ThemeTuteurCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ThemeTuteurCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemeTuteurPayload>[]
          }
          delete: {
            args: Prisma.ThemeTuteurDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemeTuteurPayload>
          }
          update: {
            args: Prisma.ThemeTuteurUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemeTuteurPayload>
          }
          deleteMany: {
            args: Prisma.ThemeTuteurDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ThemeTuteurUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ThemeTuteurUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemeTuteurPayload>[]
          }
          upsert: {
            args: Prisma.ThemeTuteurUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemeTuteurPayload>
          }
          aggregate: {
            args: Prisma.ThemeTuteurAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateThemeTuteur>
          }
          groupBy: {
            args: Prisma.ThemeTuteurGroupByArgs<ExtArgs>
            result: $Utils.Optional<ThemeTuteurGroupByOutputType>[]
          }
          count: {
            args: Prisma.ThemeTuteurCountArgs<ExtArgs>
            result: $Utils.Optional<ThemeTuteurCountAggregateOutputType> | number
          }
        }
      }
      ParametreSysteme: {
        payload: Prisma.$ParametreSystemePayload<ExtArgs>
        fields: Prisma.ParametreSystemeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ParametreSystemeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParametreSystemePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ParametreSystemeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParametreSystemePayload>
          }
          findFirst: {
            args: Prisma.ParametreSystemeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParametreSystemePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ParametreSystemeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParametreSystemePayload>
          }
          findMany: {
            args: Prisma.ParametreSystemeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParametreSystemePayload>[]
          }
          create: {
            args: Prisma.ParametreSystemeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParametreSystemePayload>
          }
          createMany: {
            args: Prisma.ParametreSystemeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ParametreSystemeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParametreSystemePayload>[]
          }
          delete: {
            args: Prisma.ParametreSystemeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParametreSystemePayload>
          }
          update: {
            args: Prisma.ParametreSystemeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParametreSystemePayload>
          }
          deleteMany: {
            args: Prisma.ParametreSystemeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ParametreSystemeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ParametreSystemeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParametreSystemePayload>[]
          }
          upsert: {
            args: Prisma.ParametreSystemeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParametreSystemePayload>
          }
          aggregate: {
            args: Prisma.ParametreSystemeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateParametreSysteme>
          }
          groupBy: {
            args: Prisma.ParametreSystemeGroupByArgs<ExtArgs>
            result: $Utils.Optional<ParametreSystemeGroupByOutputType>[]
          }
          count: {
            args: Prisma.ParametreSystemeCountArgs<ExtArgs>
            result: $Utils.Optional<ParametreSystemeCountAggregateOutputType> | number
          }
        }
      }
      JournalAction: {
        payload: Prisma.$JournalActionPayload<ExtArgs>
        fields: Prisma.JournalActionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.JournalActionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JournalActionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.JournalActionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JournalActionPayload>
          }
          findFirst: {
            args: Prisma.JournalActionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JournalActionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.JournalActionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JournalActionPayload>
          }
          findMany: {
            args: Prisma.JournalActionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JournalActionPayload>[]
          }
          create: {
            args: Prisma.JournalActionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JournalActionPayload>
          }
          createMany: {
            args: Prisma.JournalActionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.JournalActionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JournalActionPayload>[]
          }
          delete: {
            args: Prisma.JournalActionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JournalActionPayload>
          }
          update: {
            args: Prisma.JournalActionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JournalActionPayload>
          }
          deleteMany: {
            args: Prisma.JournalActionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.JournalActionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.JournalActionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JournalActionPayload>[]
          }
          upsert: {
            args: Prisma.JournalActionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JournalActionPayload>
          }
          aggregate: {
            args: Prisma.JournalActionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateJournalAction>
          }
          groupBy: {
            args: Prisma.JournalActionGroupByArgs<ExtArgs>
            result: $Utils.Optional<JournalActionGroupByOutputType>[]
          }
          count: {
            args: Prisma.JournalActionCountArgs<ExtArgs>
            result: $Utils.Optional<JournalActionCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    userProfile?: UserProfileOmit
    structure?: StructureOmit
    tuteur?: TuteurOmit
    stagiaire?: StagiaireOmit
    dPAF?: DPAFOmit
    demandeStage?: DemandeStageOmit
    stage?: StageOmit
    candidatureScore?: CandidatureScoreOmit
    suggestionAffectation?: SuggestionAffectationOmit
    message?: MessageOmit
    themeTuteur?: ThemeTuteurOmit
    parametreSysteme?: ParametreSystemeOmit
    journalAction?: JournalActionOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    messagesSent: number
    messagesReceived: number
    journalActions: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    messagesSent?: boolean | UserCountOutputTypeCountMessagesSentArgs
    messagesReceived?: boolean | UserCountOutputTypeCountMessagesReceivedArgs
    journalActions?: boolean | UserCountOutputTypeCountJournalActionsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMessagesSentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMessagesReceivedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountJournalActionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JournalActionWhereInput
  }


  /**
   * Count Type StructureCountOutputType
   */

  export type StructureCountOutputType = {
    tuteurs: number
    stagiaires: number
    demandesStages: number
    stages: number
  }

  export type StructureCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tuteurs?: boolean | StructureCountOutputTypeCountTuteursArgs
    stagiaires?: boolean | StructureCountOutputTypeCountStagiairesArgs
    demandesStages?: boolean | StructureCountOutputTypeCountDemandesStagesArgs
    stages?: boolean | StructureCountOutputTypeCountStagesArgs
  }

  // Custom InputTypes
  /**
   * StructureCountOutputType without action
   */
  export type StructureCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StructureCountOutputType
     */
    select?: StructureCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StructureCountOutputType without action
   */
  export type StructureCountOutputTypeCountTuteursArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TuteurWhereInput
  }

  /**
   * StructureCountOutputType without action
   */
  export type StructureCountOutputTypeCountStagiairesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StagiaireWhereInput
  }

  /**
   * StructureCountOutputType without action
   */
  export type StructureCountOutputTypeCountDemandesStagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DemandeStageWhereInput
  }

  /**
   * StructureCountOutputType without action
   */
  export type StructureCountOutputTypeCountStagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StageWhereInput
  }


  /**
   * Count Type TuteurCountOutputType
   */

  export type TuteurCountOutputType = {
    stagiaires: number
    stages: number
    themes: number
    suggestions: number
  }

  export type TuteurCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stagiaires?: boolean | TuteurCountOutputTypeCountStagiairesArgs
    stages?: boolean | TuteurCountOutputTypeCountStagesArgs
    themes?: boolean | TuteurCountOutputTypeCountThemesArgs
    suggestions?: boolean | TuteurCountOutputTypeCountSuggestionsArgs
  }

  // Custom InputTypes
  /**
   * TuteurCountOutputType without action
   */
  export type TuteurCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TuteurCountOutputType
     */
    select?: TuteurCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TuteurCountOutputType without action
   */
  export type TuteurCountOutputTypeCountStagiairesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StagiaireWhereInput
  }

  /**
   * TuteurCountOutputType without action
   */
  export type TuteurCountOutputTypeCountStagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StageWhereInput
  }

  /**
   * TuteurCountOutputType without action
   */
  export type TuteurCountOutputTypeCountThemesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ThemeTuteurWhereInput
  }

  /**
   * TuteurCountOutputType without action
   */
  export type TuteurCountOutputTypeCountSuggestionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SuggestionAffectationWhereInput
  }


  /**
   * Count Type StagiaireCountOutputType
   */

  export type StagiaireCountOutputType = {
    demandesStages: number
    stages: number
    candidatureScores: number
    suggestions: number
  }

  export type StagiaireCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    demandesStages?: boolean | StagiaireCountOutputTypeCountDemandesStagesArgs
    stages?: boolean | StagiaireCountOutputTypeCountStagesArgs
    candidatureScores?: boolean | StagiaireCountOutputTypeCountCandidatureScoresArgs
    suggestions?: boolean | StagiaireCountOutputTypeCountSuggestionsArgs
  }

  // Custom InputTypes
  /**
   * StagiaireCountOutputType without action
   */
  export type StagiaireCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StagiaireCountOutputType
     */
    select?: StagiaireCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StagiaireCountOutputType without action
   */
  export type StagiaireCountOutputTypeCountDemandesStagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DemandeStageWhereInput
  }

  /**
   * StagiaireCountOutputType without action
   */
  export type StagiaireCountOutputTypeCountStagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StageWhereInput
  }

  /**
   * StagiaireCountOutputType without action
   */
  export type StagiaireCountOutputTypeCountCandidatureScoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CandidatureScoreWhereInput
  }

  /**
   * StagiaireCountOutputType without action
   */
  export type StagiaireCountOutputTypeCountSuggestionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SuggestionAffectationWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    passwordHash: string | null
    role: $Enums.UserRole | null
    isActive: boolean | null
    createdAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    passwordHash: string | null
    role: $Enums.UserRole | null
    isActive: boolean | null
    createdAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    passwordHash: number
    role: number
    isActive: number
    createdAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    passwordHash?: true
    role?: true
    isActive?: true
    createdAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    passwordHash?: true
    role?: true
    isActive?: true
    createdAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    passwordHash?: true
    role?: true
    isActive?: true
    createdAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive: boolean
    createdAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    role?: boolean
    isActive?: boolean
    createdAt?: boolean
    profile?: boolean | User$profileArgs<ExtArgs>
    tuteur?: boolean | User$tuteurArgs<ExtArgs>
    stagiaire?: boolean | User$stagiaireArgs<ExtArgs>
    dpaf?: boolean | User$dpafArgs<ExtArgs>
    structure?: boolean | User$structureArgs<ExtArgs>
    messagesSent?: boolean | User$messagesSentArgs<ExtArgs>
    messagesReceived?: boolean | User$messagesReceivedArgs<ExtArgs>
    journalActions?: boolean | User$journalActionsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    role?: boolean
    isActive?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    role?: boolean
    isActive?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    role?: boolean
    isActive?: boolean
    createdAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "passwordHash" | "role" | "isActive" | "createdAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profile?: boolean | User$profileArgs<ExtArgs>
    tuteur?: boolean | User$tuteurArgs<ExtArgs>
    stagiaire?: boolean | User$stagiaireArgs<ExtArgs>
    dpaf?: boolean | User$dpafArgs<ExtArgs>
    structure?: boolean | User$structureArgs<ExtArgs>
    messagesSent?: boolean | User$messagesSentArgs<ExtArgs>
    messagesReceived?: boolean | User$messagesReceivedArgs<ExtArgs>
    journalActions?: boolean | User$journalActionsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      profile: Prisma.$UserProfilePayload<ExtArgs> | null
      tuteur: Prisma.$TuteurPayload<ExtArgs> | null
      stagiaire: Prisma.$StagiairePayload<ExtArgs> | null
      dpaf: Prisma.$DPAFPayload<ExtArgs> | null
      structure: Prisma.$StructurePayload<ExtArgs> | null
      messagesSent: Prisma.$MessagePayload<ExtArgs>[]
      messagesReceived: Prisma.$MessagePayload<ExtArgs>[]
      journalActions: Prisma.$JournalActionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      passwordHash: string
      role: $Enums.UserRole
      isActive: boolean
      createdAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    profile<T extends User$profileArgs<ExtArgs> = {}>(args?: Subset<T, User$profileArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    tuteur<T extends User$tuteurArgs<ExtArgs> = {}>(args?: Subset<T, User$tuteurArgs<ExtArgs>>): Prisma__TuteurClient<$Result.GetResult<Prisma.$TuteurPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    stagiaire<T extends User$stagiaireArgs<ExtArgs> = {}>(args?: Subset<T, User$stagiaireArgs<ExtArgs>>): Prisma__StagiaireClient<$Result.GetResult<Prisma.$StagiairePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    dpaf<T extends User$dpafArgs<ExtArgs> = {}>(args?: Subset<T, User$dpafArgs<ExtArgs>>): Prisma__DPAFClient<$Result.GetResult<Prisma.$DPAFPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    structure<T extends User$structureArgs<ExtArgs> = {}>(args?: Subset<T, User$structureArgs<ExtArgs>>): Prisma__StructureClient<$Result.GetResult<Prisma.$StructurePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    messagesSent<T extends User$messagesSentArgs<ExtArgs> = {}>(args?: Subset<T, User$messagesSentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    messagesReceived<T extends User$messagesReceivedArgs<ExtArgs> = {}>(args?: Subset<T, User$messagesReceivedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    journalActions<T extends User$journalActionsArgs<ExtArgs> = {}>(args?: Subset<T, User$journalActionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JournalActionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly passwordHash: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'UserRole'>
    readonly isActive: FieldRef<"User", 'Boolean'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.profile
   */
  export type User$profileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProfile
     */
    omit?: UserProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    where?: UserProfileWhereInput
  }

  /**
   * User.tuteur
   */
  export type User$tuteurArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tuteur
     */
    select?: TuteurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tuteur
     */
    omit?: TuteurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TuteurInclude<ExtArgs> | null
    where?: TuteurWhereInput
  }

  /**
   * User.stagiaire
   */
  export type User$stagiaireArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stagiaire
     */
    select?: StagiaireSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stagiaire
     */
    omit?: StagiaireOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StagiaireInclude<ExtArgs> | null
    where?: StagiaireWhereInput
  }

  /**
   * User.dpaf
   */
  export type User$dpafArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DPAF
     */
    select?: DPAFSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DPAF
     */
    omit?: DPAFOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DPAFInclude<ExtArgs> | null
    where?: DPAFWhereInput
  }

  /**
   * User.structure
   */
  export type User$structureArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Structure
     */
    select?: StructureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Structure
     */
    omit?: StructureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StructureInclude<ExtArgs> | null
    where?: StructureWhereInput
  }

  /**
   * User.messagesSent
   */
  export type User$messagesSentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * User.messagesReceived
   */
  export type User$messagesReceivedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * User.journalActions
   */
  export type User$journalActionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JournalAction
     */
    select?: JournalActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JournalAction
     */
    omit?: JournalActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JournalActionInclude<ExtArgs> | null
    where?: JournalActionWhereInput
    orderBy?: JournalActionOrderByWithRelationInput | JournalActionOrderByWithRelationInput[]
    cursor?: JournalActionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JournalActionScalarFieldEnum | JournalActionScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model UserProfile
   */

  export type AggregateUserProfile = {
    _count: UserProfileCountAggregateOutputType | null
    _min: UserProfileMinAggregateOutputType | null
    _max: UserProfileMaxAggregateOutputType | null
  }

  export type UserProfileMinAggregateOutputType = {
    userId: string | null
    nom: string | null
    prenom: string | null
    telephone: string | null
    photo: string | null
    adresse: string | null
  }

  export type UserProfileMaxAggregateOutputType = {
    userId: string | null
    nom: string | null
    prenom: string | null
    telephone: string | null
    photo: string | null
    adresse: string | null
  }

  export type UserProfileCountAggregateOutputType = {
    userId: number
    nom: number
    prenom: number
    telephone: number
    photo: number
    adresse: number
    autresInfos: number
    _all: number
  }


  export type UserProfileMinAggregateInputType = {
    userId?: true
    nom?: true
    prenom?: true
    telephone?: true
    photo?: true
    adresse?: true
  }

  export type UserProfileMaxAggregateInputType = {
    userId?: true
    nom?: true
    prenom?: true
    telephone?: true
    photo?: true
    adresse?: true
  }

  export type UserProfileCountAggregateInputType = {
    userId?: true
    nom?: true
    prenom?: true
    telephone?: true
    photo?: true
    adresse?: true
    autresInfos?: true
    _all?: true
  }

  export type UserProfileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserProfile to aggregate.
     */
    where?: UserProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProfiles to fetch.
     */
    orderBy?: UserProfileOrderByWithRelationInput | UserProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserProfiles
    **/
    _count?: true | UserProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserProfileMaxAggregateInputType
  }

  export type GetUserProfileAggregateType<T extends UserProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateUserProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserProfile[P]>
      : GetScalarType<T[P], AggregateUserProfile[P]>
  }




  export type UserProfileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserProfileWhereInput
    orderBy?: UserProfileOrderByWithAggregationInput | UserProfileOrderByWithAggregationInput[]
    by: UserProfileScalarFieldEnum[] | UserProfileScalarFieldEnum
    having?: UserProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserProfileCountAggregateInputType | true
    _min?: UserProfileMinAggregateInputType
    _max?: UserProfileMaxAggregateInputType
  }

  export type UserProfileGroupByOutputType = {
    userId: string
    nom: string | null
    prenom: string | null
    telephone: string | null
    photo: string | null
    adresse: string | null
    autresInfos: JsonValue | null
    _count: UserProfileCountAggregateOutputType | null
    _min: UserProfileMinAggregateOutputType | null
    _max: UserProfileMaxAggregateOutputType | null
  }

  type GetUserProfileGroupByPayload<T extends UserProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserProfileGroupByOutputType[P]>
            : GetScalarType<T[P], UserProfileGroupByOutputType[P]>
        }
      >
    >


  export type UserProfileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    nom?: boolean
    prenom?: boolean
    telephone?: boolean
    photo?: boolean
    adresse?: boolean
    autresInfos?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userProfile"]>

  export type UserProfileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    nom?: boolean
    prenom?: boolean
    telephone?: boolean
    photo?: boolean
    adresse?: boolean
    autresInfos?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userProfile"]>

  export type UserProfileSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    nom?: boolean
    prenom?: boolean
    telephone?: boolean
    photo?: boolean
    adresse?: boolean
    autresInfos?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userProfile"]>

  export type UserProfileSelectScalar = {
    userId?: boolean
    nom?: boolean
    prenom?: boolean
    telephone?: boolean
    photo?: boolean
    adresse?: boolean
    autresInfos?: boolean
  }

  export type UserProfileOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"userId" | "nom" | "prenom" | "telephone" | "photo" | "adresse" | "autresInfos", ExtArgs["result"]["userProfile"]>
  export type UserProfileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserProfileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserProfileIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserProfilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserProfile"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: string
      nom: string | null
      prenom: string | null
      telephone: string | null
      photo: string | null
      adresse: string | null
      autresInfos: Prisma.JsonValue | null
    }, ExtArgs["result"]["userProfile"]>
    composites: {}
  }

  type UserProfileGetPayload<S extends boolean | null | undefined | UserProfileDefaultArgs> = $Result.GetResult<Prisma.$UserProfilePayload, S>

  type UserProfileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserProfileFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserProfileCountAggregateInputType | true
    }

  export interface UserProfileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserProfile'], meta: { name: 'UserProfile' } }
    /**
     * Find zero or one UserProfile that matches the filter.
     * @param {UserProfileFindUniqueArgs} args - Arguments to find a UserProfile
     * @example
     * // Get one UserProfile
     * const userProfile = await prisma.userProfile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserProfileFindUniqueArgs>(args: SelectSubset<T, UserProfileFindUniqueArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserProfile that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserProfileFindUniqueOrThrowArgs} args - Arguments to find a UserProfile
     * @example
     * // Get one UserProfile
     * const userProfile = await prisma.userProfile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserProfileFindUniqueOrThrowArgs>(args: SelectSubset<T, UserProfileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserProfile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileFindFirstArgs} args - Arguments to find a UserProfile
     * @example
     * // Get one UserProfile
     * const userProfile = await prisma.userProfile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserProfileFindFirstArgs>(args?: SelectSubset<T, UserProfileFindFirstArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserProfile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileFindFirstOrThrowArgs} args - Arguments to find a UserProfile
     * @example
     * // Get one UserProfile
     * const userProfile = await prisma.userProfile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserProfileFindFirstOrThrowArgs>(args?: SelectSubset<T, UserProfileFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserProfiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserProfiles
     * const userProfiles = await prisma.userProfile.findMany()
     * 
     * // Get first 10 UserProfiles
     * const userProfiles = await prisma.userProfile.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const userProfileWithUserIdOnly = await prisma.userProfile.findMany({ select: { userId: true } })
     * 
     */
    findMany<T extends UserProfileFindManyArgs>(args?: SelectSubset<T, UserProfileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserProfile.
     * @param {UserProfileCreateArgs} args - Arguments to create a UserProfile.
     * @example
     * // Create one UserProfile
     * const UserProfile = await prisma.userProfile.create({
     *   data: {
     *     // ... data to create a UserProfile
     *   }
     * })
     * 
     */
    create<T extends UserProfileCreateArgs>(args: SelectSubset<T, UserProfileCreateArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserProfiles.
     * @param {UserProfileCreateManyArgs} args - Arguments to create many UserProfiles.
     * @example
     * // Create many UserProfiles
     * const userProfile = await prisma.userProfile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserProfileCreateManyArgs>(args?: SelectSubset<T, UserProfileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserProfiles and returns the data saved in the database.
     * @param {UserProfileCreateManyAndReturnArgs} args - Arguments to create many UserProfiles.
     * @example
     * // Create many UserProfiles
     * const userProfile = await prisma.userProfile.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserProfiles and only return the `userId`
     * const userProfileWithUserIdOnly = await prisma.userProfile.createManyAndReturn({
     *   select: { userId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserProfileCreateManyAndReturnArgs>(args?: SelectSubset<T, UserProfileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserProfile.
     * @param {UserProfileDeleteArgs} args - Arguments to delete one UserProfile.
     * @example
     * // Delete one UserProfile
     * const UserProfile = await prisma.userProfile.delete({
     *   where: {
     *     // ... filter to delete one UserProfile
     *   }
     * })
     * 
     */
    delete<T extends UserProfileDeleteArgs>(args: SelectSubset<T, UserProfileDeleteArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserProfile.
     * @param {UserProfileUpdateArgs} args - Arguments to update one UserProfile.
     * @example
     * // Update one UserProfile
     * const userProfile = await prisma.userProfile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserProfileUpdateArgs>(args: SelectSubset<T, UserProfileUpdateArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserProfiles.
     * @param {UserProfileDeleteManyArgs} args - Arguments to filter UserProfiles to delete.
     * @example
     * // Delete a few UserProfiles
     * const { count } = await prisma.userProfile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserProfileDeleteManyArgs>(args?: SelectSubset<T, UserProfileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserProfiles
     * const userProfile = await prisma.userProfile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserProfileUpdateManyArgs>(args: SelectSubset<T, UserProfileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserProfiles and returns the data updated in the database.
     * @param {UserProfileUpdateManyAndReturnArgs} args - Arguments to update many UserProfiles.
     * @example
     * // Update many UserProfiles
     * const userProfile = await prisma.userProfile.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserProfiles and only return the `userId`
     * const userProfileWithUserIdOnly = await prisma.userProfile.updateManyAndReturn({
     *   select: { userId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserProfileUpdateManyAndReturnArgs>(args: SelectSubset<T, UserProfileUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserProfile.
     * @param {UserProfileUpsertArgs} args - Arguments to update or create a UserProfile.
     * @example
     * // Update or create a UserProfile
     * const userProfile = await prisma.userProfile.upsert({
     *   create: {
     *     // ... data to create a UserProfile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserProfile we want to update
     *   }
     * })
     */
    upsert<T extends UserProfileUpsertArgs>(args: SelectSubset<T, UserProfileUpsertArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileCountArgs} args - Arguments to filter UserProfiles to count.
     * @example
     * // Count the number of UserProfiles
     * const count = await prisma.userProfile.count({
     *   where: {
     *     // ... the filter for the UserProfiles we want to count
     *   }
     * })
    **/
    count<T extends UserProfileCountArgs>(
      args?: Subset<T, UserProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserProfileAggregateArgs>(args: Subset<T, UserProfileAggregateArgs>): Prisma.PrismaPromise<GetUserProfileAggregateType<T>>

    /**
     * Group by UserProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserProfileGroupByArgs['orderBy'] }
        : { orderBy?: UserProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserProfile model
   */
  readonly fields: UserProfileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserProfile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserProfileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserProfile model
   */
  interface UserProfileFieldRefs {
    readonly userId: FieldRef<"UserProfile", 'String'>
    readonly nom: FieldRef<"UserProfile", 'String'>
    readonly prenom: FieldRef<"UserProfile", 'String'>
    readonly telephone: FieldRef<"UserProfile", 'String'>
    readonly photo: FieldRef<"UserProfile", 'String'>
    readonly adresse: FieldRef<"UserProfile", 'String'>
    readonly autresInfos: FieldRef<"UserProfile", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * UserProfile findUnique
   */
  export type UserProfileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProfile
     */
    omit?: UserProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    /**
     * Filter, which UserProfile to fetch.
     */
    where: UserProfileWhereUniqueInput
  }

  /**
   * UserProfile findUniqueOrThrow
   */
  export type UserProfileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProfile
     */
    omit?: UserProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    /**
     * Filter, which UserProfile to fetch.
     */
    where: UserProfileWhereUniqueInput
  }

  /**
   * UserProfile findFirst
   */
  export type UserProfileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProfile
     */
    omit?: UserProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    /**
     * Filter, which UserProfile to fetch.
     */
    where?: UserProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProfiles to fetch.
     */
    orderBy?: UserProfileOrderByWithRelationInput | UserProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserProfiles.
     */
    cursor?: UserProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserProfiles.
     */
    distinct?: UserProfileScalarFieldEnum | UserProfileScalarFieldEnum[]
  }

  /**
   * UserProfile findFirstOrThrow
   */
  export type UserProfileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProfile
     */
    omit?: UserProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    /**
     * Filter, which UserProfile to fetch.
     */
    where?: UserProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProfiles to fetch.
     */
    orderBy?: UserProfileOrderByWithRelationInput | UserProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserProfiles.
     */
    cursor?: UserProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserProfiles.
     */
    distinct?: UserProfileScalarFieldEnum | UserProfileScalarFieldEnum[]
  }

  /**
   * UserProfile findMany
   */
  export type UserProfileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProfile
     */
    omit?: UserProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    /**
     * Filter, which UserProfiles to fetch.
     */
    where?: UserProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProfiles to fetch.
     */
    orderBy?: UserProfileOrderByWithRelationInput | UserProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserProfiles.
     */
    cursor?: UserProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProfiles.
     */
    skip?: number
    distinct?: UserProfileScalarFieldEnum | UserProfileScalarFieldEnum[]
  }

  /**
   * UserProfile create
   */
  export type UserProfileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProfile
     */
    omit?: UserProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    /**
     * The data needed to create a UserProfile.
     */
    data: XOR<UserProfileCreateInput, UserProfileUncheckedCreateInput>
  }

  /**
   * UserProfile createMany
   */
  export type UserProfileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserProfiles.
     */
    data: UserProfileCreateManyInput | UserProfileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserProfile createManyAndReturn
   */
  export type UserProfileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserProfile
     */
    omit?: UserProfileOmit<ExtArgs> | null
    /**
     * The data used to create many UserProfiles.
     */
    data: UserProfileCreateManyInput | UserProfileCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserProfile update
   */
  export type UserProfileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProfile
     */
    omit?: UserProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    /**
     * The data needed to update a UserProfile.
     */
    data: XOR<UserProfileUpdateInput, UserProfileUncheckedUpdateInput>
    /**
     * Choose, which UserProfile to update.
     */
    where: UserProfileWhereUniqueInput
  }

  /**
   * UserProfile updateMany
   */
  export type UserProfileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserProfiles.
     */
    data: XOR<UserProfileUpdateManyMutationInput, UserProfileUncheckedUpdateManyInput>
    /**
     * Filter which UserProfiles to update
     */
    where?: UserProfileWhereInput
    /**
     * Limit how many UserProfiles to update.
     */
    limit?: number
  }

  /**
   * UserProfile updateManyAndReturn
   */
  export type UserProfileUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserProfile
     */
    omit?: UserProfileOmit<ExtArgs> | null
    /**
     * The data used to update UserProfiles.
     */
    data: XOR<UserProfileUpdateManyMutationInput, UserProfileUncheckedUpdateManyInput>
    /**
     * Filter which UserProfiles to update
     */
    where?: UserProfileWhereInput
    /**
     * Limit how many UserProfiles to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserProfile upsert
   */
  export type UserProfileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProfile
     */
    omit?: UserProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    /**
     * The filter to search for the UserProfile to update in case it exists.
     */
    where: UserProfileWhereUniqueInput
    /**
     * In case the UserProfile found by the `where` argument doesn't exist, create a new UserProfile with this data.
     */
    create: XOR<UserProfileCreateInput, UserProfileUncheckedCreateInput>
    /**
     * In case the UserProfile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserProfileUpdateInput, UserProfileUncheckedUpdateInput>
  }

  /**
   * UserProfile delete
   */
  export type UserProfileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProfile
     */
    omit?: UserProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    /**
     * Filter which UserProfile to delete.
     */
    where: UserProfileWhereUniqueInput
  }

  /**
   * UserProfile deleteMany
   */
  export type UserProfileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserProfiles to delete
     */
    where?: UserProfileWhereInput
    /**
     * Limit how many UserProfiles to delete.
     */
    limit?: number
  }

  /**
   * UserProfile without action
   */
  export type UserProfileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProfile
     */
    omit?: UserProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
  }


  /**
   * Model Structure
   */

  export type AggregateStructure = {
    _count: StructureCountAggregateOutputType | null
    _min: StructureMinAggregateOutputType | null
    _max: StructureMaxAggregateOutputType | null
  }

  export type StructureMinAggregateOutputType = {
    id: string | null
    userId: string | null
    nomStructure: string | null
    type: string | null
    adresse: string | null
    emailContact: string | null
    telephoneContact: string | null
  }

  export type StructureMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    nomStructure: string | null
    type: string | null
    adresse: string | null
    emailContact: string | null
    telephoneContact: string | null
  }

  export type StructureCountAggregateOutputType = {
    id: number
    userId: number
    nomStructure: number
    type: number
    adresse: number
    emailContact: number
    telephoneContact: number
    _all: number
  }


  export type StructureMinAggregateInputType = {
    id?: true
    userId?: true
    nomStructure?: true
    type?: true
    adresse?: true
    emailContact?: true
    telephoneContact?: true
  }

  export type StructureMaxAggregateInputType = {
    id?: true
    userId?: true
    nomStructure?: true
    type?: true
    adresse?: true
    emailContact?: true
    telephoneContact?: true
  }

  export type StructureCountAggregateInputType = {
    id?: true
    userId?: true
    nomStructure?: true
    type?: true
    adresse?: true
    emailContact?: true
    telephoneContact?: true
    _all?: true
  }

  export type StructureAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Structure to aggregate.
     */
    where?: StructureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Structures to fetch.
     */
    orderBy?: StructureOrderByWithRelationInput | StructureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StructureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Structures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Structures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Structures
    **/
    _count?: true | StructureCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StructureMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StructureMaxAggregateInputType
  }

  export type GetStructureAggregateType<T extends StructureAggregateArgs> = {
        [P in keyof T & keyof AggregateStructure]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStructure[P]>
      : GetScalarType<T[P], AggregateStructure[P]>
  }




  export type StructureGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StructureWhereInput
    orderBy?: StructureOrderByWithAggregationInput | StructureOrderByWithAggregationInput[]
    by: StructureScalarFieldEnum[] | StructureScalarFieldEnum
    having?: StructureScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StructureCountAggregateInputType | true
    _min?: StructureMinAggregateInputType
    _max?: StructureMaxAggregateInputType
  }

  export type StructureGroupByOutputType = {
    id: string
    userId: string
    nomStructure: string
    type: string | null
    adresse: string | null
    emailContact: string | null
    telephoneContact: string | null
    _count: StructureCountAggregateOutputType | null
    _min: StructureMinAggregateOutputType | null
    _max: StructureMaxAggregateOutputType | null
  }

  type GetStructureGroupByPayload<T extends StructureGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StructureGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StructureGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StructureGroupByOutputType[P]>
            : GetScalarType<T[P], StructureGroupByOutputType[P]>
        }
      >
    >


  export type StructureSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    nomStructure?: boolean
    type?: boolean
    adresse?: boolean
    emailContact?: boolean
    telephoneContact?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    tuteurs?: boolean | Structure$tuteursArgs<ExtArgs>
    stagiaires?: boolean | Structure$stagiairesArgs<ExtArgs>
    demandesStages?: boolean | Structure$demandesStagesArgs<ExtArgs>
    stages?: boolean | Structure$stagesArgs<ExtArgs>
    _count?: boolean | StructureCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["structure"]>

  export type StructureSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    nomStructure?: boolean
    type?: boolean
    adresse?: boolean
    emailContact?: boolean
    telephoneContact?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["structure"]>

  export type StructureSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    nomStructure?: boolean
    type?: boolean
    adresse?: boolean
    emailContact?: boolean
    telephoneContact?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["structure"]>

  export type StructureSelectScalar = {
    id?: boolean
    userId?: boolean
    nomStructure?: boolean
    type?: boolean
    adresse?: boolean
    emailContact?: boolean
    telephoneContact?: boolean
  }

  export type StructureOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "nomStructure" | "type" | "adresse" | "emailContact" | "telephoneContact", ExtArgs["result"]["structure"]>
  export type StructureInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    tuteurs?: boolean | Structure$tuteursArgs<ExtArgs>
    stagiaires?: boolean | Structure$stagiairesArgs<ExtArgs>
    demandesStages?: boolean | Structure$demandesStagesArgs<ExtArgs>
    stages?: boolean | Structure$stagesArgs<ExtArgs>
    _count?: boolean | StructureCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type StructureIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type StructureIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $StructurePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Structure"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      tuteurs: Prisma.$TuteurPayload<ExtArgs>[]
      stagiaires: Prisma.$StagiairePayload<ExtArgs>[]
      demandesStages: Prisma.$DemandeStagePayload<ExtArgs>[]
      stages: Prisma.$StagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      nomStructure: string
      type: string | null
      adresse: string | null
      emailContact: string | null
      telephoneContact: string | null
    }, ExtArgs["result"]["structure"]>
    composites: {}
  }

  type StructureGetPayload<S extends boolean | null | undefined | StructureDefaultArgs> = $Result.GetResult<Prisma.$StructurePayload, S>

  type StructureCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StructureFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StructureCountAggregateInputType | true
    }

  export interface StructureDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Structure'], meta: { name: 'Structure' } }
    /**
     * Find zero or one Structure that matches the filter.
     * @param {StructureFindUniqueArgs} args - Arguments to find a Structure
     * @example
     * // Get one Structure
     * const structure = await prisma.structure.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StructureFindUniqueArgs>(args: SelectSubset<T, StructureFindUniqueArgs<ExtArgs>>): Prisma__StructureClient<$Result.GetResult<Prisma.$StructurePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Structure that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StructureFindUniqueOrThrowArgs} args - Arguments to find a Structure
     * @example
     * // Get one Structure
     * const structure = await prisma.structure.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StructureFindUniqueOrThrowArgs>(args: SelectSubset<T, StructureFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StructureClient<$Result.GetResult<Prisma.$StructurePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Structure that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StructureFindFirstArgs} args - Arguments to find a Structure
     * @example
     * // Get one Structure
     * const structure = await prisma.structure.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StructureFindFirstArgs>(args?: SelectSubset<T, StructureFindFirstArgs<ExtArgs>>): Prisma__StructureClient<$Result.GetResult<Prisma.$StructurePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Structure that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StructureFindFirstOrThrowArgs} args - Arguments to find a Structure
     * @example
     * // Get one Structure
     * const structure = await prisma.structure.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StructureFindFirstOrThrowArgs>(args?: SelectSubset<T, StructureFindFirstOrThrowArgs<ExtArgs>>): Prisma__StructureClient<$Result.GetResult<Prisma.$StructurePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Structures that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StructureFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Structures
     * const structures = await prisma.structure.findMany()
     * 
     * // Get first 10 Structures
     * const structures = await prisma.structure.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const structureWithIdOnly = await prisma.structure.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StructureFindManyArgs>(args?: SelectSubset<T, StructureFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StructurePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Structure.
     * @param {StructureCreateArgs} args - Arguments to create a Structure.
     * @example
     * // Create one Structure
     * const Structure = await prisma.structure.create({
     *   data: {
     *     // ... data to create a Structure
     *   }
     * })
     * 
     */
    create<T extends StructureCreateArgs>(args: SelectSubset<T, StructureCreateArgs<ExtArgs>>): Prisma__StructureClient<$Result.GetResult<Prisma.$StructurePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Structures.
     * @param {StructureCreateManyArgs} args - Arguments to create many Structures.
     * @example
     * // Create many Structures
     * const structure = await prisma.structure.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StructureCreateManyArgs>(args?: SelectSubset<T, StructureCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Structures and returns the data saved in the database.
     * @param {StructureCreateManyAndReturnArgs} args - Arguments to create many Structures.
     * @example
     * // Create many Structures
     * const structure = await prisma.structure.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Structures and only return the `id`
     * const structureWithIdOnly = await prisma.structure.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StructureCreateManyAndReturnArgs>(args?: SelectSubset<T, StructureCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StructurePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Structure.
     * @param {StructureDeleteArgs} args - Arguments to delete one Structure.
     * @example
     * // Delete one Structure
     * const Structure = await prisma.structure.delete({
     *   where: {
     *     // ... filter to delete one Structure
     *   }
     * })
     * 
     */
    delete<T extends StructureDeleteArgs>(args: SelectSubset<T, StructureDeleteArgs<ExtArgs>>): Prisma__StructureClient<$Result.GetResult<Prisma.$StructurePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Structure.
     * @param {StructureUpdateArgs} args - Arguments to update one Structure.
     * @example
     * // Update one Structure
     * const structure = await prisma.structure.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StructureUpdateArgs>(args: SelectSubset<T, StructureUpdateArgs<ExtArgs>>): Prisma__StructureClient<$Result.GetResult<Prisma.$StructurePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Structures.
     * @param {StructureDeleteManyArgs} args - Arguments to filter Structures to delete.
     * @example
     * // Delete a few Structures
     * const { count } = await prisma.structure.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StructureDeleteManyArgs>(args?: SelectSubset<T, StructureDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Structures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StructureUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Structures
     * const structure = await prisma.structure.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StructureUpdateManyArgs>(args: SelectSubset<T, StructureUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Structures and returns the data updated in the database.
     * @param {StructureUpdateManyAndReturnArgs} args - Arguments to update many Structures.
     * @example
     * // Update many Structures
     * const structure = await prisma.structure.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Structures and only return the `id`
     * const structureWithIdOnly = await prisma.structure.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StructureUpdateManyAndReturnArgs>(args: SelectSubset<T, StructureUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StructurePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Structure.
     * @param {StructureUpsertArgs} args - Arguments to update or create a Structure.
     * @example
     * // Update or create a Structure
     * const structure = await prisma.structure.upsert({
     *   create: {
     *     // ... data to create a Structure
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Structure we want to update
     *   }
     * })
     */
    upsert<T extends StructureUpsertArgs>(args: SelectSubset<T, StructureUpsertArgs<ExtArgs>>): Prisma__StructureClient<$Result.GetResult<Prisma.$StructurePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Structures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StructureCountArgs} args - Arguments to filter Structures to count.
     * @example
     * // Count the number of Structures
     * const count = await prisma.structure.count({
     *   where: {
     *     // ... the filter for the Structures we want to count
     *   }
     * })
    **/
    count<T extends StructureCountArgs>(
      args?: Subset<T, StructureCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StructureCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Structure.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StructureAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StructureAggregateArgs>(args: Subset<T, StructureAggregateArgs>): Prisma.PrismaPromise<GetStructureAggregateType<T>>

    /**
     * Group by Structure.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StructureGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StructureGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StructureGroupByArgs['orderBy'] }
        : { orderBy?: StructureGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StructureGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStructureGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Structure model
   */
  readonly fields: StructureFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Structure.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StructureClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    tuteurs<T extends Structure$tuteursArgs<ExtArgs> = {}>(args?: Subset<T, Structure$tuteursArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TuteurPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    stagiaires<T extends Structure$stagiairesArgs<ExtArgs> = {}>(args?: Subset<T, Structure$stagiairesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StagiairePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    demandesStages<T extends Structure$demandesStagesArgs<ExtArgs> = {}>(args?: Subset<T, Structure$demandesStagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DemandeStagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    stages<T extends Structure$stagesArgs<ExtArgs> = {}>(args?: Subset<T, Structure$stagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Structure model
   */
  interface StructureFieldRefs {
    readonly id: FieldRef<"Structure", 'String'>
    readonly userId: FieldRef<"Structure", 'String'>
    readonly nomStructure: FieldRef<"Structure", 'String'>
    readonly type: FieldRef<"Structure", 'String'>
    readonly adresse: FieldRef<"Structure", 'String'>
    readonly emailContact: FieldRef<"Structure", 'String'>
    readonly telephoneContact: FieldRef<"Structure", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Structure findUnique
   */
  export type StructureFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Structure
     */
    select?: StructureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Structure
     */
    omit?: StructureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StructureInclude<ExtArgs> | null
    /**
     * Filter, which Structure to fetch.
     */
    where: StructureWhereUniqueInput
  }

  /**
   * Structure findUniqueOrThrow
   */
  export type StructureFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Structure
     */
    select?: StructureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Structure
     */
    omit?: StructureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StructureInclude<ExtArgs> | null
    /**
     * Filter, which Structure to fetch.
     */
    where: StructureWhereUniqueInput
  }

  /**
   * Structure findFirst
   */
  export type StructureFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Structure
     */
    select?: StructureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Structure
     */
    omit?: StructureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StructureInclude<ExtArgs> | null
    /**
     * Filter, which Structure to fetch.
     */
    where?: StructureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Structures to fetch.
     */
    orderBy?: StructureOrderByWithRelationInput | StructureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Structures.
     */
    cursor?: StructureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Structures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Structures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Structures.
     */
    distinct?: StructureScalarFieldEnum | StructureScalarFieldEnum[]
  }

  /**
   * Structure findFirstOrThrow
   */
  export type StructureFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Structure
     */
    select?: StructureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Structure
     */
    omit?: StructureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StructureInclude<ExtArgs> | null
    /**
     * Filter, which Structure to fetch.
     */
    where?: StructureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Structures to fetch.
     */
    orderBy?: StructureOrderByWithRelationInput | StructureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Structures.
     */
    cursor?: StructureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Structures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Structures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Structures.
     */
    distinct?: StructureScalarFieldEnum | StructureScalarFieldEnum[]
  }

  /**
   * Structure findMany
   */
  export type StructureFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Structure
     */
    select?: StructureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Structure
     */
    omit?: StructureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StructureInclude<ExtArgs> | null
    /**
     * Filter, which Structures to fetch.
     */
    where?: StructureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Structures to fetch.
     */
    orderBy?: StructureOrderByWithRelationInput | StructureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Structures.
     */
    cursor?: StructureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Structures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Structures.
     */
    skip?: number
    distinct?: StructureScalarFieldEnum | StructureScalarFieldEnum[]
  }

  /**
   * Structure create
   */
  export type StructureCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Structure
     */
    select?: StructureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Structure
     */
    omit?: StructureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StructureInclude<ExtArgs> | null
    /**
     * The data needed to create a Structure.
     */
    data: XOR<StructureCreateInput, StructureUncheckedCreateInput>
  }

  /**
   * Structure createMany
   */
  export type StructureCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Structures.
     */
    data: StructureCreateManyInput | StructureCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Structure createManyAndReturn
   */
  export type StructureCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Structure
     */
    select?: StructureSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Structure
     */
    omit?: StructureOmit<ExtArgs> | null
    /**
     * The data used to create many Structures.
     */
    data: StructureCreateManyInput | StructureCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StructureIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Structure update
   */
  export type StructureUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Structure
     */
    select?: StructureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Structure
     */
    omit?: StructureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StructureInclude<ExtArgs> | null
    /**
     * The data needed to update a Structure.
     */
    data: XOR<StructureUpdateInput, StructureUncheckedUpdateInput>
    /**
     * Choose, which Structure to update.
     */
    where: StructureWhereUniqueInput
  }

  /**
   * Structure updateMany
   */
  export type StructureUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Structures.
     */
    data: XOR<StructureUpdateManyMutationInput, StructureUncheckedUpdateManyInput>
    /**
     * Filter which Structures to update
     */
    where?: StructureWhereInput
    /**
     * Limit how many Structures to update.
     */
    limit?: number
  }

  /**
   * Structure updateManyAndReturn
   */
  export type StructureUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Structure
     */
    select?: StructureSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Structure
     */
    omit?: StructureOmit<ExtArgs> | null
    /**
     * The data used to update Structures.
     */
    data: XOR<StructureUpdateManyMutationInput, StructureUncheckedUpdateManyInput>
    /**
     * Filter which Structures to update
     */
    where?: StructureWhereInput
    /**
     * Limit how many Structures to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StructureIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Structure upsert
   */
  export type StructureUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Structure
     */
    select?: StructureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Structure
     */
    omit?: StructureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StructureInclude<ExtArgs> | null
    /**
     * The filter to search for the Structure to update in case it exists.
     */
    where: StructureWhereUniqueInput
    /**
     * In case the Structure found by the `where` argument doesn't exist, create a new Structure with this data.
     */
    create: XOR<StructureCreateInput, StructureUncheckedCreateInput>
    /**
     * In case the Structure was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StructureUpdateInput, StructureUncheckedUpdateInput>
  }

  /**
   * Structure delete
   */
  export type StructureDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Structure
     */
    select?: StructureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Structure
     */
    omit?: StructureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StructureInclude<ExtArgs> | null
    /**
     * Filter which Structure to delete.
     */
    where: StructureWhereUniqueInput
  }

  /**
   * Structure deleteMany
   */
  export type StructureDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Structures to delete
     */
    where?: StructureWhereInput
    /**
     * Limit how many Structures to delete.
     */
    limit?: number
  }

  /**
   * Structure.tuteurs
   */
  export type Structure$tuteursArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tuteur
     */
    select?: TuteurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tuteur
     */
    omit?: TuteurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TuteurInclude<ExtArgs> | null
    where?: TuteurWhereInput
    orderBy?: TuteurOrderByWithRelationInput | TuteurOrderByWithRelationInput[]
    cursor?: TuteurWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TuteurScalarFieldEnum | TuteurScalarFieldEnum[]
  }

  /**
   * Structure.stagiaires
   */
  export type Structure$stagiairesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stagiaire
     */
    select?: StagiaireSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stagiaire
     */
    omit?: StagiaireOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StagiaireInclude<ExtArgs> | null
    where?: StagiaireWhereInput
    orderBy?: StagiaireOrderByWithRelationInput | StagiaireOrderByWithRelationInput[]
    cursor?: StagiaireWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StagiaireScalarFieldEnum | StagiaireScalarFieldEnum[]
  }

  /**
   * Structure.demandesStages
   */
  export type Structure$demandesStagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DemandeStage
     */
    select?: DemandeStageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DemandeStage
     */
    omit?: DemandeStageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DemandeStageInclude<ExtArgs> | null
    where?: DemandeStageWhereInput
    orderBy?: DemandeStageOrderByWithRelationInput | DemandeStageOrderByWithRelationInput[]
    cursor?: DemandeStageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DemandeStageScalarFieldEnum | DemandeStageScalarFieldEnum[]
  }

  /**
   * Structure.stages
   */
  export type Structure$stagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stage
     */
    select?: StageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stage
     */
    omit?: StageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageInclude<ExtArgs> | null
    where?: StageWhereInput
    orderBy?: StageOrderByWithRelationInput | StageOrderByWithRelationInput[]
    cursor?: StageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StageScalarFieldEnum | StageScalarFieldEnum[]
  }

  /**
   * Structure without action
   */
  export type StructureDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Structure
     */
    select?: StructureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Structure
     */
    omit?: StructureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StructureInclude<ExtArgs> | null
  }


  /**
   * Model Tuteur
   */

  export type AggregateTuteur = {
    _count: TuteurCountAggregateOutputType | null
    _min: TuteurMinAggregateOutputType | null
    _max: TuteurMaxAggregateOutputType | null
  }

  export type TuteurMinAggregateOutputType = {
    userId: string | null
    structureId: string | null
    fonction: string | null
    disponibilite: boolean | null
  }

  export type TuteurMaxAggregateOutputType = {
    userId: string | null
    structureId: string | null
    fonction: string | null
    disponibilite: boolean | null
  }

  export type TuteurCountAggregateOutputType = {
    userId: number
    structureId: number
    fonction: number
    disponibilite: number
    competences: number
    _all: number
  }


  export type TuteurMinAggregateInputType = {
    userId?: true
    structureId?: true
    fonction?: true
    disponibilite?: true
  }

  export type TuteurMaxAggregateInputType = {
    userId?: true
    structureId?: true
    fonction?: true
    disponibilite?: true
  }

  export type TuteurCountAggregateInputType = {
    userId?: true
    structureId?: true
    fonction?: true
    disponibilite?: true
    competences?: true
    _all?: true
  }

  export type TuteurAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tuteur to aggregate.
     */
    where?: TuteurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tuteurs to fetch.
     */
    orderBy?: TuteurOrderByWithRelationInput | TuteurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TuteurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tuteurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tuteurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tuteurs
    **/
    _count?: true | TuteurCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TuteurMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TuteurMaxAggregateInputType
  }

  export type GetTuteurAggregateType<T extends TuteurAggregateArgs> = {
        [P in keyof T & keyof AggregateTuteur]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTuteur[P]>
      : GetScalarType<T[P], AggregateTuteur[P]>
  }




  export type TuteurGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TuteurWhereInput
    orderBy?: TuteurOrderByWithAggregationInput | TuteurOrderByWithAggregationInput[]
    by: TuteurScalarFieldEnum[] | TuteurScalarFieldEnum
    having?: TuteurScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TuteurCountAggregateInputType | true
    _min?: TuteurMinAggregateInputType
    _max?: TuteurMaxAggregateInputType
  }

  export type TuteurGroupByOutputType = {
    userId: string
    structureId: string | null
    fonction: string | null
    disponibilite: boolean
    competences: string[]
    _count: TuteurCountAggregateOutputType | null
    _min: TuteurMinAggregateOutputType | null
    _max: TuteurMaxAggregateOutputType | null
  }

  type GetTuteurGroupByPayload<T extends TuteurGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TuteurGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TuteurGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TuteurGroupByOutputType[P]>
            : GetScalarType<T[P], TuteurGroupByOutputType[P]>
        }
      >
    >


  export type TuteurSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    structureId?: boolean
    fonction?: boolean
    disponibilite?: boolean
    competences?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    structure?: boolean | Tuteur$structureArgs<ExtArgs>
    stagiaires?: boolean | Tuteur$stagiairesArgs<ExtArgs>
    stages?: boolean | Tuteur$stagesArgs<ExtArgs>
    themes?: boolean | Tuteur$themesArgs<ExtArgs>
    suggestions?: boolean | Tuteur$suggestionsArgs<ExtArgs>
    _count?: boolean | TuteurCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tuteur"]>

  export type TuteurSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    structureId?: boolean
    fonction?: boolean
    disponibilite?: boolean
    competences?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    structure?: boolean | Tuteur$structureArgs<ExtArgs>
  }, ExtArgs["result"]["tuteur"]>

  export type TuteurSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    structureId?: boolean
    fonction?: boolean
    disponibilite?: boolean
    competences?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    structure?: boolean | Tuteur$structureArgs<ExtArgs>
  }, ExtArgs["result"]["tuteur"]>

  export type TuteurSelectScalar = {
    userId?: boolean
    structureId?: boolean
    fonction?: boolean
    disponibilite?: boolean
    competences?: boolean
  }

  export type TuteurOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"userId" | "structureId" | "fonction" | "disponibilite" | "competences", ExtArgs["result"]["tuteur"]>
  export type TuteurInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    structure?: boolean | Tuteur$structureArgs<ExtArgs>
    stagiaires?: boolean | Tuteur$stagiairesArgs<ExtArgs>
    stages?: boolean | Tuteur$stagesArgs<ExtArgs>
    themes?: boolean | Tuteur$themesArgs<ExtArgs>
    suggestions?: boolean | Tuteur$suggestionsArgs<ExtArgs>
    _count?: boolean | TuteurCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TuteurIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    structure?: boolean | Tuteur$structureArgs<ExtArgs>
  }
  export type TuteurIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    structure?: boolean | Tuteur$structureArgs<ExtArgs>
  }

  export type $TuteurPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Tuteur"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      structure: Prisma.$StructurePayload<ExtArgs> | null
      stagiaires: Prisma.$StagiairePayload<ExtArgs>[]
      stages: Prisma.$StagePayload<ExtArgs>[]
      themes: Prisma.$ThemeTuteurPayload<ExtArgs>[]
      suggestions: Prisma.$SuggestionAffectationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: string
      structureId: string | null
      fonction: string | null
      disponibilite: boolean
      competences: string[]
    }, ExtArgs["result"]["tuteur"]>
    composites: {}
  }

  type TuteurGetPayload<S extends boolean | null | undefined | TuteurDefaultArgs> = $Result.GetResult<Prisma.$TuteurPayload, S>

  type TuteurCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TuteurFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TuteurCountAggregateInputType | true
    }

  export interface TuteurDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Tuteur'], meta: { name: 'Tuteur' } }
    /**
     * Find zero or one Tuteur that matches the filter.
     * @param {TuteurFindUniqueArgs} args - Arguments to find a Tuteur
     * @example
     * // Get one Tuteur
     * const tuteur = await prisma.tuteur.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TuteurFindUniqueArgs>(args: SelectSubset<T, TuteurFindUniqueArgs<ExtArgs>>): Prisma__TuteurClient<$Result.GetResult<Prisma.$TuteurPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Tuteur that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TuteurFindUniqueOrThrowArgs} args - Arguments to find a Tuteur
     * @example
     * // Get one Tuteur
     * const tuteur = await prisma.tuteur.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TuteurFindUniqueOrThrowArgs>(args: SelectSubset<T, TuteurFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TuteurClient<$Result.GetResult<Prisma.$TuteurPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Tuteur that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TuteurFindFirstArgs} args - Arguments to find a Tuteur
     * @example
     * // Get one Tuteur
     * const tuteur = await prisma.tuteur.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TuteurFindFirstArgs>(args?: SelectSubset<T, TuteurFindFirstArgs<ExtArgs>>): Prisma__TuteurClient<$Result.GetResult<Prisma.$TuteurPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Tuteur that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TuteurFindFirstOrThrowArgs} args - Arguments to find a Tuteur
     * @example
     * // Get one Tuteur
     * const tuteur = await prisma.tuteur.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TuteurFindFirstOrThrowArgs>(args?: SelectSubset<T, TuteurFindFirstOrThrowArgs<ExtArgs>>): Prisma__TuteurClient<$Result.GetResult<Prisma.$TuteurPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Tuteurs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TuteurFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tuteurs
     * const tuteurs = await prisma.tuteur.findMany()
     * 
     * // Get first 10 Tuteurs
     * const tuteurs = await prisma.tuteur.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const tuteurWithUserIdOnly = await prisma.tuteur.findMany({ select: { userId: true } })
     * 
     */
    findMany<T extends TuteurFindManyArgs>(args?: SelectSubset<T, TuteurFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TuteurPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Tuteur.
     * @param {TuteurCreateArgs} args - Arguments to create a Tuteur.
     * @example
     * // Create one Tuteur
     * const Tuteur = await prisma.tuteur.create({
     *   data: {
     *     // ... data to create a Tuteur
     *   }
     * })
     * 
     */
    create<T extends TuteurCreateArgs>(args: SelectSubset<T, TuteurCreateArgs<ExtArgs>>): Prisma__TuteurClient<$Result.GetResult<Prisma.$TuteurPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Tuteurs.
     * @param {TuteurCreateManyArgs} args - Arguments to create many Tuteurs.
     * @example
     * // Create many Tuteurs
     * const tuteur = await prisma.tuteur.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TuteurCreateManyArgs>(args?: SelectSubset<T, TuteurCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tuteurs and returns the data saved in the database.
     * @param {TuteurCreateManyAndReturnArgs} args - Arguments to create many Tuteurs.
     * @example
     * // Create many Tuteurs
     * const tuteur = await prisma.tuteur.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tuteurs and only return the `userId`
     * const tuteurWithUserIdOnly = await prisma.tuteur.createManyAndReturn({
     *   select: { userId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TuteurCreateManyAndReturnArgs>(args?: SelectSubset<T, TuteurCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TuteurPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Tuteur.
     * @param {TuteurDeleteArgs} args - Arguments to delete one Tuteur.
     * @example
     * // Delete one Tuteur
     * const Tuteur = await prisma.tuteur.delete({
     *   where: {
     *     // ... filter to delete one Tuteur
     *   }
     * })
     * 
     */
    delete<T extends TuteurDeleteArgs>(args: SelectSubset<T, TuteurDeleteArgs<ExtArgs>>): Prisma__TuteurClient<$Result.GetResult<Prisma.$TuteurPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Tuteur.
     * @param {TuteurUpdateArgs} args - Arguments to update one Tuteur.
     * @example
     * // Update one Tuteur
     * const tuteur = await prisma.tuteur.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TuteurUpdateArgs>(args: SelectSubset<T, TuteurUpdateArgs<ExtArgs>>): Prisma__TuteurClient<$Result.GetResult<Prisma.$TuteurPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Tuteurs.
     * @param {TuteurDeleteManyArgs} args - Arguments to filter Tuteurs to delete.
     * @example
     * // Delete a few Tuteurs
     * const { count } = await prisma.tuteur.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TuteurDeleteManyArgs>(args?: SelectSubset<T, TuteurDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tuteurs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TuteurUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tuteurs
     * const tuteur = await prisma.tuteur.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TuteurUpdateManyArgs>(args: SelectSubset<T, TuteurUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tuteurs and returns the data updated in the database.
     * @param {TuteurUpdateManyAndReturnArgs} args - Arguments to update many Tuteurs.
     * @example
     * // Update many Tuteurs
     * const tuteur = await prisma.tuteur.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Tuteurs and only return the `userId`
     * const tuteurWithUserIdOnly = await prisma.tuteur.updateManyAndReturn({
     *   select: { userId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TuteurUpdateManyAndReturnArgs>(args: SelectSubset<T, TuteurUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TuteurPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Tuteur.
     * @param {TuteurUpsertArgs} args - Arguments to update or create a Tuteur.
     * @example
     * // Update or create a Tuteur
     * const tuteur = await prisma.tuteur.upsert({
     *   create: {
     *     // ... data to create a Tuteur
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tuteur we want to update
     *   }
     * })
     */
    upsert<T extends TuteurUpsertArgs>(args: SelectSubset<T, TuteurUpsertArgs<ExtArgs>>): Prisma__TuteurClient<$Result.GetResult<Prisma.$TuteurPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Tuteurs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TuteurCountArgs} args - Arguments to filter Tuteurs to count.
     * @example
     * // Count the number of Tuteurs
     * const count = await prisma.tuteur.count({
     *   where: {
     *     // ... the filter for the Tuteurs we want to count
     *   }
     * })
    **/
    count<T extends TuteurCountArgs>(
      args?: Subset<T, TuteurCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TuteurCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tuteur.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TuteurAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TuteurAggregateArgs>(args: Subset<T, TuteurAggregateArgs>): Prisma.PrismaPromise<GetTuteurAggregateType<T>>

    /**
     * Group by Tuteur.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TuteurGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TuteurGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TuteurGroupByArgs['orderBy'] }
        : { orderBy?: TuteurGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TuteurGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTuteurGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Tuteur model
   */
  readonly fields: TuteurFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tuteur.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TuteurClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    structure<T extends Tuteur$structureArgs<ExtArgs> = {}>(args?: Subset<T, Tuteur$structureArgs<ExtArgs>>): Prisma__StructureClient<$Result.GetResult<Prisma.$StructurePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    stagiaires<T extends Tuteur$stagiairesArgs<ExtArgs> = {}>(args?: Subset<T, Tuteur$stagiairesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StagiairePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    stages<T extends Tuteur$stagesArgs<ExtArgs> = {}>(args?: Subset<T, Tuteur$stagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    themes<T extends Tuteur$themesArgs<ExtArgs> = {}>(args?: Subset<T, Tuteur$themesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ThemeTuteurPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    suggestions<T extends Tuteur$suggestionsArgs<ExtArgs> = {}>(args?: Subset<T, Tuteur$suggestionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SuggestionAffectationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Tuteur model
   */
  interface TuteurFieldRefs {
    readonly userId: FieldRef<"Tuteur", 'String'>
    readonly structureId: FieldRef<"Tuteur", 'String'>
    readonly fonction: FieldRef<"Tuteur", 'String'>
    readonly disponibilite: FieldRef<"Tuteur", 'Boolean'>
    readonly competences: FieldRef<"Tuteur", 'String[]'>
  }
    

  // Custom InputTypes
  /**
   * Tuteur findUnique
   */
  export type TuteurFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tuteur
     */
    select?: TuteurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tuteur
     */
    omit?: TuteurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TuteurInclude<ExtArgs> | null
    /**
     * Filter, which Tuteur to fetch.
     */
    where: TuteurWhereUniqueInput
  }

  /**
   * Tuteur findUniqueOrThrow
   */
  export type TuteurFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tuteur
     */
    select?: TuteurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tuteur
     */
    omit?: TuteurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TuteurInclude<ExtArgs> | null
    /**
     * Filter, which Tuteur to fetch.
     */
    where: TuteurWhereUniqueInput
  }

  /**
   * Tuteur findFirst
   */
  export type TuteurFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tuteur
     */
    select?: TuteurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tuteur
     */
    omit?: TuteurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TuteurInclude<ExtArgs> | null
    /**
     * Filter, which Tuteur to fetch.
     */
    where?: TuteurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tuteurs to fetch.
     */
    orderBy?: TuteurOrderByWithRelationInput | TuteurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tuteurs.
     */
    cursor?: TuteurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tuteurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tuteurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tuteurs.
     */
    distinct?: TuteurScalarFieldEnum | TuteurScalarFieldEnum[]
  }

  /**
   * Tuteur findFirstOrThrow
   */
  export type TuteurFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tuteur
     */
    select?: TuteurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tuteur
     */
    omit?: TuteurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TuteurInclude<ExtArgs> | null
    /**
     * Filter, which Tuteur to fetch.
     */
    where?: TuteurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tuteurs to fetch.
     */
    orderBy?: TuteurOrderByWithRelationInput | TuteurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tuteurs.
     */
    cursor?: TuteurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tuteurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tuteurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tuteurs.
     */
    distinct?: TuteurScalarFieldEnum | TuteurScalarFieldEnum[]
  }

  /**
   * Tuteur findMany
   */
  export type TuteurFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tuteur
     */
    select?: TuteurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tuteur
     */
    omit?: TuteurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TuteurInclude<ExtArgs> | null
    /**
     * Filter, which Tuteurs to fetch.
     */
    where?: TuteurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tuteurs to fetch.
     */
    orderBy?: TuteurOrderByWithRelationInput | TuteurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tuteurs.
     */
    cursor?: TuteurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tuteurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tuteurs.
     */
    skip?: number
    distinct?: TuteurScalarFieldEnum | TuteurScalarFieldEnum[]
  }

  /**
   * Tuteur create
   */
  export type TuteurCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tuteur
     */
    select?: TuteurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tuteur
     */
    omit?: TuteurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TuteurInclude<ExtArgs> | null
    /**
     * The data needed to create a Tuteur.
     */
    data: XOR<TuteurCreateInput, TuteurUncheckedCreateInput>
  }

  /**
   * Tuteur createMany
   */
  export type TuteurCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tuteurs.
     */
    data: TuteurCreateManyInput | TuteurCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Tuteur createManyAndReturn
   */
  export type TuteurCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tuteur
     */
    select?: TuteurSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Tuteur
     */
    omit?: TuteurOmit<ExtArgs> | null
    /**
     * The data used to create many Tuteurs.
     */
    data: TuteurCreateManyInput | TuteurCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TuteurIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Tuteur update
   */
  export type TuteurUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tuteur
     */
    select?: TuteurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tuteur
     */
    omit?: TuteurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TuteurInclude<ExtArgs> | null
    /**
     * The data needed to update a Tuteur.
     */
    data: XOR<TuteurUpdateInput, TuteurUncheckedUpdateInput>
    /**
     * Choose, which Tuteur to update.
     */
    where: TuteurWhereUniqueInput
  }

  /**
   * Tuteur updateMany
   */
  export type TuteurUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tuteurs.
     */
    data: XOR<TuteurUpdateManyMutationInput, TuteurUncheckedUpdateManyInput>
    /**
     * Filter which Tuteurs to update
     */
    where?: TuteurWhereInput
    /**
     * Limit how many Tuteurs to update.
     */
    limit?: number
  }

  /**
   * Tuteur updateManyAndReturn
   */
  export type TuteurUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tuteur
     */
    select?: TuteurSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Tuteur
     */
    omit?: TuteurOmit<ExtArgs> | null
    /**
     * The data used to update Tuteurs.
     */
    data: XOR<TuteurUpdateManyMutationInput, TuteurUncheckedUpdateManyInput>
    /**
     * Filter which Tuteurs to update
     */
    where?: TuteurWhereInput
    /**
     * Limit how many Tuteurs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TuteurIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Tuteur upsert
   */
  export type TuteurUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tuteur
     */
    select?: TuteurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tuteur
     */
    omit?: TuteurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TuteurInclude<ExtArgs> | null
    /**
     * The filter to search for the Tuteur to update in case it exists.
     */
    where: TuteurWhereUniqueInput
    /**
     * In case the Tuteur found by the `where` argument doesn't exist, create a new Tuteur with this data.
     */
    create: XOR<TuteurCreateInput, TuteurUncheckedCreateInput>
    /**
     * In case the Tuteur was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TuteurUpdateInput, TuteurUncheckedUpdateInput>
  }

  /**
   * Tuteur delete
   */
  export type TuteurDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tuteur
     */
    select?: TuteurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tuteur
     */
    omit?: TuteurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TuteurInclude<ExtArgs> | null
    /**
     * Filter which Tuteur to delete.
     */
    where: TuteurWhereUniqueInput
  }

  /**
   * Tuteur deleteMany
   */
  export type TuteurDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tuteurs to delete
     */
    where?: TuteurWhereInput
    /**
     * Limit how many Tuteurs to delete.
     */
    limit?: number
  }

  /**
   * Tuteur.structure
   */
  export type Tuteur$structureArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Structure
     */
    select?: StructureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Structure
     */
    omit?: StructureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StructureInclude<ExtArgs> | null
    where?: StructureWhereInput
  }

  /**
   * Tuteur.stagiaires
   */
  export type Tuteur$stagiairesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stagiaire
     */
    select?: StagiaireSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stagiaire
     */
    omit?: StagiaireOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StagiaireInclude<ExtArgs> | null
    where?: StagiaireWhereInput
    orderBy?: StagiaireOrderByWithRelationInput | StagiaireOrderByWithRelationInput[]
    cursor?: StagiaireWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StagiaireScalarFieldEnum | StagiaireScalarFieldEnum[]
  }

  /**
   * Tuteur.stages
   */
  export type Tuteur$stagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stage
     */
    select?: StageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stage
     */
    omit?: StageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageInclude<ExtArgs> | null
    where?: StageWhereInput
    orderBy?: StageOrderByWithRelationInput | StageOrderByWithRelationInput[]
    cursor?: StageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StageScalarFieldEnum | StageScalarFieldEnum[]
  }

  /**
   * Tuteur.themes
   */
  export type Tuteur$themesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThemeTuteur
     */
    select?: ThemeTuteurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ThemeTuteur
     */
    omit?: ThemeTuteurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemeTuteurInclude<ExtArgs> | null
    where?: ThemeTuteurWhereInput
    orderBy?: ThemeTuteurOrderByWithRelationInput | ThemeTuteurOrderByWithRelationInput[]
    cursor?: ThemeTuteurWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ThemeTuteurScalarFieldEnum | ThemeTuteurScalarFieldEnum[]
  }

  /**
   * Tuteur.suggestions
   */
  export type Tuteur$suggestionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuggestionAffectation
     */
    select?: SuggestionAffectationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SuggestionAffectation
     */
    omit?: SuggestionAffectationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SuggestionAffectationInclude<ExtArgs> | null
    where?: SuggestionAffectationWhereInput
    orderBy?: SuggestionAffectationOrderByWithRelationInput | SuggestionAffectationOrderByWithRelationInput[]
    cursor?: SuggestionAffectationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SuggestionAffectationScalarFieldEnum | SuggestionAffectationScalarFieldEnum[]
  }

  /**
   * Tuteur without action
   */
  export type TuteurDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tuteur
     */
    select?: TuteurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tuteur
     */
    omit?: TuteurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TuteurInclude<ExtArgs> | null
  }


  /**
   * Model Stagiaire
   */

  export type AggregateStagiaire = {
    _count: StagiaireCountAggregateOutputType | null
    _min: StagiaireMinAggregateOutputType | null
    _max: StagiaireMaxAggregateOutputType | null
  }

  export type StagiaireMinAggregateOutputType = {
    userId: string | null
    codeDemande: string | null
    statutDemande: $Enums.StatutDemande | null
    structureAffecteeId: string | null
    tuteurId: string | null
    dateDebut: Date | null
    dateFin: Date | null
  }

  export type StagiaireMaxAggregateOutputType = {
    userId: string | null
    codeDemande: string | null
    statutDemande: $Enums.StatutDemande | null
    structureAffecteeId: string | null
    tuteurId: string | null
    dateDebut: Date | null
    dateFin: Date | null
  }

  export type StagiaireCountAggregateOutputType = {
    userId: number
    codeDemande: number
    statutDemande: number
    structureAffecteeId: number
    tuteurId: number
    dateDebut: number
    dateFin: number
    _all: number
  }


  export type StagiaireMinAggregateInputType = {
    userId?: true
    codeDemande?: true
    statutDemande?: true
    structureAffecteeId?: true
    tuteurId?: true
    dateDebut?: true
    dateFin?: true
  }

  export type StagiaireMaxAggregateInputType = {
    userId?: true
    codeDemande?: true
    statutDemande?: true
    structureAffecteeId?: true
    tuteurId?: true
    dateDebut?: true
    dateFin?: true
  }

  export type StagiaireCountAggregateInputType = {
    userId?: true
    codeDemande?: true
    statutDemande?: true
    structureAffecteeId?: true
    tuteurId?: true
    dateDebut?: true
    dateFin?: true
    _all?: true
  }

  export type StagiaireAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Stagiaire to aggregate.
     */
    where?: StagiaireWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stagiaires to fetch.
     */
    orderBy?: StagiaireOrderByWithRelationInput | StagiaireOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StagiaireWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stagiaires from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stagiaires.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Stagiaires
    **/
    _count?: true | StagiaireCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StagiaireMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StagiaireMaxAggregateInputType
  }

  export type GetStagiaireAggregateType<T extends StagiaireAggregateArgs> = {
        [P in keyof T & keyof AggregateStagiaire]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStagiaire[P]>
      : GetScalarType<T[P], AggregateStagiaire[P]>
  }




  export type StagiaireGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StagiaireWhereInput
    orderBy?: StagiaireOrderByWithAggregationInput | StagiaireOrderByWithAggregationInput[]
    by: StagiaireScalarFieldEnum[] | StagiaireScalarFieldEnum
    having?: StagiaireScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StagiaireCountAggregateInputType | true
    _min?: StagiaireMinAggregateInputType
    _max?: StagiaireMaxAggregateInputType
  }

  export type StagiaireGroupByOutputType = {
    userId: string
    codeDemande: string | null
    statutDemande: $Enums.StatutDemande | null
    structureAffecteeId: string | null
    tuteurId: string | null
    dateDebut: Date | null
    dateFin: Date | null
    _count: StagiaireCountAggregateOutputType | null
    _min: StagiaireMinAggregateOutputType | null
    _max: StagiaireMaxAggregateOutputType | null
  }

  type GetStagiaireGroupByPayload<T extends StagiaireGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StagiaireGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StagiaireGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StagiaireGroupByOutputType[P]>
            : GetScalarType<T[P], StagiaireGroupByOutputType[P]>
        }
      >
    >


  export type StagiaireSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    codeDemande?: boolean
    statutDemande?: boolean
    structureAffecteeId?: boolean
    tuteurId?: boolean
    dateDebut?: boolean
    dateFin?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    structure?: boolean | Stagiaire$structureArgs<ExtArgs>
    tuteur?: boolean | Stagiaire$tuteurArgs<ExtArgs>
    demandesStages?: boolean | Stagiaire$demandesStagesArgs<ExtArgs>
    stages?: boolean | Stagiaire$stagesArgs<ExtArgs>
    candidatureScores?: boolean | Stagiaire$candidatureScoresArgs<ExtArgs>
    suggestions?: boolean | Stagiaire$suggestionsArgs<ExtArgs>
    _count?: boolean | StagiaireCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stagiaire"]>

  export type StagiaireSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    codeDemande?: boolean
    statutDemande?: boolean
    structureAffecteeId?: boolean
    tuteurId?: boolean
    dateDebut?: boolean
    dateFin?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    structure?: boolean | Stagiaire$structureArgs<ExtArgs>
    tuteur?: boolean | Stagiaire$tuteurArgs<ExtArgs>
  }, ExtArgs["result"]["stagiaire"]>

  export type StagiaireSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    codeDemande?: boolean
    statutDemande?: boolean
    structureAffecteeId?: boolean
    tuteurId?: boolean
    dateDebut?: boolean
    dateFin?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    structure?: boolean | Stagiaire$structureArgs<ExtArgs>
    tuteur?: boolean | Stagiaire$tuteurArgs<ExtArgs>
  }, ExtArgs["result"]["stagiaire"]>

  export type StagiaireSelectScalar = {
    userId?: boolean
    codeDemande?: boolean
    statutDemande?: boolean
    structureAffecteeId?: boolean
    tuteurId?: boolean
    dateDebut?: boolean
    dateFin?: boolean
  }

  export type StagiaireOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"userId" | "codeDemande" | "statutDemande" | "structureAffecteeId" | "tuteurId" | "dateDebut" | "dateFin", ExtArgs["result"]["stagiaire"]>
  export type StagiaireInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    structure?: boolean | Stagiaire$structureArgs<ExtArgs>
    tuteur?: boolean | Stagiaire$tuteurArgs<ExtArgs>
    demandesStages?: boolean | Stagiaire$demandesStagesArgs<ExtArgs>
    stages?: boolean | Stagiaire$stagesArgs<ExtArgs>
    candidatureScores?: boolean | Stagiaire$candidatureScoresArgs<ExtArgs>
    suggestions?: boolean | Stagiaire$suggestionsArgs<ExtArgs>
    _count?: boolean | StagiaireCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type StagiaireIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    structure?: boolean | Stagiaire$structureArgs<ExtArgs>
    tuteur?: boolean | Stagiaire$tuteurArgs<ExtArgs>
  }
  export type StagiaireIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    structure?: boolean | Stagiaire$structureArgs<ExtArgs>
    tuteur?: boolean | Stagiaire$tuteurArgs<ExtArgs>
  }

  export type $StagiairePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Stagiaire"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      structure: Prisma.$StructurePayload<ExtArgs> | null
      tuteur: Prisma.$TuteurPayload<ExtArgs> | null
      demandesStages: Prisma.$DemandeStagePayload<ExtArgs>[]
      stages: Prisma.$StagePayload<ExtArgs>[]
      candidatureScores: Prisma.$CandidatureScorePayload<ExtArgs>[]
      suggestions: Prisma.$SuggestionAffectationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: string
      codeDemande: string | null
      statutDemande: $Enums.StatutDemande | null
      structureAffecteeId: string | null
      tuteurId: string | null
      dateDebut: Date | null
      dateFin: Date | null
    }, ExtArgs["result"]["stagiaire"]>
    composites: {}
  }

  type StagiaireGetPayload<S extends boolean | null | undefined | StagiaireDefaultArgs> = $Result.GetResult<Prisma.$StagiairePayload, S>

  type StagiaireCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StagiaireFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StagiaireCountAggregateInputType | true
    }

  export interface StagiaireDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Stagiaire'], meta: { name: 'Stagiaire' } }
    /**
     * Find zero or one Stagiaire that matches the filter.
     * @param {StagiaireFindUniqueArgs} args - Arguments to find a Stagiaire
     * @example
     * // Get one Stagiaire
     * const stagiaire = await prisma.stagiaire.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StagiaireFindUniqueArgs>(args: SelectSubset<T, StagiaireFindUniqueArgs<ExtArgs>>): Prisma__StagiaireClient<$Result.GetResult<Prisma.$StagiairePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Stagiaire that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StagiaireFindUniqueOrThrowArgs} args - Arguments to find a Stagiaire
     * @example
     * // Get one Stagiaire
     * const stagiaire = await prisma.stagiaire.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StagiaireFindUniqueOrThrowArgs>(args: SelectSubset<T, StagiaireFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StagiaireClient<$Result.GetResult<Prisma.$StagiairePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Stagiaire that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StagiaireFindFirstArgs} args - Arguments to find a Stagiaire
     * @example
     * // Get one Stagiaire
     * const stagiaire = await prisma.stagiaire.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StagiaireFindFirstArgs>(args?: SelectSubset<T, StagiaireFindFirstArgs<ExtArgs>>): Prisma__StagiaireClient<$Result.GetResult<Prisma.$StagiairePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Stagiaire that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StagiaireFindFirstOrThrowArgs} args - Arguments to find a Stagiaire
     * @example
     * // Get one Stagiaire
     * const stagiaire = await prisma.stagiaire.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StagiaireFindFirstOrThrowArgs>(args?: SelectSubset<T, StagiaireFindFirstOrThrowArgs<ExtArgs>>): Prisma__StagiaireClient<$Result.GetResult<Prisma.$StagiairePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Stagiaires that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StagiaireFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Stagiaires
     * const stagiaires = await prisma.stagiaire.findMany()
     * 
     * // Get first 10 Stagiaires
     * const stagiaires = await prisma.stagiaire.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const stagiaireWithUserIdOnly = await prisma.stagiaire.findMany({ select: { userId: true } })
     * 
     */
    findMany<T extends StagiaireFindManyArgs>(args?: SelectSubset<T, StagiaireFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StagiairePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Stagiaire.
     * @param {StagiaireCreateArgs} args - Arguments to create a Stagiaire.
     * @example
     * // Create one Stagiaire
     * const Stagiaire = await prisma.stagiaire.create({
     *   data: {
     *     // ... data to create a Stagiaire
     *   }
     * })
     * 
     */
    create<T extends StagiaireCreateArgs>(args: SelectSubset<T, StagiaireCreateArgs<ExtArgs>>): Prisma__StagiaireClient<$Result.GetResult<Prisma.$StagiairePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Stagiaires.
     * @param {StagiaireCreateManyArgs} args - Arguments to create many Stagiaires.
     * @example
     * // Create many Stagiaires
     * const stagiaire = await prisma.stagiaire.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StagiaireCreateManyArgs>(args?: SelectSubset<T, StagiaireCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Stagiaires and returns the data saved in the database.
     * @param {StagiaireCreateManyAndReturnArgs} args - Arguments to create many Stagiaires.
     * @example
     * // Create many Stagiaires
     * const stagiaire = await prisma.stagiaire.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Stagiaires and only return the `userId`
     * const stagiaireWithUserIdOnly = await prisma.stagiaire.createManyAndReturn({
     *   select: { userId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StagiaireCreateManyAndReturnArgs>(args?: SelectSubset<T, StagiaireCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StagiairePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Stagiaire.
     * @param {StagiaireDeleteArgs} args - Arguments to delete one Stagiaire.
     * @example
     * // Delete one Stagiaire
     * const Stagiaire = await prisma.stagiaire.delete({
     *   where: {
     *     // ... filter to delete one Stagiaire
     *   }
     * })
     * 
     */
    delete<T extends StagiaireDeleteArgs>(args: SelectSubset<T, StagiaireDeleteArgs<ExtArgs>>): Prisma__StagiaireClient<$Result.GetResult<Prisma.$StagiairePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Stagiaire.
     * @param {StagiaireUpdateArgs} args - Arguments to update one Stagiaire.
     * @example
     * // Update one Stagiaire
     * const stagiaire = await prisma.stagiaire.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StagiaireUpdateArgs>(args: SelectSubset<T, StagiaireUpdateArgs<ExtArgs>>): Prisma__StagiaireClient<$Result.GetResult<Prisma.$StagiairePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Stagiaires.
     * @param {StagiaireDeleteManyArgs} args - Arguments to filter Stagiaires to delete.
     * @example
     * // Delete a few Stagiaires
     * const { count } = await prisma.stagiaire.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StagiaireDeleteManyArgs>(args?: SelectSubset<T, StagiaireDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Stagiaires.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StagiaireUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Stagiaires
     * const stagiaire = await prisma.stagiaire.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StagiaireUpdateManyArgs>(args: SelectSubset<T, StagiaireUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Stagiaires and returns the data updated in the database.
     * @param {StagiaireUpdateManyAndReturnArgs} args - Arguments to update many Stagiaires.
     * @example
     * // Update many Stagiaires
     * const stagiaire = await prisma.stagiaire.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Stagiaires and only return the `userId`
     * const stagiaireWithUserIdOnly = await prisma.stagiaire.updateManyAndReturn({
     *   select: { userId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StagiaireUpdateManyAndReturnArgs>(args: SelectSubset<T, StagiaireUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StagiairePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Stagiaire.
     * @param {StagiaireUpsertArgs} args - Arguments to update or create a Stagiaire.
     * @example
     * // Update or create a Stagiaire
     * const stagiaire = await prisma.stagiaire.upsert({
     *   create: {
     *     // ... data to create a Stagiaire
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Stagiaire we want to update
     *   }
     * })
     */
    upsert<T extends StagiaireUpsertArgs>(args: SelectSubset<T, StagiaireUpsertArgs<ExtArgs>>): Prisma__StagiaireClient<$Result.GetResult<Prisma.$StagiairePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Stagiaires.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StagiaireCountArgs} args - Arguments to filter Stagiaires to count.
     * @example
     * // Count the number of Stagiaires
     * const count = await prisma.stagiaire.count({
     *   where: {
     *     // ... the filter for the Stagiaires we want to count
     *   }
     * })
    **/
    count<T extends StagiaireCountArgs>(
      args?: Subset<T, StagiaireCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StagiaireCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Stagiaire.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StagiaireAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StagiaireAggregateArgs>(args: Subset<T, StagiaireAggregateArgs>): Prisma.PrismaPromise<GetStagiaireAggregateType<T>>

    /**
     * Group by Stagiaire.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StagiaireGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StagiaireGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StagiaireGroupByArgs['orderBy'] }
        : { orderBy?: StagiaireGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StagiaireGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStagiaireGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Stagiaire model
   */
  readonly fields: StagiaireFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Stagiaire.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StagiaireClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    structure<T extends Stagiaire$structureArgs<ExtArgs> = {}>(args?: Subset<T, Stagiaire$structureArgs<ExtArgs>>): Prisma__StructureClient<$Result.GetResult<Prisma.$StructurePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    tuteur<T extends Stagiaire$tuteurArgs<ExtArgs> = {}>(args?: Subset<T, Stagiaire$tuteurArgs<ExtArgs>>): Prisma__TuteurClient<$Result.GetResult<Prisma.$TuteurPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    demandesStages<T extends Stagiaire$demandesStagesArgs<ExtArgs> = {}>(args?: Subset<T, Stagiaire$demandesStagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DemandeStagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    stages<T extends Stagiaire$stagesArgs<ExtArgs> = {}>(args?: Subset<T, Stagiaire$stagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    candidatureScores<T extends Stagiaire$candidatureScoresArgs<ExtArgs> = {}>(args?: Subset<T, Stagiaire$candidatureScoresArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CandidatureScorePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    suggestions<T extends Stagiaire$suggestionsArgs<ExtArgs> = {}>(args?: Subset<T, Stagiaire$suggestionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SuggestionAffectationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Stagiaire model
   */
  interface StagiaireFieldRefs {
    readonly userId: FieldRef<"Stagiaire", 'String'>
    readonly codeDemande: FieldRef<"Stagiaire", 'String'>
    readonly statutDemande: FieldRef<"Stagiaire", 'StatutDemande'>
    readonly structureAffecteeId: FieldRef<"Stagiaire", 'String'>
    readonly tuteurId: FieldRef<"Stagiaire", 'String'>
    readonly dateDebut: FieldRef<"Stagiaire", 'DateTime'>
    readonly dateFin: FieldRef<"Stagiaire", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Stagiaire findUnique
   */
  export type StagiaireFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stagiaire
     */
    select?: StagiaireSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stagiaire
     */
    omit?: StagiaireOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StagiaireInclude<ExtArgs> | null
    /**
     * Filter, which Stagiaire to fetch.
     */
    where: StagiaireWhereUniqueInput
  }

  /**
   * Stagiaire findUniqueOrThrow
   */
  export type StagiaireFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stagiaire
     */
    select?: StagiaireSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stagiaire
     */
    omit?: StagiaireOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StagiaireInclude<ExtArgs> | null
    /**
     * Filter, which Stagiaire to fetch.
     */
    where: StagiaireWhereUniqueInput
  }

  /**
   * Stagiaire findFirst
   */
  export type StagiaireFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stagiaire
     */
    select?: StagiaireSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stagiaire
     */
    omit?: StagiaireOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StagiaireInclude<ExtArgs> | null
    /**
     * Filter, which Stagiaire to fetch.
     */
    where?: StagiaireWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stagiaires to fetch.
     */
    orderBy?: StagiaireOrderByWithRelationInput | StagiaireOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stagiaires.
     */
    cursor?: StagiaireWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stagiaires from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stagiaires.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stagiaires.
     */
    distinct?: StagiaireScalarFieldEnum | StagiaireScalarFieldEnum[]
  }

  /**
   * Stagiaire findFirstOrThrow
   */
  export type StagiaireFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stagiaire
     */
    select?: StagiaireSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stagiaire
     */
    omit?: StagiaireOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StagiaireInclude<ExtArgs> | null
    /**
     * Filter, which Stagiaire to fetch.
     */
    where?: StagiaireWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stagiaires to fetch.
     */
    orderBy?: StagiaireOrderByWithRelationInput | StagiaireOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stagiaires.
     */
    cursor?: StagiaireWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stagiaires from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stagiaires.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stagiaires.
     */
    distinct?: StagiaireScalarFieldEnum | StagiaireScalarFieldEnum[]
  }

  /**
   * Stagiaire findMany
   */
  export type StagiaireFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stagiaire
     */
    select?: StagiaireSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stagiaire
     */
    omit?: StagiaireOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StagiaireInclude<ExtArgs> | null
    /**
     * Filter, which Stagiaires to fetch.
     */
    where?: StagiaireWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stagiaires to fetch.
     */
    orderBy?: StagiaireOrderByWithRelationInput | StagiaireOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Stagiaires.
     */
    cursor?: StagiaireWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stagiaires from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stagiaires.
     */
    skip?: number
    distinct?: StagiaireScalarFieldEnum | StagiaireScalarFieldEnum[]
  }

  /**
   * Stagiaire create
   */
  export type StagiaireCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stagiaire
     */
    select?: StagiaireSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stagiaire
     */
    omit?: StagiaireOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StagiaireInclude<ExtArgs> | null
    /**
     * The data needed to create a Stagiaire.
     */
    data: XOR<StagiaireCreateInput, StagiaireUncheckedCreateInput>
  }

  /**
   * Stagiaire createMany
   */
  export type StagiaireCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Stagiaires.
     */
    data: StagiaireCreateManyInput | StagiaireCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Stagiaire createManyAndReturn
   */
  export type StagiaireCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stagiaire
     */
    select?: StagiaireSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Stagiaire
     */
    omit?: StagiaireOmit<ExtArgs> | null
    /**
     * The data used to create many Stagiaires.
     */
    data: StagiaireCreateManyInput | StagiaireCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StagiaireIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Stagiaire update
   */
  export type StagiaireUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stagiaire
     */
    select?: StagiaireSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stagiaire
     */
    omit?: StagiaireOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StagiaireInclude<ExtArgs> | null
    /**
     * The data needed to update a Stagiaire.
     */
    data: XOR<StagiaireUpdateInput, StagiaireUncheckedUpdateInput>
    /**
     * Choose, which Stagiaire to update.
     */
    where: StagiaireWhereUniqueInput
  }

  /**
   * Stagiaire updateMany
   */
  export type StagiaireUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Stagiaires.
     */
    data: XOR<StagiaireUpdateManyMutationInput, StagiaireUncheckedUpdateManyInput>
    /**
     * Filter which Stagiaires to update
     */
    where?: StagiaireWhereInput
    /**
     * Limit how many Stagiaires to update.
     */
    limit?: number
  }

  /**
   * Stagiaire updateManyAndReturn
   */
  export type StagiaireUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stagiaire
     */
    select?: StagiaireSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Stagiaire
     */
    omit?: StagiaireOmit<ExtArgs> | null
    /**
     * The data used to update Stagiaires.
     */
    data: XOR<StagiaireUpdateManyMutationInput, StagiaireUncheckedUpdateManyInput>
    /**
     * Filter which Stagiaires to update
     */
    where?: StagiaireWhereInput
    /**
     * Limit how many Stagiaires to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StagiaireIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Stagiaire upsert
   */
  export type StagiaireUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stagiaire
     */
    select?: StagiaireSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stagiaire
     */
    omit?: StagiaireOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StagiaireInclude<ExtArgs> | null
    /**
     * The filter to search for the Stagiaire to update in case it exists.
     */
    where: StagiaireWhereUniqueInput
    /**
     * In case the Stagiaire found by the `where` argument doesn't exist, create a new Stagiaire with this data.
     */
    create: XOR<StagiaireCreateInput, StagiaireUncheckedCreateInput>
    /**
     * In case the Stagiaire was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StagiaireUpdateInput, StagiaireUncheckedUpdateInput>
  }

  /**
   * Stagiaire delete
   */
  export type StagiaireDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stagiaire
     */
    select?: StagiaireSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stagiaire
     */
    omit?: StagiaireOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StagiaireInclude<ExtArgs> | null
    /**
     * Filter which Stagiaire to delete.
     */
    where: StagiaireWhereUniqueInput
  }

  /**
   * Stagiaire deleteMany
   */
  export type StagiaireDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Stagiaires to delete
     */
    where?: StagiaireWhereInput
    /**
     * Limit how many Stagiaires to delete.
     */
    limit?: number
  }

  /**
   * Stagiaire.structure
   */
  export type Stagiaire$structureArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Structure
     */
    select?: StructureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Structure
     */
    omit?: StructureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StructureInclude<ExtArgs> | null
    where?: StructureWhereInput
  }

  /**
   * Stagiaire.tuteur
   */
  export type Stagiaire$tuteurArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tuteur
     */
    select?: TuteurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tuteur
     */
    omit?: TuteurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TuteurInclude<ExtArgs> | null
    where?: TuteurWhereInput
  }

  /**
   * Stagiaire.demandesStages
   */
  export type Stagiaire$demandesStagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DemandeStage
     */
    select?: DemandeStageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DemandeStage
     */
    omit?: DemandeStageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DemandeStageInclude<ExtArgs> | null
    where?: DemandeStageWhereInput
    orderBy?: DemandeStageOrderByWithRelationInput | DemandeStageOrderByWithRelationInput[]
    cursor?: DemandeStageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DemandeStageScalarFieldEnum | DemandeStageScalarFieldEnum[]
  }

  /**
   * Stagiaire.stages
   */
  export type Stagiaire$stagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stage
     */
    select?: StageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stage
     */
    omit?: StageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageInclude<ExtArgs> | null
    where?: StageWhereInput
    orderBy?: StageOrderByWithRelationInput | StageOrderByWithRelationInput[]
    cursor?: StageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StageScalarFieldEnum | StageScalarFieldEnum[]
  }

  /**
   * Stagiaire.candidatureScores
   */
  export type Stagiaire$candidatureScoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidatureScore
     */
    select?: CandidatureScoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CandidatureScore
     */
    omit?: CandidatureScoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidatureScoreInclude<ExtArgs> | null
    where?: CandidatureScoreWhereInput
    orderBy?: CandidatureScoreOrderByWithRelationInput | CandidatureScoreOrderByWithRelationInput[]
    cursor?: CandidatureScoreWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CandidatureScoreScalarFieldEnum | CandidatureScoreScalarFieldEnum[]
  }

  /**
   * Stagiaire.suggestions
   */
  export type Stagiaire$suggestionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuggestionAffectation
     */
    select?: SuggestionAffectationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SuggestionAffectation
     */
    omit?: SuggestionAffectationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SuggestionAffectationInclude<ExtArgs> | null
    where?: SuggestionAffectationWhereInput
    orderBy?: SuggestionAffectationOrderByWithRelationInput | SuggestionAffectationOrderByWithRelationInput[]
    cursor?: SuggestionAffectationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SuggestionAffectationScalarFieldEnum | SuggestionAffectationScalarFieldEnum[]
  }

  /**
   * Stagiaire without action
   */
  export type StagiaireDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stagiaire
     */
    select?: StagiaireSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stagiaire
     */
    omit?: StagiaireOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StagiaireInclude<ExtArgs> | null
  }


  /**
   * Model DPAF
   */

  export type AggregateDPAF = {
    _count: DPAFCountAggregateOutputType | null
    _min: DPAFMinAggregateOutputType | null
    _max: DPAFMaxAggregateOutputType | null
  }

  export type DPAFMinAggregateOutputType = {
    userId: string | null
  }

  export type DPAFMaxAggregateOutputType = {
    userId: string | null
  }

  export type DPAFCountAggregateOutputType = {
    userId: number
    _all: number
  }


  export type DPAFMinAggregateInputType = {
    userId?: true
  }

  export type DPAFMaxAggregateInputType = {
    userId?: true
  }

  export type DPAFCountAggregateInputType = {
    userId?: true
    _all?: true
  }

  export type DPAFAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DPAF to aggregate.
     */
    where?: DPAFWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DPAFS to fetch.
     */
    orderBy?: DPAFOrderByWithRelationInput | DPAFOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DPAFWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DPAFS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DPAFS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DPAFS
    **/
    _count?: true | DPAFCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DPAFMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DPAFMaxAggregateInputType
  }

  export type GetDPAFAggregateType<T extends DPAFAggregateArgs> = {
        [P in keyof T & keyof AggregateDPAF]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDPAF[P]>
      : GetScalarType<T[P], AggregateDPAF[P]>
  }




  export type DPAFGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DPAFWhereInput
    orderBy?: DPAFOrderByWithAggregationInput | DPAFOrderByWithAggregationInput[]
    by: DPAFScalarFieldEnum[] | DPAFScalarFieldEnum
    having?: DPAFScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DPAFCountAggregateInputType | true
    _min?: DPAFMinAggregateInputType
    _max?: DPAFMaxAggregateInputType
  }

  export type DPAFGroupByOutputType = {
    userId: string
    _count: DPAFCountAggregateOutputType | null
    _min: DPAFMinAggregateOutputType | null
    _max: DPAFMaxAggregateOutputType | null
  }

  type GetDPAFGroupByPayload<T extends DPAFGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DPAFGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DPAFGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DPAFGroupByOutputType[P]>
            : GetScalarType<T[P], DPAFGroupByOutputType[P]>
        }
      >
    >


  export type DPAFSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dPAF"]>

  export type DPAFSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dPAF"]>

  export type DPAFSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dPAF"]>

  export type DPAFSelectScalar = {
    userId?: boolean
  }

  export type DPAFOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"userId", ExtArgs["result"]["dPAF"]>
  export type DPAFInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type DPAFIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type DPAFIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $DPAFPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DPAF"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: string
    }, ExtArgs["result"]["dPAF"]>
    composites: {}
  }

  type DPAFGetPayload<S extends boolean | null | undefined | DPAFDefaultArgs> = $Result.GetResult<Prisma.$DPAFPayload, S>

  type DPAFCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DPAFFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DPAFCountAggregateInputType | true
    }

  export interface DPAFDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DPAF'], meta: { name: 'DPAF' } }
    /**
     * Find zero or one DPAF that matches the filter.
     * @param {DPAFFindUniqueArgs} args - Arguments to find a DPAF
     * @example
     * // Get one DPAF
     * const dPAF = await prisma.dPAF.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DPAFFindUniqueArgs>(args: SelectSubset<T, DPAFFindUniqueArgs<ExtArgs>>): Prisma__DPAFClient<$Result.GetResult<Prisma.$DPAFPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DPAF that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DPAFFindUniqueOrThrowArgs} args - Arguments to find a DPAF
     * @example
     * // Get one DPAF
     * const dPAF = await prisma.dPAF.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DPAFFindUniqueOrThrowArgs>(args: SelectSubset<T, DPAFFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DPAFClient<$Result.GetResult<Prisma.$DPAFPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DPAF that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DPAFFindFirstArgs} args - Arguments to find a DPAF
     * @example
     * // Get one DPAF
     * const dPAF = await prisma.dPAF.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DPAFFindFirstArgs>(args?: SelectSubset<T, DPAFFindFirstArgs<ExtArgs>>): Prisma__DPAFClient<$Result.GetResult<Prisma.$DPAFPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DPAF that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DPAFFindFirstOrThrowArgs} args - Arguments to find a DPAF
     * @example
     * // Get one DPAF
     * const dPAF = await prisma.dPAF.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DPAFFindFirstOrThrowArgs>(args?: SelectSubset<T, DPAFFindFirstOrThrowArgs<ExtArgs>>): Prisma__DPAFClient<$Result.GetResult<Prisma.$DPAFPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DPAFS that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DPAFFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DPAFS
     * const dPAFS = await prisma.dPAF.findMany()
     * 
     * // Get first 10 DPAFS
     * const dPAFS = await prisma.dPAF.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const dPAFWithUserIdOnly = await prisma.dPAF.findMany({ select: { userId: true } })
     * 
     */
    findMany<T extends DPAFFindManyArgs>(args?: SelectSubset<T, DPAFFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DPAFPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DPAF.
     * @param {DPAFCreateArgs} args - Arguments to create a DPAF.
     * @example
     * // Create one DPAF
     * const DPAF = await prisma.dPAF.create({
     *   data: {
     *     // ... data to create a DPAF
     *   }
     * })
     * 
     */
    create<T extends DPAFCreateArgs>(args: SelectSubset<T, DPAFCreateArgs<ExtArgs>>): Prisma__DPAFClient<$Result.GetResult<Prisma.$DPAFPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DPAFS.
     * @param {DPAFCreateManyArgs} args - Arguments to create many DPAFS.
     * @example
     * // Create many DPAFS
     * const dPAF = await prisma.dPAF.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DPAFCreateManyArgs>(args?: SelectSubset<T, DPAFCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DPAFS and returns the data saved in the database.
     * @param {DPAFCreateManyAndReturnArgs} args - Arguments to create many DPAFS.
     * @example
     * // Create many DPAFS
     * const dPAF = await prisma.dPAF.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DPAFS and only return the `userId`
     * const dPAFWithUserIdOnly = await prisma.dPAF.createManyAndReturn({
     *   select: { userId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DPAFCreateManyAndReturnArgs>(args?: SelectSubset<T, DPAFCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DPAFPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a DPAF.
     * @param {DPAFDeleteArgs} args - Arguments to delete one DPAF.
     * @example
     * // Delete one DPAF
     * const DPAF = await prisma.dPAF.delete({
     *   where: {
     *     // ... filter to delete one DPAF
     *   }
     * })
     * 
     */
    delete<T extends DPAFDeleteArgs>(args: SelectSubset<T, DPAFDeleteArgs<ExtArgs>>): Prisma__DPAFClient<$Result.GetResult<Prisma.$DPAFPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DPAF.
     * @param {DPAFUpdateArgs} args - Arguments to update one DPAF.
     * @example
     * // Update one DPAF
     * const dPAF = await prisma.dPAF.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DPAFUpdateArgs>(args: SelectSubset<T, DPAFUpdateArgs<ExtArgs>>): Prisma__DPAFClient<$Result.GetResult<Prisma.$DPAFPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DPAFS.
     * @param {DPAFDeleteManyArgs} args - Arguments to filter DPAFS to delete.
     * @example
     * // Delete a few DPAFS
     * const { count } = await prisma.dPAF.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DPAFDeleteManyArgs>(args?: SelectSubset<T, DPAFDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DPAFS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DPAFUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DPAFS
     * const dPAF = await prisma.dPAF.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DPAFUpdateManyArgs>(args: SelectSubset<T, DPAFUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DPAFS and returns the data updated in the database.
     * @param {DPAFUpdateManyAndReturnArgs} args - Arguments to update many DPAFS.
     * @example
     * // Update many DPAFS
     * const dPAF = await prisma.dPAF.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DPAFS and only return the `userId`
     * const dPAFWithUserIdOnly = await prisma.dPAF.updateManyAndReturn({
     *   select: { userId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DPAFUpdateManyAndReturnArgs>(args: SelectSubset<T, DPAFUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DPAFPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one DPAF.
     * @param {DPAFUpsertArgs} args - Arguments to update or create a DPAF.
     * @example
     * // Update or create a DPAF
     * const dPAF = await prisma.dPAF.upsert({
     *   create: {
     *     // ... data to create a DPAF
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DPAF we want to update
     *   }
     * })
     */
    upsert<T extends DPAFUpsertArgs>(args: SelectSubset<T, DPAFUpsertArgs<ExtArgs>>): Prisma__DPAFClient<$Result.GetResult<Prisma.$DPAFPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DPAFS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DPAFCountArgs} args - Arguments to filter DPAFS to count.
     * @example
     * // Count the number of DPAFS
     * const count = await prisma.dPAF.count({
     *   where: {
     *     // ... the filter for the DPAFS we want to count
     *   }
     * })
    **/
    count<T extends DPAFCountArgs>(
      args?: Subset<T, DPAFCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DPAFCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DPAF.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DPAFAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DPAFAggregateArgs>(args: Subset<T, DPAFAggregateArgs>): Prisma.PrismaPromise<GetDPAFAggregateType<T>>

    /**
     * Group by DPAF.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DPAFGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DPAFGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DPAFGroupByArgs['orderBy'] }
        : { orderBy?: DPAFGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DPAFGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDPAFGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DPAF model
   */
  readonly fields: DPAFFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DPAF.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DPAFClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DPAF model
   */
  interface DPAFFieldRefs {
    readonly userId: FieldRef<"DPAF", 'String'>
  }
    

  // Custom InputTypes
  /**
   * DPAF findUnique
   */
  export type DPAFFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DPAF
     */
    select?: DPAFSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DPAF
     */
    omit?: DPAFOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DPAFInclude<ExtArgs> | null
    /**
     * Filter, which DPAF to fetch.
     */
    where: DPAFWhereUniqueInput
  }

  /**
   * DPAF findUniqueOrThrow
   */
  export type DPAFFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DPAF
     */
    select?: DPAFSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DPAF
     */
    omit?: DPAFOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DPAFInclude<ExtArgs> | null
    /**
     * Filter, which DPAF to fetch.
     */
    where: DPAFWhereUniqueInput
  }

  /**
   * DPAF findFirst
   */
  export type DPAFFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DPAF
     */
    select?: DPAFSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DPAF
     */
    omit?: DPAFOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DPAFInclude<ExtArgs> | null
    /**
     * Filter, which DPAF to fetch.
     */
    where?: DPAFWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DPAFS to fetch.
     */
    orderBy?: DPAFOrderByWithRelationInput | DPAFOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DPAFS.
     */
    cursor?: DPAFWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DPAFS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DPAFS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DPAFS.
     */
    distinct?: DPAFScalarFieldEnum | DPAFScalarFieldEnum[]
  }

  /**
   * DPAF findFirstOrThrow
   */
  export type DPAFFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DPAF
     */
    select?: DPAFSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DPAF
     */
    omit?: DPAFOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DPAFInclude<ExtArgs> | null
    /**
     * Filter, which DPAF to fetch.
     */
    where?: DPAFWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DPAFS to fetch.
     */
    orderBy?: DPAFOrderByWithRelationInput | DPAFOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DPAFS.
     */
    cursor?: DPAFWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DPAFS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DPAFS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DPAFS.
     */
    distinct?: DPAFScalarFieldEnum | DPAFScalarFieldEnum[]
  }

  /**
   * DPAF findMany
   */
  export type DPAFFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DPAF
     */
    select?: DPAFSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DPAF
     */
    omit?: DPAFOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DPAFInclude<ExtArgs> | null
    /**
     * Filter, which DPAFS to fetch.
     */
    where?: DPAFWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DPAFS to fetch.
     */
    orderBy?: DPAFOrderByWithRelationInput | DPAFOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DPAFS.
     */
    cursor?: DPAFWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DPAFS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DPAFS.
     */
    skip?: number
    distinct?: DPAFScalarFieldEnum | DPAFScalarFieldEnum[]
  }

  /**
   * DPAF create
   */
  export type DPAFCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DPAF
     */
    select?: DPAFSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DPAF
     */
    omit?: DPAFOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DPAFInclude<ExtArgs> | null
    /**
     * The data needed to create a DPAF.
     */
    data: XOR<DPAFCreateInput, DPAFUncheckedCreateInput>
  }

  /**
   * DPAF createMany
   */
  export type DPAFCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DPAFS.
     */
    data: DPAFCreateManyInput | DPAFCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DPAF createManyAndReturn
   */
  export type DPAFCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DPAF
     */
    select?: DPAFSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DPAF
     */
    omit?: DPAFOmit<ExtArgs> | null
    /**
     * The data used to create many DPAFS.
     */
    data: DPAFCreateManyInput | DPAFCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DPAFIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DPAF update
   */
  export type DPAFUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DPAF
     */
    select?: DPAFSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DPAF
     */
    omit?: DPAFOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DPAFInclude<ExtArgs> | null
    /**
     * The data needed to update a DPAF.
     */
    data: XOR<DPAFUpdateInput, DPAFUncheckedUpdateInput>
    /**
     * Choose, which DPAF to update.
     */
    where: DPAFWhereUniqueInput
  }

  /**
   * DPAF updateMany
   */
  export type DPAFUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DPAFS.
     */
    data: XOR<DPAFUpdateManyMutationInput, DPAFUncheckedUpdateManyInput>
    /**
     * Filter which DPAFS to update
     */
    where?: DPAFWhereInput
    /**
     * Limit how many DPAFS to update.
     */
    limit?: number
  }

  /**
   * DPAF updateManyAndReturn
   */
  export type DPAFUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DPAF
     */
    select?: DPAFSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DPAF
     */
    omit?: DPAFOmit<ExtArgs> | null
    /**
     * The data used to update DPAFS.
     */
    data: XOR<DPAFUpdateManyMutationInput, DPAFUncheckedUpdateManyInput>
    /**
     * Filter which DPAFS to update
     */
    where?: DPAFWhereInput
    /**
     * Limit how many DPAFS to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DPAFIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * DPAF upsert
   */
  export type DPAFUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DPAF
     */
    select?: DPAFSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DPAF
     */
    omit?: DPAFOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DPAFInclude<ExtArgs> | null
    /**
     * The filter to search for the DPAF to update in case it exists.
     */
    where: DPAFWhereUniqueInput
    /**
     * In case the DPAF found by the `where` argument doesn't exist, create a new DPAF with this data.
     */
    create: XOR<DPAFCreateInput, DPAFUncheckedCreateInput>
    /**
     * In case the DPAF was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DPAFUpdateInput, DPAFUncheckedUpdateInput>
  }

  /**
   * DPAF delete
   */
  export type DPAFDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DPAF
     */
    select?: DPAFSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DPAF
     */
    omit?: DPAFOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DPAFInclude<ExtArgs> | null
    /**
     * Filter which DPAF to delete.
     */
    where: DPAFWhereUniqueInput
  }

  /**
   * DPAF deleteMany
   */
  export type DPAFDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DPAFS to delete
     */
    where?: DPAFWhereInput
    /**
     * Limit how many DPAFS to delete.
     */
    limit?: number
  }

  /**
   * DPAF without action
   */
  export type DPAFDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DPAF
     */
    select?: DPAFSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DPAF
     */
    omit?: DPAFOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DPAFInclude<ExtArgs> | null
  }


  /**
   * Model DemandeStage
   */

  export type AggregateDemandeStage = {
    _count: DemandeStageCountAggregateOutputType | null
    _min: DemandeStageMinAggregateOutputType | null
    _max: DemandeStageMaxAggregateOutputType | null
  }

  export type DemandeStageMinAggregateOutputType = {
    id: string | null
    stagiaireId: string | null
    dateDemande: Date | null
    etat: $Enums.EtatDemande | null
    motifRefus: string | null
    dateTraitement: Date | null
    structureCibleId: string | null
  }

  export type DemandeStageMaxAggregateOutputType = {
    id: string | null
    stagiaireId: string | null
    dateDemande: Date | null
    etat: $Enums.EtatDemande | null
    motifRefus: string | null
    dateTraitement: Date | null
    structureCibleId: string | null
  }

  export type DemandeStageCountAggregateOutputType = {
    id: number
    stagiaireId: number
    dateDemande: number
    etat: number
    motifRefus: number
    dateTraitement: number
    structureCibleId: number
    _all: number
  }


  export type DemandeStageMinAggregateInputType = {
    id?: true
    stagiaireId?: true
    dateDemande?: true
    etat?: true
    motifRefus?: true
    dateTraitement?: true
    structureCibleId?: true
  }

  export type DemandeStageMaxAggregateInputType = {
    id?: true
    stagiaireId?: true
    dateDemande?: true
    etat?: true
    motifRefus?: true
    dateTraitement?: true
    structureCibleId?: true
  }

  export type DemandeStageCountAggregateInputType = {
    id?: true
    stagiaireId?: true
    dateDemande?: true
    etat?: true
    motifRefus?: true
    dateTraitement?: true
    structureCibleId?: true
    _all?: true
  }

  export type DemandeStageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DemandeStage to aggregate.
     */
    where?: DemandeStageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DemandeStages to fetch.
     */
    orderBy?: DemandeStageOrderByWithRelationInput | DemandeStageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DemandeStageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DemandeStages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DemandeStages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DemandeStages
    **/
    _count?: true | DemandeStageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DemandeStageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DemandeStageMaxAggregateInputType
  }

  export type GetDemandeStageAggregateType<T extends DemandeStageAggregateArgs> = {
        [P in keyof T & keyof AggregateDemandeStage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDemandeStage[P]>
      : GetScalarType<T[P], AggregateDemandeStage[P]>
  }




  export type DemandeStageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DemandeStageWhereInput
    orderBy?: DemandeStageOrderByWithAggregationInput | DemandeStageOrderByWithAggregationInput[]
    by: DemandeStageScalarFieldEnum[] | DemandeStageScalarFieldEnum
    having?: DemandeStageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DemandeStageCountAggregateInputType | true
    _min?: DemandeStageMinAggregateInputType
    _max?: DemandeStageMaxAggregateInputType
  }

  export type DemandeStageGroupByOutputType = {
    id: string
    stagiaireId: string
    dateDemande: Date
    etat: $Enums.EtatDemande
    motifRefus: string | null
    dateTraitement: Date | null
    structureCibleId: string | null
    _count: DemandeStageCountAggregateOutputType | null
    _min: DemandeStageMinAggregateOutputType | null
    _max: DemandeStageMaxAggregateOutputType | null
  }

  type GetDemandeStageGroupByPayload<T extends DemandeStageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DemandeStageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DemandeStageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DemandeStageGroupByOutputType[P]>
            : GetScalarType<T[P], DemandeStageGroupByOutputType[P]>
        }
      >
    >


  export type DemandeStageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    stagiaireId?: boolean
    dateDemande?: boolean
    etat?: boolean
    motifRefus?: boolean
    dateTraitement?: boolean
    structureCibleId?: boolean
    stagiaire?: boolean | StagiaireDefaultArgs<ExtArgs>
    structureCible?: boolean | DemandeStage$structureCibleArgs<ExtArgs>
  }, ExtArgs["result"]["demandeStage"]>

  export type DemandeStageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    stagiaireId?: boolean
    dateDemande?: boolean
    etat?: boolean
    motifRefus?: boolean
    dateTraitement?: boolean
    structureCibleId?: boolean
    stagiaire?: boolean | StagiaireDefaultArgs<ExtArgs>
    structureCible?: boolean | DemandeStage$structureCibleArgs<ExtArgs>
  }, ExtArgs["result"]["demandeStage"]>

  export type DemandeStageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    stagiaireId?: boolean
    dateDemande?: boolean
    etat?: boolean
    motifRefus?: boolean
    dateTraitement?: boolean
    structureCibleId?: boolean
    stagiaire?: boolean | StagiaireDefaultArgs<ExtArgs>
    structureCible?: boolean | DemandeStage$structureCibleArgs<ExtArgs>
  }, ExtArgs["result"]["demandeStage"]>

  export type DemandeStageSelectScalar = {
    id?: boolean
    stagiaireId?: boolean
    dateDemande?: boolean
    etat?: boolean
    motifRefus?: boolean
    dateTraitement?: boolean
    structureCibleId?: boolean
  }

  export type DemandeStageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "stagiaireId" | "dateDemande" | "etat" | "motifRefus" | "dateTraitement" | "structureCibleId", ExtArgs["result"]["demandeStage"]>
  export type DemandeStageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stagiaire?: boolean | StagiaireDefaultArgs<ExtArgs>
    structureCible?: boolean | DemandeStage$structureCibleArgs<ExtArgs>
  }
  export type DemandeStageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stagiaire?: boolean | StagiaireDefaultArgs<ExtArgs>
    structureCible?: boolean | DemandeStage$structureCibleArgs<ExtArgs>
  }
  export type DemandeStageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stagiaire?: boolean | StagiaireDefaultArgs<ExtArgs>
    structureCible?: boolean | DemandeStage$structureCibleArgs<ExtArgs>
  }

  export type $DemandeStagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DemandeStage"
    objects: {
      stagiaire: Prisma.$StagiairePayload<ExtArgs>
      structureCible: Prisma.$StructurePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      stagiaireId: string
      dateDemande: Date
      etat: $Enums.EtatDemande
      motifRefus: string | null
      dateTraitement: Date | null
      structureCibleId: string | null
    }, ExtArgs["result"]["demandeStage"]>
    composites: {}
  }

  type DemandeStageGetPayload<S extends boolean | null | undefined | DemandeStageDefaultArgs> = $Result.GetResult<Prisma.$DemandeStagePayload, S>

  type DemandeStageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DemandeStageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DemandeStageCountAggregateInputType | true
    }

  export interface DemandeStageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DemandeStage'], meta: { name: 'DemandeStage' } }
    /**
     * Find zero or one DemandeStage that matches the filter.
     * @param {DemandeStageFindUniqueArgs} args - Arguments to find a DemandeStage
     * @example
     * // Get one DemandeStage
     * const demandeStage = await prisma.demandeStage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DemandeStageFindUniqueArgs>(args: SelectSubset<T, DemandeStageFindUniqueArgs<ExtArgs>>): Prisma__DemandeStageClient<$Result.GetResult<Prisma.$DemandeStagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DemandeStage that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DemandeStageFindUniqueOrThrowArgs} args - Arguments to find a DemandeStage
     * @example
     * // Get one DemandeStage
     * const demandeStage = await prisma.demandeStage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DemandeStageFindUniqueOrThrowArgs>(args: SelectSubset<T, DemandeStageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DemandeStageClient<$Result.GetResult<Prisma.$DemandeStagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DemandeStage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DemandeStageFindFirstArgs} args - Arguments to find a DemandeStage
     * @example
     * // Get one DemandeStage
     * const demandeStage = await prisma.demandeStage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DemandeStageFindFirstArgs>(args?: SelectSubset<T, DemandeStageFindFirstArgs<ExtArgs>>): Prisma__DemandeStageClient<$Result.GetResult<Prisma.$DemandeStagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DemandeStage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DemandeStageFindFirstOrThrowArgs} args - Arguments to find a DemandeStage
     * @example
     * // Get one DemandeStage
     * const demandeStage = await prisma.demandeStage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DemandeStageFindFirstOrThrowArgs>(args?: SelectSubset<T, DemandeStageFindFirstOrThrowArgs<ExtArgs>>): Prisma__DemandeStageClient<$Result.GetResult<Prisma.$DemandeStagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DemandeStages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DemandeStageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DemandeStages
     * const demandeStages = await prisma.demandeStage.findMany()
     * 
     * // Get first 10 DemandeStages
     * const demandeStages = await prisma.demandeStage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const demandeStageWithIdOnly = await prisma.demandeStage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DemandeStageFindManyArgs>(args?: SelectSubset<T, DemandeStageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DemandeStagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DemandeStage.
     * @param {DemandeStageCreateArgs} args - Arguments to create a DemandeStage.
     * @example
     * // Create one DemandeStage
     * const DemandeStage = await prisma.demandeStage.create({
     *   data: {
     *     // ... data to create a DemandeStage
     *   }
     * })
     * 
     */
    create<T extends DemandeStageCreateArgs>(args: SelectSubset<T, DemandeStageCreateArgs<ExtArgs>>): Prisma__DemandeStageClient<$Result.GetResult<Prisma.$DemandeStagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DemandeStages.
     * @param {DemandeStageCreateManyArgs} args - Arguments to create many DemandeStages.
     * @example
     * // Create many DemandeStages
     * const demandeStage = await prisma.demandeStage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DemandeStageCreateManyArgs>(args?: SelectSubset<T, DemandeStageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DemandeStages and returns the data saved in the database.
     * @param {DemandeStageCreateManyAndReturnArgs} args - Arguments to create many DemandeStages.
     * @example
     * // Create many DemandeStages
     * const demandeStage = await prisma.demandeStage.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DemandeStages and only return the `id`
     * const demandeStageWithIdOnly = await prisma.demandeStage.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DemandeStageCreateManyAndReturnArgs>(args?: SelectSubset<T, DemandeStageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DemandeStagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a DemandeStage.
     * @param {DemandeStageDeleteArgs} args - Arguments to delete one DemandeStage.
     * @example
     * // Delete one DemandeStage
     * const DemandeStage = await prisma.demandeStage.delete({
     *   where: {
     *     // ... filter to delete one DemandeStage
     *   }
     * })
     * 
     */
    delete<T extends DemandeStageDeleteArgs>(args: SelectSubset<T, DemandeStageDeleteArgs<ExtArgs>>): Prisma__DemandeStageClient<$Result.GetResult<Prisma.$DemandeStagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DemandeStage.
     * @param {DemandeStageUpdateArgs} args - Arguments to update one DemandeStage.
     * @example
     * // Update one DemandeStage
     * const demandeStage = await prisma.demandeStage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DemandeStageUpdateArgs>(args: SelectSubset<T, DemandeStageUpdateArgs<ExtArgs>>): Prisma__DemandeStageClient<$Result.GetResult<Prisma.$DemandeStagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DemandeStages.
     * @param {DemandeStageDeleteManyArgs} args - Arguments to filter DemandeStages to delete.
     * @example
     * // Delete a few DemandeStages
     * const { count } = await prisma.demandeStage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DemandeStageDeleteManyArgs>(args?: SelectSubset<T, DemandeStageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DemandeStages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DemandeStageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DemandeStages
     * const demandeStage = await prisma.demandeStage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DemandeStageUpdateManyArgs>(args: SelectSubset<T, DemandeStageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DemandeStages and returns the data updated in the database.
     * @param {DemandeStageUpdateManyAndReturnArgs} args - Arguments to update many DemandeStages.
     * @example
     * // Update many DemandeStages
     * const demandeStage = await prisma.demandeStage.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DemandeStages and only return the `id`
     * const demandeStageWithIdOnly = await prisma.demandeStage.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DemandeStageUpdateManyAndReturnArgs>(args: SelectSubset<T, DemandeStageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DemandeStagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one DemandeStage.
     * @param {DemandeStageUpsertArgs} args - Arguments to update or create a DemandeStage.
     * @example
     * // Update or create a DemandeStage
     * const demandeStage = await prisma.demandeStage.upsert({
     *   create: {
     *     // ... data to create a DemandeStage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DemandeStage we want to update
     *   }
     * })
     */
    upsert<T extends DemandeStageUpsertArgs>(args: SelectSubset<T, DemandeStageUpsertArgs<ExtArgs>>): Prisma__DemandeStageClient<$Result.GetResult<Prisma.$DemandeStagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DemandeStages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DemandeStageCountArgs} args - Arguments to filter DemandeStages to count.
     * @example
     * // Count the number of DemandeStages
     * const count = await prisma.demandeStage.count({
     *   where: {
     *     // ... the filter for the DemandeStages we want to count
     *   }
     * })
    **/
    count<T extends DemandeStageCountArgs>(
      args?: Subset<T, DemandeStageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DemandeStageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DemandeStage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DemandeStageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DemandeStageAggregateArgs>(args: Subset<T, DemandeStageAggregateArgs>): Prisma.PrismaPromise<GetDemandeStageAggregateType<T>>

    /**
     * Group by DemandeStage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DemandeStageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DemandeStageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DemandeStageGroupByArgs['orderBy'] }
        : { orderBy?: DemandeStageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DemandeStageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDemandeStageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DemandeStage model
   */
  readonly fields: DemandeStageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DemandeStage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DemandeStageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    stagiaire<T extends StagiaireDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StagiaireDefaultArgs<ExtArgs>>): Prisma__StagiaireClient<$Result.GetResult<Prisma.$StagiairePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    structureCible<T extends DemandeStage$structureCibleArgs<ExtArgs> = {}>(args?: Subset<T, DemandeStage$structureCibleArgs<ExtArgs>>): Prisma__StructureClient<$Result.GetResult<Prisma.$StructurePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DemandeStage model
   */
  interface DemandeStageFieldRefs {
    readonly id: FieldRef<"DemandeStage", 'String'>
    readonly stagiaireId: FieldRef<"DemandeStage", 'String'>
    readonly dateDemande: FieldRef<"DemandeStage", 'DateTime'>
    readonly etat: FieldRef<"DemandeStage", 'EtatDemande'>
    readonly motifRefus: FieldRef<"DemandeStage", 'String'>
    readonly dateTraitement: FieldRef<"DemandeStage", 'DateTime'>
    readonly structureCibleId: FieldRef<"DemandeStage", 'String'>
  }
    

  // Custom InputTypes
  /**
   * DemandeStage findUnique
   */
  export type DemandeStageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DemandeStage
     */
    select?: DemandeStageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DemandeStage
     */
    omit?: DemandeStageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DemandeStageInclude<ExtArgs> | null
    /**
     * Filter, which DemandeStage to fetch.
     */
    where: DemandeStageWhereUniqueInput
  }

  /**
   * DemandeStage findUniqueOrThrow
   */
  export type DemandeStageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DemandeStage
     */
    select?: DemandeStageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DemandeStage
     */
    omit?: DemandeStageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DemandeStageInclude<ExtArgs> | null
    /**
     * Filter, which DemandeStage to fetch.
     */
    where: DemandeStageWhereUniqueInput
  }

  /**
   * DemandeStage findFirst
   */
  export type DemandeStageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DemandeStage
     */
    select?: DemandeStageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DemandeStage
     */
    omit?: DemandeStageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DemandeStageInclude<ExtArgs> | null
    /**
     * Filter, which DemandeStage to fetch.
     */
    where?: DemandeStageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DemandeStages to fetch.
     */
    orderBy?: DemandeStageOrderByWithRelationInput | DemandeStageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DemandeStages.
     */
    cursor?: DemandeStageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DemandeStages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DemandeStages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DemandeStages.
     */
    distinct?: DemandeStageScalarFieldEnum | DemandeStageScalarFieldEnum[]
  }

  /**
   * DemandeStage findFirstOrThrow
   */
  export type DemandeStageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DemandeStage
     */
    select?: DemandeStageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DemandeStage
     */
    omit?: DemandeStageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DemandeStageInclude<ExtArgs> | null
    /**
     * Filter, which DemandeStage to fetch.
     */
    where?: DemandeStageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DemandeStages to fetch.
     */
    orderBy?: DemandeStageOrderByWithRelationInput | DemandeStageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DemandeStages.
     */
    cursor?: DemandeStageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DemandeStages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DemandeStages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DemandeStages.
     */
    distinct?: DemandeStageScalarFieldEnum | DemandeStageScalarFieldEnum[]
  }

  /**
   * DemandeStage findMany
   */
  export type DemandeStageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DemandeStage
     */
    select?: DemandeStageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DemandeStage
     */
    omit?: DemandeStageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DemandeStageInclude<ExtArgs> | null
    /**
     * Filter, which DemandeStages to fetch.
     */
    where?: DemandeStageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DemandeStages to fetch.
     */
    orderBy?: DemandeStageOrderByWithRelationInput | DemandeStageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DemandeStages.
     */
    cursor?: DemandeStageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DemandeStages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DemandeStages.
     */
    skip?: number
    distinct?: DemandeStageScalarFieldEnum | DemandeStageScalarFieldEnum[]
  }

  /**
   * DemandeStage create
   */
  export type DemandeStageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DemandeStage
     */
    select?: DemandeStageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DemandeStage
     */
    omit?: DemandeStageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DemandeStageInclude<ExtArgs> | null
    /**
     * The data needed to create a DemandeStage.
     */
    data: XOR<DemandeStageCreateInput, DemandeStageUncheckedCreateInput>
  }

  /**
   * DemandeStage createMany
   */
  export type DemandeStageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DemandeStages.
     */
    data: DemandeStageCreateManyInput | DemandeStageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DemandeStage createManyAndReturn
   */
  export type DemandeStageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DemandeStage
     */
    select?: DemandeStageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DemandeStage
     */
    omit?: DemandeStageOmit<ExtArgs> | null
    /**
     * The data used to create many DemandeStages.
     */
    data: DemandeStageCreateManyInput | DemandeStageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DemandeStageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DemandeStage update
   */
  export type DemandeStageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DemandeStage
     */
    select?: DemandeStageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DemandeStage
     */
    omit?: DemandeStageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DemandeStageInclude<ExtArgs> | null
    /**
     * The data needed to update a DemandeStage.
     */
    data: XOR<DemandeStageUpdateInput, DemandeStageUncheckedUpdateInput>
    /**
     * Choose, which DemandeStage to update.
     */
    where: DemandeStageWhereUniqueInput
  }

  /**
   * DemandeStage updateMany
   */
  export type DemandeStageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DemandeStages.
     */
    data: XOR<DemandeStageUpdateManyMutationInput, DemandeStageUncheckedUpdateManyInput>
    /**
     * Filter which DemandeStages to update
     */
    where?: DemandeStageWhereInput
    /**
     * Limit how many DemandeStages to update.
     */
    limit?: number
  }

  /**
   * DemandeStage updateManyAndReturn
   */
  export type DemandeStageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DemandeStage
     */
    select?: DemandeStageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DemandeStage
     */
    omit?: DemandeStageOmit<ExtArgs> | null
    /**
     * The data used to update DemandeStages.
     */
    data: XOR<DemandeStageUpdateManyMutationInput, DemandeStageUncheckedUpdateManyInput>
    /**
     * Filter which DemandeStages to update
     */
    where?: DemandeStageWhereInput
    /**
     * Limit how many DemandeStages to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DemandeStageIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * DemandeStage upsert
   */
  export type DemandeStageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DemandeStage
     */
    select?: DemandeStageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DemandeStage
     */
    omit?: DemandeStageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DemandeStageInclude<ExtArgs> | null
    /**
     * The filter to search for the DemandeStage to update in case it exists.
     */
    where: DemandeStageWhereUniqueInput
    /**
     * In case the DemandeStage found by the `where` argument doesn't exist, create a new DemandeStage with this data.
     */
    create: XOR<DemandeStageCreateInput, DemandeStageUncheckedCreateInput>
    /**
     * In case the DemandeStage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DemandeStageUpdateInput, DemandeStageUncheckedUpdateInput>
  }

  /**
   * DemandeStage delete
   */
  export type DemandeStageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DemandeStage
     */
    select?: DemandeStageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DemandeStage
     */
    omit?: DemandeStageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DemandeStageInclude<ExtArgs> | null
    /**
     * Filter which DemandeStage to delete.
     */
    where: DemandeStageWhereUniqueInput
  }

  /**
   * DemandeStage deleteMany
   */
  export type DemandeStageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DemandeStages to delete
     */
    where?: DemandeStageWhereInput
    /**
     * Limit how many DemandeStages to delete.
     */
    limit?: number
  }

  /**
   * DemandeStage.structureCible
   */
  export type DemandeStage$structureCibleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Structure
     */
    select?: StructureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Structure
     */
    omit?: StructureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StructureInclude<ExtArgs> | null
    where?: StructureWhereInput
  }

  /**
   * DemandeStage without action
   */
  export type DemandeStageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DemandeStage
     */
    select?: DemandeStageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DemandeStage
     */
    omit?: DemandeStageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DemandeStageInclude<ExtArgs> | null
  }


  /**
   * Model Stage
   */

  export type AggregateStage = {
    _count: StageCountAggregateOutputType | null
    _min: StageMinAggregateOutputType | null
    _max: StageMaxAggregateOutputType | null
  }

  export type StageMinAggregateOutputType = {
    id: string | null
    stagiaireId: string | null
    tuteurId: string | null
    structureId: string | null
    theme: string | null
    etat: $Enums.EtatStage | null
    dateDebut: Date | null
    dateFin: Date | null
    noteFinale: string | null
  }

  export type StageMaxAggregateOutputType = {
    id: string | null
    stagiaireId: string | null
    tuteurId: string | null
    structureId: string | null
    theme: string | null
    etat: $Enums.EtatStage | null
    dateDebut: Date | null
    dateFin: Date | null
    noteFinale: string | null
  }

  export type StageCountAggregateOutputType = {
    id: number
    stagiaireId: number
    tuteurId: number
    structureId: number
    theme: number
    etat: number
    dateDebut: number
    dateFin: number
    noteFinale: number
    _all: number
  }


  export type StageMinAggregateInputType = {
    id?: true
    stagiaireId?: true
    tuteurId?: true
    structureId?: true
    theme?: true
    etat?: true
    dateDebut?: true
    dateFin?: true
    noteFinale?: true
  }

  export type StageMaxAggregateInputType = {
    id?: true
    stagiaireId?: true
    tuteurId?: true
    structureId?: true
    theme?: true
    etat?: true
    dateDebut?: true
    dateFin?: true
    noteFinale?: true
  }

  export type StageCountAggregateInputType = {
    id?: true
    stagiaireId?: true
    tuteurId?: true
    structureId?: true
    theme?: true
    etat?: true
    dateDebut?: true
    dateFin?: true
    noteFinale?: true
    _all?: true
  }

  export type StageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Stage to aggregate.
     */
    where?: StageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stages to fetch.
     */
    orderBy?: StageOrderByWithRelationInput | StageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Stages
    **/
    _count?: true | StageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StageMaxAggregateInputType
  }

  export type GetStageAggregateType<T extends StageAggregateArgs> = {
        [P in keyof T & keyof AggregateStage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStage[P]>
      : GetScalarType<T[P], AggregateStage[P]>
  }




  export type StageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StageWhereInput
    orderBy?: StageOrderByWithAggregationInput | StageOrderByWithAggregationInput[]
    by: StageScalarFieldEnum[] | StageScalarFieldEnum
    having?: StageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StageCountAggregateInputType | true
    _min?: StageMinAggregateInputType
    _max?: StageMaxAggregateInputType
  }

  export type StageGroupByOutputType = {
    id: string
    stagiaireId: string
    tuteurId: string
    structureId: string
    theme: string | null
    etat: $Enums.EtatStage
    dateDebut: Date
    dateFin: Date
    noteFinale: string | null
    _count: StageCountAggregateOutputType | null
    _min: StageMinAggregateOutputType | null
    _max: StageMaxAggregateOutputType | null
  }

  type GetStageGroupByPayload<T extends StageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StageGroupByOutputType[P]>
            : GetScalarType<T[P], StageGroupByOutputType[P]>
        }
      >
    >


  export type StageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    stagiaireId?: boolean
    tuteurId?: boolean
    structureId?: boolean
    theme?: boolean
    etat?: boolean
    dateDebut?: boolean
    dateFin?: boolean
    noteFinale?: boolean
    stagiaire?: boolean | StagiaireDefaultArgs<ExtArgs>
    tuteur?: boolean | TuteurDefaultArgs<ExtArgs>
    structure?: boolean | StructureDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stage"]>

  export type StageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    stagiaireId?: boolean
    tuteurId?: boolean
    structureId?: boolean
    theme?: boolean
    etat?: boolean
    dateDebut?: boolean
    dateFin?: boolean
    noteFinale?: boolean
    stagiaire?: boolean | StagiaireDefaultArgs<ExtArgs>
    tuteur?: boolean | TuteurDefaultArgs<ExtArgs>
    structure?: boolean | StructureDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stage"]>

  export type StageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    stagiaireId?: boolean
    tuteurId?: boolean
    structureId?: boolean
    theme?: boolean
    etat?: boolean
    dateDebut?: boolean
    dateFin?: boolean
    noteFinale?: boolean
    stagiaire?: boolean | StagiaireDefaultArgs<ExtArgs>
    tuteur?: boolean | TuteurDefaultArgs<ExtArgs>
    structure?: boolean | StructureDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stage"]>

  export type StageSelectScalar = {
    id?: boolean
    stagiaireId?: boolean
    tuteurId?: boolean
    structureId?: boolean
    theme?: boolean
    etat?: boolean
    dateDebut?: boolean
    dateFin?: boolean
    noteFinale?: boolean
  }

  export type StageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "stagiaireId" | "tuteurId" | "structureId" | "theme" | "etat" | "dateDebut" | "dateFin" | "noteFinale", ExtArgs["result"]["stage"]>
  export type StageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stagiaire?: boolean | StagiaireDefaultArgs<ExtArgs>
    tuteur?: boolean | TuteurDefaultArgs<ExtArgs>
    structure?: boolean | StructureDefaultArgs<ExtArgs>
  }
  export type StageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stagiaire?: boolean | StagiaireDefaultArgs<ExtArgs>
    tuteur?: boolean | TuteurDefaultArgs<ExtArgs>
    structure?: boolean | StructureDefaultArgs<ExtArgs>
  }
  export type StageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stagiaire?: boolean | StagiaireDefaultArgs<ExtArgs>
    tuteur?: boolean | TuteurDefaultArgs<ExtArgs>
    structure?: boolean | StructureDefaultArgs<ExtArgs>
  }

  export type $StagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Stage"
    objects: {
      stagiaire: Prisma.$StagiairePayload<ExtArgs>
      tuteur: Prisma.$TuteurPayload<ExtArgs>
      structure: Prisma.$StructurePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      stagiaireId: string
      tuteurId: string
      structureId: string
      theme: string | null
      etat: $Enums.EtatStage
      dateDebut: Date
      dateFin: Date
      noteFinale: string | null
    }, ExtArgs["result"]["stage"]>
    composites: {}
  }

  type StageGetPayload<S extends boolean | null | undefined | StageDefaultArgs> = $Result.GetResult<Prisma.$StagePayload, S>

  type StageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StageCountAggregateInputType | true
    }

  export interface StageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Stage'], meta: { name: 'Stage' } }
    /**
     * Find zero or one Stage that matches the filter.
     * @param {StageFindUniqueArgs} args - Arguments to find a Stage
     * @example
     * // Get one Stage
     * const stage = await prisma.stage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StageFindUniqueArgs>(args: SelectSubset<T, StageFindUniqueArgs<ExtArgs>>): Prisma__StageClient<$Result.GetResult<Prisma.$StagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Stage that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StageFindUniqueOrThrowArgs} args - Arguments to find a Stage
     * @example
     * // Get one Stage
     * const stage = await prisma.stage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StageFindUniqueOrThrowArgs>(args: SelectSubset<T, StageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StageClient<$Result.GetResult<Prisma.$StagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Stage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StageFindFirstArgs} args - Arguments to find a Stage
     * @example
     * // Get one Stage
     * const stage = await prisma.stage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StageFindFirstArgs>(args?: SelectSubset<T, StageFindFirstArgs<ExtArgs>>): Prisma__StageClient<$Result.GetResult<Prisma.$StagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Stage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StageFindFirstOrThrowArgs} args - Arguments to find a Stage
     * @example
     * // Get one Stage
     * const stage = await prisma.stage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StageFindFirstOrThrowArgs>(args?: SelectSubset<T, StageFindFirstOrThrowArgs<ExtArgs>>): Prisma__StageClient<$Result.GetResult<Prisma.$StagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Stages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Stages
     * const stages = await prisma.stage.findMany()
     * 
     * // Get first 10 Stages
     * const stages = await prisma.stage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const stageWithIdOnly = await prisma.stage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StageFindManyArgs>(args?: SelectSubset<T, StageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Stage.
     * @param {StageCreateArgs} args - Arguments to create a Stage.
     * @example
     * // Create one Stage
     * const Stage = await prisma.stage.create({
     *   data: {
     *     // ... data to create a Stage
     *   }
     * })
     * 
     */
    create<T extends StageCreateArgs>(args: SelectSubset<T, StageCreateArgs<ExtArgs>>): Prisma__StageClient<$Result.GetResult<Prisma.$StagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Stages.
     * @param {StageCreateManyArgs} args - Arguments to create many Stages.
     * @example
     * // Create many Stages
     * const stage = await prisma.stage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StageCreateManyArgs>(args?: SelectSubset<T, StageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Stages and returns the data saved in the database.
     * @param {StageCreateManyAndReturnArgs} args - Arguments to create many Stages.
     * @example
     * // Create many Stages
     * const stage = await prisma.stage.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Stages and only return the `id`
     * const stageWithIdOnly = await prisma.stage.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StageCreateManyAndReturnArgs>(args?: SelectSubset<T, StageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Stage.
     * @param {StageDeleteArgs} args - Arguments to delete one Stage.
     * @example
     * // Delete one Stage
     * const Stage = await prisma.stage.delete({
     *   where: {
     *     // ... filter to delete one Stage
     *   }
     * })
     * 
     */
    delete<T extends StageDeleteArgs>(args: SelectSubset<T, StageDeleteArgs<ExtArgs>>): Prisma__StageClient<$Result.GetResult<Prisma.$StagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Stage.
     * @param {StageUpdateArgs} args - Arguments to update one Stage.
     * @example
     * // Update one Stage
     * const stage = await prisma.stage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StageUpdateArgs>(args: SelectSubset<T, StageUpdateArgs<ExtArgs>>): Prisma__StageClient<$Result.GetResult<Prisma.$StagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Stages.
     * @param {StageDeleteManyArgs} args - Arguments to filter Stages to delete.
     * @example
     * // Delete a few Stages
     * const { count } = await prisma.stage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StageDeleteManyArgs>(args?: SelectSubset<T, StageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Stages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Stages
     * const stage = await prisma.stage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StageUpdateManyArgs>(args: SelectSubset<T, StageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Stages and returns the data updated in the database.
     * @param {StageUpdateManyAndReturnArgs} args - Arguments to update many Stages.
     * @example
     * // Update many Stages
     * const stage = await prisma.stage.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Stages and only return the `id`
     * const stageWithIdOnly = await prisma.stage.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StageUpdateManyAndReturnArgs>(args: SelectSubset<T, StageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Stage.
     * @param {StageUpsertArgs} args - Arguments to update or create a Stage.
     * @example
     * // Update or create a Stage
     * const stage = await prisma.stage.upsert({
     *   create: {
     *     // ... data to create a Stage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Stage we want to update
     *   }
     * })
     */
    upsert<T extends StageUpsertArgs>(args: SelectSubset<T, StageUpsertArgs<ExtArgs>>): Prisma__StageClient<$Result.GetResult<Prisma.$StagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Stages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StageCountArgs} args - Arguments to filter Stages to count.
     * @example
     * // Count the number of Stages
     * const count = await prisma.stage.count({
     *   where: {
     *     // ... the filter for the Stages we want to count
     *   }
     * })
    **/
    count<T extends StageCountArgs>(
      args?: Subset<T, StageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Stage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StageAggregateArgs>(args: Subset<T, StageAggregateArgs>): Prisma.PrismaPromise<GetStageAggregateType<T>>

    /**
     * Group by Stage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StageGroupByArgs['orderBy'] }
        : { orderBy?: StageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Stage model
   */
  readonly fields: StageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Stage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    stagiaire<T extends StagiaireDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StagiaireDefaultArgs<ExtArgs>>): Prisma__StagiaireClient<$Result.GetResult<Prisma.$StagiairePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    tuteur<T extends TuteurDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TuteurDefaultArgs<ExtArgs>>): Prisma__TuteurClient<$Result.GetResult<Prisma.$TuteurPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    structure<T extends StructureDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StructureDefaultArgs<ExtArgs>>): Prisma__StructureClient<$Result.GetResult<Prisma.$StructurePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Stage model
   */
  interface StageFieldRefs {
    readonly id: FieldRef<"Stage", 'String'>
    readonly stagiaireId: FieldRef<"Stage", 'String'>
    readonly tuteurId: FieldRef<"Stage", 'String'>
    readonly structureId: FieldRef<"Stage", 'String'>
    readonly theme: FieldRef<"Stage", 'String'>
    readonly etat: FieldRef<"Stage", 'EtatStage'>
    readonly dateDebut: FieldRef<"Stage", 'DateTime'>
    readonly dateFin: FieldRef<"Stage", 'DateTime'>
    readonly noteFinale: FieldRef<"Stage", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Stage findUnique
   */
  export type StageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stage
     */
    select?: StageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stage
     */
    omit?: StageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageInclude<ExtArgs> | null
    /**
     * Filter, which Stage to fetch.
     */
    where: StageWhereUniqueInput
  }

  /**
   * Stage findUniqueOrThrow
   */
  export type StageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stage
     */
    select?: StageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stage
     */
    omit?: StageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageInclude<ExtArgs> | null
    /**
     * Filter, which Stage to fetch.
     */
    where: StageWhereUniqueInput
  }

  /**
   * Stage findFirst
   */
  export type StageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stage
     */
    select?: StageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stage
     */
    omit?: StageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageInclude<ExtArgs> | null
    /**
     * Filter, which Stage to fetch.
     */
    where?: StageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stages to fetch.
     */
    orderBy?: StageOrderByWithRelationInput | StageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stages.
     */
    cursor?: StageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stages.
     */
    distinct?: StageScalarFieldEnum | StageScalarFieldEnum[]
  }

  /**
   * Stage findFirstOrThrow
   */
  export type StageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stage
     */
    select?: StageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stage
     */
    omit?: StageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageInclude<ExtArgs> | null
    /**
     * Filter, which Stage to fetch.
     */
    where?: StageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stages to fetch.
     */
    orderBy?: StageOrderByWithRelationInput | StageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stages.
     */
    cursor?: StageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stages.
     */
    distinct?: StageScalarFieldEnum | StageScalarFieldEnum[]
  }

  /**
   * Stage findMany
   */
  export type StageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stage
     */
    select?: StageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stage
     */
    omit?: StageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageInclude<ExtArgs> | null
    /**
     * Filter, which Stages to fetch.
     */
    where?: StageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stages to fetch.
     */
    orderBy?: StageOrderByWithRelationInput | StageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Stages.
     */
    cursor?: StageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stages.
     */
    skip?: number
    distinct?: StageScalarFieldEnum | StageScalarFieldEnum[]
  }

  /**
   * Stage create
   */
  export type StageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stage
     */
    select?: StageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stage
     */
    omit?: StageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageInclude<ExtArgs> | null
    /**
     * The data needed to create a Stage.
     */
    data: XOR<StageCreateInput, StageUncheckedCreateInput>
  }

  /**
   * Stage createMany
   */
  export type StageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Stages.
     */
    data: StageCreateManyInput | StageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Stage createManyAndReturn
   */
  export type StageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stage
     */
    select?: StageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Stage
     */
    omit?: StageOmit<ExtArgs> | null
    /**
     * The data used to create many Stages.
     */
    data: StageCreateManyInput | StageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Stage update
   */
  export type StageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stage
     */
    select?: StageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stage
     */
    omit?: StageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageInclude<ExtArgs> | null
    /**
     * The data needed to update a Stage.
     */
    data: XOR<StageUpdateInput, StageUncheckedUpdateInput>
    /**
     * Choose, which Stage to update.
     */
    where: StageWhereUniqueInput
  }

  /**
   * Stage updateMany
   */
  export type StageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Stages.
     */
    data: XOR<StageUpdateManyMutationInput, StageUncheckedUpdateManyInput>
    /**
     * Filter which Stages to update
     */
    where?: StageWhereInput
    /**
     * Limit how many Stages to update.
     */
    limit?: number
  }

  /**
   * Stage updateManyAndReturn
   */
  export type StageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stage
     */
    select?: StageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Stage
     */
    omit?: StageOmit<ExtArgs> | null
    /**
     * The data used to update Stages.
     */
    data: XOR<StageUpdateManyMutationInput, StageUncheckedUpdateManyInput>
    /**
     * Filter which Stages to update
     */
    where?: StageWhereInput
    /**
     * Limit how many Stages to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Stage upsert
   */
  export type StageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stage
     */
    select?: StageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stage
     */
    omit?: StageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageInclude<ExtArgs> | null
    /**
     * The filter to search for the Stage to update in case it exists.
     */
    where: StageWhereUniqueInput
    /**
     * In case the Stage found by the `where` argument doesn't exist, create a new Stage with this data.
     */
    create: XOR<StageCreateInput, StageUncheckedCreateInput>
    /**
     * In case the Stage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StageUpdateInput, StageUncheckedUpdateInput>
  }

  /**
   * Stage delete
   */
  export type StageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stage
     */
    select?: StageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stage
     */
    omit?: StageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageInclude<ExtArgs> | null
    /**
     * Filter which Stage to delete.
     */
    where: StageWhereUniqueInput
  }

  /**
   * Stage deleteMany
   */
  export type StageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Stages to delete
     */
    where?: StageWhereInput
    /**
     * Limit how many Stages to delete.
     */
    limit?: number
  }

  /**
   * Stage without action
   */
  export type StageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stage
     */
    select?: StageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stage
     */
    omit?: StageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageInclude<ExtArgs> | null
  }


  /**
   * Model CandidatureScore
   */

  export type AggregateCandidatureScore = {
    _count: CandidatureScoreCountAggregateOutputType | null
    _avg: CandidatureScoreAvgAggregateOutputType | null
    _sum: CandidatureScoreSumAggregateOutputType | null
    _min: CandidatureScoreMinAggregateOutputType | null
    _max: CandidatureScoreMaxAggregateOutputType | null
  }

  export type CandidatureScoreAvgAggregateOutputType = {
    scorePertinence: number | null
  }

  export type CandidatureScoreSumAggregateOutputType = {
    scorePertinence: number | null
  }

  export type CandidatureScoreMinAggregateOutputType = {
    id: string | null
    stagiaireId: string | null
    scorePertinence: number | null
    dateEvaluation: Date | null
  }

  export type CandidatureScoreMaxAggregateOutputType = {
    id: string | null
    stagiaireId: string | null
    scorePertinence: number | null
    dateEvaluation: Date | null
  }

  export type CandidatureScoreCountAggregateOutputType = {
    id: number
    stagiaireId: number
    scorePertinence: number
    dateEvaluation: number
    _all: number
  }


  export type CandidatureScoreAvgAggregateInputType = {
    scorePertinence?: true
  }

  export type CandidatureScoreSumAggregateInputType = {
    scorePertinence?: true
  }

  export type CandidatureScoreMinAggregateInputType = {
    id?: true
    stagiaireId?: true
    scorePertinence?: true
    dateEvaluation?: true
  }

  export type CandidatureScoreMaxAggregateInputType = {
    id?: true
    stagiaireId?: true
    scorePertinence?: true
    dateEvaluation?: true
  }

  export type CandidatureScoreCountAggregateInputType = {
    id?: true
    stagiaireId?: true
    scorePertinence?: true
    dateEvaluation?: true
    _all?: true
  }

  export type CandidatureScoreAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CandidatureScore to aggregate.
     */
    where?: CandidatureScoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CandidatureScores to fetch.
     */
    orderBy?: CandidatureScoreOrderByWithRelationInput | CandidatureScoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CandidatureScoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CandidatureScores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CandidatureScores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CandidatureScores
    **/
    _count?: true | CandidatureScoreCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CandidatureScoreAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CandidatureScoreSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CandidatureScoreMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CandidatureScoreMaxAggregateInputType
  }

  export type GetCandidatureScoreAggregateType<T extends CandidatureScoreAggregateArgs> = {
        [P in keyof T & keyof AggregateCandidatureScore]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCandidatureScore[P]>
      : GetScalarType<T[P], AggregateCandidatureScore[P]>
  }




  export type CandidatureScoreGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CandidatureScoreWhereInput
    orderBy?: CandidatureScoreOrderByWithAggregationInput | CandidatureScoreOrderByWithAggregationInput[]
    by: CandidatureScoreScalarFieldEnum[] | CandidatureScoreScalarFieldEnum
    having?: CandidatureScoreScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CandidatureScoreCountAggregateInputType | true
    _avg?: CandidatureScoreAvgAggregateInputType
    _sum?: CandidatureScoreSumAggregateInputType
    _min?: CandidatureScoreMinAggregateInputType
    _max?: CandidatureScoreMaxAggregateInputType
  }

  export type CandidatureScoreGroupByOutputType = {
    id: string
    stagiaireId: string
    scorePertinence: number
    dateEvaluation: Date
    _count: CandidatureScoreCountAggregateOutputType | null
    _avg: CandidatureScoreAvgAggregateOutputType | null
    _sum: CandidatureScoreSumAggregateOutputType | null
    _min: CandidatureScoreMinAggregateOutputType | null
    _max: CandidatureScoreMaxAggregateOutputType | null
  }

  type GetCandidatureScoreGroupByPayload<T extends CandidatureScoreGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CandidatureScoreGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CandidatureScoreGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CandidatureScoreGroupByOutputType[P]>
            : GetScalarType<T[P], CandidatureScoreGroupByOutputType[P]>
        }
      >
    >


  export type CandidatureScoreSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    stagiaireId?: boolean
    scorePertinence?: boolean
    dateEvaluation?: boolean
    stagiaire?: boolean | StagiaireDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["candidatureScore"]>

  export type CandidatureScoreSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    stagiaireId?: boolean
    scorePertinence?: boolean
    dateEvaluation?: boolean
    stagiaire?: boolean | StagiaireDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["candidatureScore"]>

  export type CandidatureScoreSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    stagiaireId?: boolean
    scorePertinence?: boolean
    dateEvaluation?: boolean
    stagiaire?: boolean | StagiaireDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["candidatureScore"]>

  export type CandidatureScoreSelectScalar = {
    id?: boolean
    stagiaireId?: boolean
    scorePertinence?: boolean
    dateEvaluation?: boolean
  }

  export type CandidatureScoreOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "stagiaireId" | "scorePertinence" | "dateEvaluation", ExtArgs["result"]["candidatureScore"]>
  export type CandidatureScoreInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stagiaire?: boolean | StagiaireDefaultArgs<ExtArgs>
  }
  export type CandidatureScoreIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stagiaire?: boolean | StagiaireDefaultArgs<ExtArgs>
  }
  export type CandidatureScoreIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stagiaire?: boolean | StagiaireDefaultArgs<ExtArgs>
  }

  export type $CandidatureScorePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CandidatureScore"
    objects: {
      stagiaire: Prisma.$StagiairePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      stagiaireId: string
      scorePertinence: number
      dateEvaluation: Date
    }, ExtArgs["result"]["candidatureScore"]>
    composites: {}
  }

  type CandidatureScoreGetPayload<S extends boolean | null | undefined | CandidatureScoreDefaultArgs> = $Result.GetResult<Prisma.$CandidatureScorePayload, S>

  type CandidatureScoreCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CandidatureScoreFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CandidatureScoreCountAggregateInputType | true
    }

  export interface CandidatureScoreDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CandidatureScore'], meta: { name: 'CandidatureScore' } }
    /**
     * Find zero or one CandidatureScore that matches the filter.
     * @param {CandidatureScoreFindUniqueArgs} args - Arguments to find a CandidatureScore
     * @example
     * // Get one CandidatureScore
     * const candidatureScore = await prisma.candidatureScore.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CandidatureScoreFindUniqueArgs>(args: SelectSubset<T, CandidatureScoreFindUniqueArgs<ExtArgs>>): Prisma__CandidatureScoreClient<$Result.GetResult<Prisma.$CandidatureScorePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CandidatureScore that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CandidatureScoreFindUniqueOrThrowArgs} args - Arguments to find a CandidatureScore
     * @example
     * // Get one CandidatureScore
     * const candidatureScore = await prisma.candidatureScore.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CandidatureScoreFindUniqueOrThrowArgs>(args: SelectSubset<T, CandidatureScoreFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CandidatureScoreClient<$Result.GetResult<Prisma.$CandidatureScorePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CandidatureScore that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidatureScoreFindFirstArgs} args - Arguments to find a CandidatureScore
     * @example
     * // Get one CandidatureScore
     * const candidatureScore = await prisma.candidatureScore.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CandidatureScoreFindFirstArgs>(args?: SelectSubset<T, CandidatureScoreFindFirstArgs<ExtArgs>>): Prisma__CandidatureScoreClient<$Result.GetResult<Prisma.$CandidatureScorePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CandidatureScore that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidatureScoreFindFirstOrThrowArgs} args - Arguments to find a CandidatureScore
     * @example
     * // Get one CandidatureScore
     * const candidatureScore = await prisma.candidatureScore.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CandidatureScoreFindFirstOrThrowArgs>(args?: SelectSubset<T, CandidatureScoreFindFirstOrThrowArgs<ExtArgs>>): Prisma__CandidatureScoreClient<$Result.GetResult<Prisma.$CandidatureScorePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CandidatureScores that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidatureScoreFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CandidatureScores
     * const candidatureScores = await prisma.candidatureScore.findMany()
     * 
     * // Get first 10 CandidatureScores
     * const candidatureScores = await prisma.candidatureScore.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const candidatureScoreWithIdOnly = await prisma.candidatureScore.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CandidatureScoreFindManyArgs>(args?: SelectSubset<T, CandidatureScoreFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CandidatureScorePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CandidatureScore.
     * @param {CandidatureScoreCreateArgs} args - Arguments to create a CandidatureScore.
     * @example
     * // Create one CandidatureScore
     * const CandidatureScore = await prisma.candidatureScore.create({
     *   data: {
     *     // ... data to create a CandidatureScore
     *   }
     * })
     * 
     */
    create<T extends CandidatureScoreCreateArgs>(args: SelectSubset<T, CandidatureScoreCreateArgs<ExtArgs>>): Prisma__CandidatureScoreClient<$Result.GetResult<Prisma.$CandidatureScorePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CandidatureScores.
     * @param {CandidatureScoreCreateManyArgs} args - Arguments to create many CandidatureScores.
     * @example
     * // Create many CandidatureScores
     * const candidatureScore = await prisma.candidatureScore.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CandidatureScoreCreateManyArgs>(args?: SelectSubset<T, CandidatureScoreCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CandidatureScores and returns the data saved in the database.
     * @param {CandidatureScoreCreateManyAndReturnArgs} args - Arguments to create many CandidatureScores.
     * @example
     * // Create many CandidatureScores
     * const candidatureScore = await prisma.candidatureScore.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CandidatureScores and only return the `id`
     * const candidatureScoreWithIdOnly = await prisma.candidatureScore.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CandidatureScoreCreateManyAndReturnArgs>(args?: SelectSubset<T, CandidatureScoreCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CandidatureScorePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CandidatureScore.
     * @param {CandidatureScoreDeleteArgs} args - Arguments to delete one CandidatureScore.
     * @example
     * // Delete one CandidatureScore
     * const CandidatureScore = await prisma.candidatureScore.delete({
     *   where: {
     *     // ... filter to delete one CandidatureScore
     *   }
     * })
     * 
     */
    delete<T extends CandidatureScoreDeleteArgs>(args: SelectSubset<T, CandidatureScoreDeleteArgs<ExtArgs>>): Prisma__CandidatureScoreClient<$Result.GetResult<Prisma.$CandidatureScorePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CandidatureScore.
     * @param {CandidatureScoreUpdateArgs} args - Arguments to update one CandidatureScore.
     * @example
     * // Update one CandidatureScore
     * const candidatureScore = await prisma.candidatureScore.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CandidatureScoreUpdateArgs>(args: SelectSubset<T, CandidatureScoreUpdateArgs<ExtArgs>>): Prisma__CandidatureScoreClient<$Result.GetResult<Prisma.$CandidatureScorePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CandidatureScores.
     * @param {CandidatureScoreDeleteManyArgs} args - Arguments to filter CandidatureScores to delete.
     * @example
     * // Delete a few CandidatureScores
     * const { count } = await prisma.candidatureScore.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CandidatureScoreDeleteManyArgs>(args?: SelectSubset<T, CandidatureScoreDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CandidatureScores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidatureScoreUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CandidatureScores
     * const candidatureScore = await prisma.candidatureScore.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CandidatureScoreUpdateManyArgs>(args: SelectSubset<T, CandidatureScoreUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CandidatureScores and returns the data updated in the database.
     * @param {CandidatureScoreUpdateManyAndReturnArgs} args - Arguments to update many CandidatureScores.
     * @example
     * // Update many CandidatureScores
     * const candidatureScore = await prisma.candidatureScore.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CandidatureScores and only return the `id`
     * const candidatureScoreWithIdOnly = await prisma.candidatureScore.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CandidatureScoreUpdateManyAndReturnArgs>(args: SelectSubset<T, CandidatureScoreUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CandidatureScorePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CandidatureScore.
     * @param {CandidatureScoreUpsertArgs} args - Arguments to update or create a CandidatureScore.
     * @example
     * // Update or create a CandidatureScore
     * const candidatureScore = await prisma.candidatureScore.upsert({
     *   create: {
     *     // ... data to create a CandidatureScore
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CandidatureScore we want to update
     *   }
     * })
     */
    upsert<T extends CandidatureScoreUpsertArgs>(args: SelectSubset<T, CandidatureScoreUpsertArgs<ExtArgs>>): Prisma__CandidatureScoreClient<$Result.GetResult<Prisma.$CandidatureScorePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CandidatureScores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidatureScoreCountArgs} args - Arguments to filter CandidatureScores to count.
     * @example
     * // Count the number of CandidatureScores
     * const count = await prisma.candidatureScore.count({
     *   where: {
     *     // ... the filter for the CandidatureScores we want to count
     *   }
     * })
    **/
    count<T extends CandidatureScoreCountArgs>(
      args?: Subset<T, CandidatureScoreCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CandidatureScoreCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CandidatureScore.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidatureScoreAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CandidatureScoreAggregateArgs>(args: Subset<T, CandidatureScoreAggregateArgs>): Prisma.PrismaPromise<GetCandidatureScoreAggregateType<T>>

    /**
     * Group by CandidatureScore.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidatureScoreGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CandidatureScoreGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CandidatureScoreGroupByArgs['orderBy'] }
        : { orderBy?: CandidatureScoreGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CandidatureScoreGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCandidatureScoreGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CandidatureScore model
   */
  readonly fields: CandidatureScoreFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CandidatureScore.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CandidatureScoreClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    stagiaire<T extends StagiaireDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StagiaireDefaultArgs<ExtArgs>>): Prisma__StagiaireClient<$Result.GetResult<Prisma.$StagiairePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CandidatureScore model
   */
  interface CandidatureScoreFieldRefs {
    readonly id: FieldRef<"CandidatureScore", 'String'>
    readonly stagiaireId: FieldRef<"CandidatureScore", 'String'>
    readonly scorePertinence: FieldRef<"CandidatureScore", 'Float'>
    readonly dateEvaluation: FieldRef<"CandidatureScore", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CandidatureScore findUnique
   */
  export type CandidatureScoreFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidatureScore
     */
    select?: CandidatureScoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CandidatureScore
     */
    omit?: CandidatureScoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidatureScoreInclude<ExtArgs> | null
    /**
     * Filter, which CandidatureScore to fetch.
     */
    where: CandidatureScoreWhereUniqueInput
  }

  /**
   * CandidatureScore findUniqueOrThrow
   */
  export type CandidatureScoreFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidatureScore
     */
    select?: CandidatureScoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CandidatureScore
     */
    omit?: CandidatureScoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidatureScoreInclude<ExtArgs> | null
    /**
     * Filter, which CandidatureScore to fetch.
     */
    where: CandidatureScoreWhereUniqueInput
  }

  /**
   * CandidatureScore findFirst
   */
  export type CandidatureScoreFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidatureScore
     */
    select?: CandidatureScoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CandidatureScore
     */
    omit?: CandidatureScoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidatureScoreInclude<ExtArgs> | null
    /**
     * Filter, which CandidatureScore to fetch.
     */
    where?: CandidatureScoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CandidatureScores to fetch.
     */
    orderBy?: CandidatureScoreOrderByWithRelationInput | CandidatureScoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CandidatureScores.
     */
    cursor?: CandidatureScoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CandidatureScores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CandidatureScores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CandidatureScores.
     */
    distinct?: CandidatureScoreScalarFieldEnum | CandidatureScoreScalarFieldEnum[]
  }

  /**
   * CandidatureScore findFirstOrThrow
   */
  export type CandidatureScoreFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidatureScore
     */
    select?: CandidatureScoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CandidatureScore
     */
    omit?: CandidatureScoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidatureScoreInclude<ExtArgs> | null
    /**
     * Filter, which CandidatureScore to fetch.
     */
    where?: CandidatureScoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CandidatureScores to fetch.
     */
    orderBy?: CandidatureScoreOrderByWithRelationInput | CandidatureScoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CandidatureScores.
     */
    cursor?: CandidatureScoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CandidatureScores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CandidatureScores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CandidatureScores.
     */
    distinct?: CandidatureScoreScalarFieldEnum | CandidatureScoreScalarFieldEnum[]
  }

  /**
   * CandidatureScore findMany
   */
  export type CandidatureScoreFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidatureScore
     */
    select?: CandidatureScoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CandidatureScore
     */
    omit?: CandidatureScoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidatureScoreInclude<ExtArgs> | null
    /**
     * Filter, which CandidatureScores to fetch.
     */
    where?: CandidatureScoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CandidatureScores to fetch.
     */
    orderBy?: CandidatureScoreOrderByWithRelationInput | CandidatureScoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CandidatureScores.
     */
    cursor?: CandidatureScoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CandidatureScores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CandidatureScores.
     */
    skip?: number
    distinct?: CandidatureScoreScalarFieldEnum | CandidatureScoreScalarFieldEnum[]
  }

  /**
   * CandidatureScore create
   */
  export type CandidatureScoreCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidatureScore
     */
    select?: CandidatureScoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CandidatureScore
     */
    omit?: CandidatureScoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidatureScoreInclude<ExtArgs> | null
    /**
     * The data needed to create a CandidatureScore.
     */
    data: XOR<CandidatureScoreCreateInput, CandidatureScoreUncheckedCreateInput>
  }

  /**
   * CandidatureScore createMany
   */
  export type CandidatureScoreCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CandidatureScores.
     */
    data: CandidatureScoreCreateManyInput | CandidatureScoreCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CandidatureScore createManyAndReturn
   */
  export type CandidatureScoreCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidatureScore
     */
    select?: CandidatureScoreSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CandidatureScore
     */
    omit?: CandidatureScoreOmit<ExtArgs> | null
    /**
     * The data used to create many CandidatureScores.
     */
    data: CandidatureScoreCreateManyInput | CandidatureScoreCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidatureScoreIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CandidatureScore update
   */
  export type CandidatureScoreUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidatureScore
     */
    select?: CandidatureScoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CandidatureScore
     */
    omit?: CandidatureScoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidatureScoreInclude<ExtArgs> | null
    /**
     * The data needed to update a CandidatureScore.
     */
    data: XOR<CandidatureScoreUpdateInput, CandidatureScoreUncheckedUpdateInput>
    /**
     * Choose, which CandidatureScore to update.
     */
    where: CandidatureScoreWhereUniqueInput
  }

  /**
   * CandidatureScore updateMany
   */
  export type CandidatureScoreUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CandidatureScores.
     */
    data: XOR<CandidatureScoreUpdateManyMutationInput, CandidatureScoreUncheckedUpdateManyInput>
    /**
     * Filter which CandidatureScores to update
     */
    where?: CandidatureScoreWhereInput
    /**
     * Limit how many CandidatureScores to update.
     */
    limit?: number
  }

  /**
   * CandidatureScore updateManyAndReturn
   */
  export type CandidatureScoreUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidatureScore
     */
    select?: CandidatureScoreSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CandidatureScore
     */
    omit?: CandidatureScoreOmit<ExtArgs> | null
    /**
     * The data used to update CandidatureScores.
     */
    data: XOR<CandidatureScoreUpdateManyMutationInput, CandidatureScoreUncheckedUpdateManyInput>
    /**
     * Filter which CandidatureScores to update
     */
    where?: CandidatureScoreWhereInput
    /**
     * Limit how many CandidatureScores to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidatureScoreIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CandidatureScore upsert
   */
  export type CandidatureScoreUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidatureScore
     */
    select?: CandidatureScoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CandidatureScore
     */
    omit?: CandidatureScoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidatureScoreInclude<ExtArgs> | null
    /**
     * The filter to search for the CandidatureScore to update in case it exists.
     */
    where: CandidatureScoreWhereUniqueInput
    /**
     * In case the CandidatureScore found by the `where` argument doesn't exist, create a new CandidatureScore with this data.
     */
    create: XOR<CandidatureScoreCreateInput, CandidatureScoreUncheckedCreateInput>
    /**
     * In case the CandidatureScore was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CandidatureScoreUpdateInput, CandidatureScoreUncheckedUpdateInput>
  }

  /**
   * CandidatureScore delete
   */
  export type CandidatureScoreDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidatureScore
     */
    select?: CandidatureScoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CandidatureScore
     */
    omit?: CandidatureScoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidatureScoreInclude<ExtArgs> | null
    /**
     * Filter which CandidatureScore to delete.
     */
    where: CandidatureScoreWhereUniqueInput
  }

  /**
   * CandidatureScore deleteMany
   */
  export type CandidatureScoreDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CandidatureScores to delete
     */
    where?: CandidatureScoreWhereInput
    /**
     * Limit how many CandidatureScores to delete.
     */
    limit?: number
  }

  /**
   * CandidatureScore without action
   */
  export type CandidatureScoreDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidatureScore
     */
    select?: CandidatureScoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CandidatureScore
     */
    omit?: CandidatureScoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidatureScoreInclude<ExtArgs> | null
  }


  /**
   * Model SuggestionAffectation
   */

  export type AggregateSuggestionAffectation = {
    _count: SuggestionAffectationCountAggregateOutputType | null
    _avg: SuggestionAffectationAvgAggregateOutputType | null
    _sum: SuggestionAffectationSumAggregateOutputType | null
    _min: SuggestionAffectationMinAggregateOutputType | null
    _max: SuggestionAffectationMaxAggregateOutputType | null
  }

  export type SuggestionAffectationAvgAggregateOutputType = {
    scoreMatch: number | null
  }

  export type SuggestionAffectationSumAggregateOutputType = {
    scoreMatch: number | null
  }

  export type SuggestionAffectationMinAggregateOutputType = {
    id: string | null
    stagiaireId: string | null
    tuteurId: string | null
    scoreMatch: number | null
    createdAt: Date | null
  }

  export type SuggestionAffectationMaxAggregateOutputType = {
    id: string | null
    stagiaireId: string | null
    tuteurId: string | null
    scoreMatch: number | null
    createdAt: Date | null
  }

  export type SuggestionAffectationCountAggregateOutputType = {
    id: number
    stagiaireId: number
    tuteurId: number
    scoreMatch: number
    createdAt: number
    _all: number
  }


  export type SuggestionAffectationAvgAggregateInputType = {
    scoreMatch?: true
  }

  export type SuggestionAffectationSumAggregateInputType = {
    scoreMatch?: true
  }

  export type SuggestionAffectationMinAggregateInputType = {
    id?: true
    stagiaireId?: true
    tuteurId?: true
    scoreMatch?: true
    createdAt?: true
  }

  export type SuggestionAffectationMaxAggregateInputType = {
    id?: true
    stagiaireId?: true
    tuteurId?: true
    scoreMatch?: true
    createdAt?: true
  }

  export type SuggestionAffectationCountAggregateInputType = {
    id?: true
    stagiaireId?: true
    tuteurId?: true
    scoreMatch?: true
    createdAt?: true
    _all?: true
  }

  export type SuggestionAffectationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SuggestionAffectation to aggregate.
     */
    where?: SuggestionAffectationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SuggestionAffectations to fetch.
     */
    orderBy?: SuggestionAffectationOrderByWithRelationInput | SuggestionAffectationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SuggestionAffectationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SuggestionAffectations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SuggestionAffectations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SuggestionAffectations
    **/
    _count?: true | SuggestionAffectationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SuggestionAffectationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SuggestionAffectationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SuggestionAffectationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SuggestionAffectationMaxAggregateInputType
  }

  export type GetSuggestionAffectationAggregateType<T extends SuggestionAffectationAggregateArgs> = {
        [P in keyof T & keyof AggregateSuggestionAffectation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSuggestionAffectation[P]>
      : GetScalarType<T[P], AggregateSuggestionAffectation[P]>
  }




  export type SuggestionAffectationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SuggestionAffectationWhereInput
    orderBy?: SuggestionAffectationOrderByWithAggregationInput | SuggestionAffectationOrderByWithAggregationInput[]
    by: SuggestionAffectationScalarFieldEnum[] | SuggestionAffectationScalarFieldEnum
    having?: SuggestionAffectationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SuggestionAffectationCountAggregateInputType | true
    _avg?: SuggestionAffectationAvgAggregateInputType
    _sum?: SuggestionAffectationSumAggregateInputType
    _min?: SuggestionAffectationMinAggregateInputType
    _max?: SuggestionAffectationMaxAggregateInputType
  }

  export type SuggestionAffectationGroupByOutputType = {
    id: string
    stagiaireId: string
    tuteurId: string
    scoreMatch: number
    createdAt: Date
    _count: SuggestionAffectationCountAggregateOutputType | null
    _avg: SuggestionAffectationAvgAggregateOutputType | null
    _sum: SuggestionAffectationSumAggregateOutputType | null
    _min: SuggestionAffectationMinAggregateOutputType | null
    _max: SuggestionAffectationMaxAggregateOutputType | null
  }

  type GetSuggestionAffectationGroupByPayload<T extends SuggestionAffectationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SuggestionAffectationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SuggestionAffectationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SuggestionAffectationGroupByOutputType[P]>
            : GetScalarType<T[P], SuggestionAffectationGroupByOutputType[P]>
        }
      >
    >


  export type SuggestionAffectationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    stagiaireId?: boolean
    tuteurId?: boolean
    scoreMatch?: boolean
    createdAt?: boolean
    stagiaire?: boolean | StagiaireDefaultArgs<ExtArgs>
    tuteur?: boolean | TuteurDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["suggestionAffectation"]>

  export type SuggestionAffectationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    stagiaireId?: boolean
    tuteurId?: boolean
    scoreMatch?: boolean
    createdAt?: boolean
    stagiaire?: boolean | StagiaireDefaultArgs<ExtArgs>
    tuteur?: boolean | TuteurDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["suggestionAffectation"]>

  export type SuggestionAffectationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    stagiaireId?: boolean
    tuteurId?: boolean
    scoreMatch?: boolean
    createdAt?: boolean
    stagiaire?: boolean | StagiaireDefaultArgs<ExtArgs>
    tuteur?: boolean | TuteurDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["suggestionAffectation"]>

  export type SuggestionAffectationSelectScalar = {
    id?: boolean
    stagiaireId?: boolean
    tuteurId?: boolean
    scoreMatch?: boolean
    createdAt?: boolean
  }

  export type SuggestionAffectationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "stagiaireId" | "tuteurId" | "scoreMatch" | "createdAt", ExtArgs["result"]["suggestionAffectation"]>
  export type SuggestionAffectationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stagiaire?: boolean | StagiaireDefaultArgs<ExtArgs>
    tuteur?: boolean | TuteurDefaultArgs<ExtArgs>
  }
  export type SuggestionAffectationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stagiaire?: boolean | StagiaireDefaultArgs<ExtArgs>
    tuteur?: boolean | TuteurDefaultArgs<ExtArgs>
  }
  export type SuggestionAffectationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stagiaire?: boolean | StagiaireDefaultArgs<ExtArgs>
    tuteur?: boolean | TuteurDefaultArgs<ExtArgs>
  }

  export type $SuggestionAffectationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SuggestionAffectation"
    objects: {
      stagiaire: Prisma.$StagiairePayload<ExtArgs>
      tuteur: Prisma.$TuteurPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      stagiaireId: string
      tuteurId: string
      scoreMatch: number
      createdAt: Date
    }, ExtArgs["result"]["suggestionAffectation"]>
    composites: {}
  }

  type SuggestionAffectationGetPayload<S extends boolean | null | undefined | SuggestionAffectationDefaultArgs> = $Result.GetResult<Prisma.$SuggestionAffectationPayload, S>

  type SuggestionAffectationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SuggestionAffectationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SuggestionAffectationCountAggregateInputType | true
    }

  export interface SuggestionAffectationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SuggestionAffectation'], meta: { name: 'SuggestionAffectation' } }
    /**
     * Find zero or one SuggestionAffectation that matches the filter.
     * @param {SuggestionAffectationFindUniqueArgs} args - Arguments to find a SuggestionAffectation
     * @example
     * // Get one SuggestionAffectation
     * const suggestionAffectation = await prisma.suggestionAffectation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SuggestionAffectationFindUniqueArgs>(args: SelectSubset<T, SuggestionAffectationFindUniqueArgs<ExtArgs>>): Prisma__SuggestionAffectationClient<$Result.GetResult<Prisma.$SuggestionAffectationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SuggestionAffectation that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SuggestionAffectationFindUniqueOrThrowArgs} args - Arguments to find a SuggestionAffectation
     * @example
     * // Get one SuggestionAffectation
     * const suggestionAffectation = await prisma.suggestionAffectation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SuggestionAffectationFindUniqueOrThrowArgs>(args: SelectSubset<T, SuggestionAffectationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SuggestionAffectationClient<$Result.GetResult<Prisma.$SuggestionAffectationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SuggestionAffectation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuggestionAffectationFindFirstArgs} args - Arguments to find a SuggestionAffectation
     * @example
     * // Get one SuggestionAffectation
     * const suggestionAffectation = await prisma.suggestionAffectation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SuggestionAffectationFindFirstArgs>(args?: SelectSubset<T, SuggestionAffectationFindFirstArgs<ExtArgs>>): Prisma__SuggestionAffectationClient<$Result.GetResult<Prisma.$SuggestionAffectationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SuggestionAffectation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuggestionAffectationFindFirstOrThrowArgs} args - Arguments to find a SuggestionAffectation
     * @example
     * // Get one SuggestionAffectation
     * const suggestionAffectation = await prisma.suggestionAffectation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SuggestionAffectationFindFirstOrThrowArgs>(args?: SelectSubset<T, SuggestionAffectationFindFirstOrThrowArgs<ExtArgs>>): Prisma__SuggestionAffectationClient<$Result.GetResult<Prisma.$SuggestionAffectationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SuggestionAffectations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuggestionAffectationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SuggestionAffectations
     * const suggestionAffectations = await prisma.suggestionAffectation.findMany()
     * 
     * // Get first 10 SuggestionAffectations
     * const suggestionAffectations = await prisma.suggestionAffectation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const suggestionAffectationWithIdOnly = await prisma.suggestionAffectation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SuggestionAffectationFindManyArgs>(args?: SelectSubset<T, SuggestionAffectationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SuggestionAffectationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SuggestionAffectation.
     * @param {SuggestionAffectationCreateArgs} args - Arguments to create a SuggestionAffectation.
     * @example
     * // Create one SuggestionAffectation
     * const SuggestionAffectation = await prisma.suggestionAffectation.create({
     *   data: {
     *     // ... data to create a SuggestionAffectation
     *   }
     * })
     * 
     */
    create<T extends SuggestionAffectationCreateArgs>(args: SelectSubset<T, SuggestionAffectationCreateArgs<ExtArgs>>): Prisma__SuggestionAffectationClient<$Result.GetResult<Prisma.$SuggestionAffectationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SuggestionAffectations.
     * @param {SuggestionAffectationCreateManyArgs} args - Arguments to create many SuggestionAffectations.
     * @example
     * // Create many SuggestionAffectations
     * const suggestionAffectation = await prisma.suggestionAffectation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SuggestionAffectationCreateManyArgs>(args?: SelectSubset<T, SuggestionAffectationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SuggestionAffectations and returns the data saved in the database.
     * @param {SuggestionAffectationCreateManyAndReturnArgs} args - Arguments to create many SuggestionAffectations.
     * @example
     * // Create many SuggestionAffectations
     * const suggestionAffectation = await prisma.suggestionAffectation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SuggestionAffectations and only return the `id`
     * const suggestionAffectationWithIdOnly = await prisma.suggestionAffectation.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SuggestionAffectationCreateManyAndReturnArgs>(args?: SelectSubset<T, SuggestionAffectationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SuggestionAffectationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SuggestionAffectation.
     * @param {SuggestionAffectationDeleteArgs} args - Arguments to delete one SuggestionAffectation.
     * @example
     * // Delete one SuggestionAffectation
     * const SuggestionAffectation = await prisma.suggestionAffectation.delete({
     *   where: {
     *     // ... filter to delete one SuggestionAffectation
     *   }
     * })
     * 
     */
    delete<T extends SuggestionAffectationDeleteArgs>(args: SelectSubset<T, SuggestionAffectationDeleteArgs<ExtArgs>>): Prisma__SuggestionAffectationClient<$Result.GetResult<Prisma.$SuggestionAffectationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SuggestionAffectation.
     * @param {SuggestionAffectationUpdateArgs} args - Arguments to update one SuggestionAffectation.
     * @example
     * // Update one SuggestionAffectation
     * const suggestionAffectation = await prisma.suggestionAffectation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SuggestionAffectationUpdateArgs>(args: SelectSubset<T, SuggestionAffectationUpdateArgs<ExtArgs>>): Prisma__SuggestionAffectationClient<$Result.GetResult<Prisma.$SuggestionAffectationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SuggestionAffectations.
     * @param {SuggestionAffectationDeleteManyArgs} args - Arguments to filter SuggestionAffectations to delete.
     * @example
     * // Delete a few SuggestionAffectations
     * const { count } = await prisma.suggestionAffectation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SuggestionAffectationDeleteManyArgs>(args?: SelectSubset<T, SuggestionAffectationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SuggestionAffectations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuggestionAffectationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SuggestionAffectations
     * const suggestionAffectation = await prisma.suggestionAffectation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SuggestionAffectationUpdateManyArgs>(args: SelectSubset<T, SuggestionAffectationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SuggestionAffectations and returns the data updated in the database.
     * @param {SuggestionAffectationUpdateManyAndReturnArgs} args - Arguments to update many SuggestionAffectations.
     * @example
     * // Update many SuggestionAffectations
     * const suggestionAffectation = await prisma.suggestionAffectation.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SuggestionAffectations and only return the `id`
     * const suggestionAffectationWithIdOnly = await prisma.suggestionAffectation.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SuggestionAffectationUpdateManyAndReturnArgs>(args: SelectSubset<T, SuggestionAffectationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SuggestionAffectationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SuggestionAffectation.
     * @param {SuggestionAffectationUpsertArgs} args - Arguments to update or create a SuggestionAffectation.
     * @example
     * // Update or create a SuggestionAffectation
     * const suggestionAffectation = await prisma.suggestionAffectation.upsert({
     *   create: {
     *     // ... data to create a SuggestionAffectation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SuggestionAffectation we want to update
     *   }
     * })
     */
    upsert<T extends SuggestionAffectationUpsertArgs>(args: SelectSubset<T, SuggestionAffectationUpsertArgs<ExtArgs>>): Prisma__SuggestionAffectationClient<$Result.GetResult<Prisma.$SuggestionAffectationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SuggestionAffectations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuggestionAffectationCountArgs} args - Arguments to filter SuggestionAffectations to count.
     * @example
     * // Count the number of SuggestionAffectations
     * const count = await prisma.suggestionAffectation.count({
     *   where: {
     *     // ... the filter for the SuggestionAffectations we want to count
     *   }
     * })
    **/
    count<T extends SuggestionAffectationCountArgs>(
      args?: Subset<T, SuggestionAffectationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SuggestionAffectationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SuggestionAffectation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuggestionAffectationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SuggestionAffectationAggregateArgs>(args: Subset<T, SuggestionAffectationAggregateArgs>): Prisma.PrismaPromise<GetSuggestionAffectationAggregateType<T>>

    /**
     * Group by SuggestionAffectation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuggestionAffectationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SuggestionAffectationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SuggestionAffectationGroupByArgs['orderBy'] }
        : { orderBy?: SuggestionAffectationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SuggestionAffectationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSuggestionAffectationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SuggestionAffectation model
   */
  readonly fields: SuggestionAffectationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SuggestionAffectation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SuggestionAffectationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    stagiaire<T extends StagiaireDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StagiaireDefaultArgs<ExtArgs>>): Prisma__StagiaireClient<$Result.GetResult<Prisma.$StagiairePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    tuteur<T extends TuteurDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TuteurDefaultArgs<ExtArgs>>): Prisma__TuteurClient<$Result.GetResult<Prisma.$TuteurPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SuggestionAffectation model
   */
  interface SuggestionAffectationFieldRefs {
    readonly id: FieldRef<"SuggestionAffectation", 'String'>
    readonly stagiaireId: FieldRef<"SuggestionAffectation", 'String'>
    readonly tuteurId: FieldRef<"SuggestionAffectation", 'String'>
    readonly scoreMatch: FieldRef<"SuggestionAffectation", 'Float'>
    readonly createdAt: FieldRef<"SuggestionAffectation", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SuggestionAffectation findUnique
   */
  export type SuggestionAffectationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuggestionAffectation
     */
    select?: SuggestionAffectationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SuggestionAffectation
     */
    omit?: SuggestionAffectationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SuggestionAffectationInclude<ExtArgs> | null
    /**
     * Filter, which SuggestionAffectation to fetch.
     */
    where: SuggestionAffectationWhereUniqueInput
  }

  /**
   * SuggestionAffectation findUniqueOrThrow
   */
  export type SuggestionAffectationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuggestionAffectation
     */
    select?: SuggestionAffectationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SuggestionAffectation
     */
    omit?: SuggestionAffectationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SuggestionAffectationInclude<ExtArgs> | null
    /**
     * Filter, which SuggestionAffectation to fetch.
     */
    where: SuggestionAffectationWhereUniqueInput
  }

  /**
   * SuggestionAffectation findFirst
   */
  export type SuggestionAffectationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuggestionAffectation
     */
    select?: SuggestionAffectationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SuggestionAffectation
     */
    omit?: SuggestionAffectationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SuggestionAffectationInclude<ExtArgs> | null
    /**
     * Filter, which SuggestionAffectation to fetch.
     */
    where?: SuggestionAffectationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SuggestionAffectations to fetch.
     */
    orderBy?: SuggestionAffectationOrderByWithRelationInput | SuggestionAffectationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SuggestionAffectations.
     */
    cursor?: SuggestionAffectationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SuggestionAffectations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SuggestionAffectations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SuggestionAffectations.
     */
    distinct?: SuggestionAffectationScalarFieldEnum | SuggestionAffectationScalarFieldEnum[]
  }

  /**
   * SuggestionAffectation findFirstOrThrow
   */
  export type SuggestionAffectationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuggestionAffectation
     */
    select?: SuggestionAffectationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SuggestionAffectation
     */
    omit?: SuggestionAffectationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SuggestionAffectationInclude<ExtArgs> | null
    /**
     * Filter, which SuggestionAffectation to fetch.
     */
    where?: SuggestionAffectationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SuggestionAffectations to fetch.
     */
    orderBy?: SuggestionAffectationOrderByWithRelationInput | SuggestionAffectationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SuggestionAffectations.
     */
    cursor?: SuggestionAffectationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SuggestionAffectations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SuggestionAffectations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SuggestionAffectations.
     */
    distinct?: SuggestionAffectationScalarFieldEnum | SuggestionAffectationScalarFieldEnum[]
  }

  /**
   * SuggestionAffectation findMany
   */
  export type SuggestionAffectationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuggestionAffectation
     */
    select?: SuggestionAffectationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SuggestionAffectation
     */
    omit?: SuggestionAffectationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SuggestionAffectationInclude<ExtArgs> | null
    /**
     * Filter, which SuggestionAffectations to fetch.
     */
    where?: SuggestionAffectationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SuggestionAffectations to fetch.
     */
    orderBy?: SuggestionAffectationOrderByWithRelationInput | SuggestionAffectationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SuggestionAffectations.
     */
    cursor?: SuggestionAffectationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SuggestionAffectations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SuggestionAffectations.
     */
    skip?: number
    distinct?: SuggestionAffectationScalarFieldEnum | SuggestionAffectationScalarFieldEnum[]
  }

  /**
   * SuggestionAffectation create
   */
  export type SuggestionAffectationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuggestionAffectation
     */
    select?: SuggestionAffectationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SuggestionAffectation
     */
    omit?: SuggestionAffectationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SuggestionAffectationInclude<ExtArgs> | null
    /**
     * The data needed to create a SuggestionAffectation.
     */
    data: XOR<SuggestionAffectationCreateInput, SuggestionAffectationUncheckedCreateInput>
  }

  /**
   * SuggestionAffectation createMany
   */
  export type SuggestionAffectationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SuggestionAffectations.
     */
    data: SuggestionAffectationCreateManyInput | SuggestionAffectationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SuggestionAffectation createManyAndReturn
   */
  export type SuggestionAffectationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuggestionAffectation
     */
    select?: SuggestionAffectationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SuggestionAffectation
     */
    omit?: SuggestionAffectationOmit<ExtArgs> | null
    /**
     * The data used to create many SuggestionAffectations.
     */
    data: SuggestionAffectationCreateManyInput | SuggestionAffectationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SuggestionAffectationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SuggestionAffectation update
   */
  export type SuggestionAffectationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuggestionAffectation
     */
    select?: SuggestionAffectationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SuggestionAffectation
     */
    omit?: SuggestionAffectationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SuggestionAffectationInclude<ExtArgs> | null
    /**
     * The data needed to update a SuggestionAffectation.
     */
    data: XOR<SuggestionAffectationUpdateInput, SuggestionAffectationUncheckedUpdateInput>
    /**
     * Choose, which SuggestionAffectation to update.
     */
    where: SuggestionAffectationWhereUniqueInput
  }

  /**
   * SuggestionAffectation updateMany
   */
  export type SuggestionAffectationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SuggestionAffectations.
     */
    data: XOR<SuggestionAffectationUpdateManyMutationInput, SuggestionAffectationUncheckedUpdateManyInput>
    /**
     * Filter which SuggestionAffectations to update
     */
    where?: SuggestionAffectationWhereInput
    /**
     * Limit how many SuggestionAffectations to update.
     */
    limit?: number
  }

  /**
   * SuggestionAffectation updateManyAndReturn
   */
  export type SuggestionAffectationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuggestionAffectation
     */
    select?: SuggestionAffectationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SuggestionAffectation
     */
    omit?: SuggestionAffectationOmit<ExtArgs> | null
    /**
     * The data used to update SuggestionAffectations.
     */
    data: XOR<SuggestionAffectationUpdateManyMutationInput, SuggestionAffectationUncheckedUpdateManyInput>
    /**
     * Filter which SuggestionAffectations to update
     */
    where?: SuggestionAffectationWhereInput
    /**
     * Limit how many SuggestionAffectations to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SuggestionAffectationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SuggestionAffectation upsert
   */
  export type SuggestionAffectationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuggestionAffectation
     */
    select?: SuggestionAffectationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SuggestionAffectation
     */
    omit?: SuggestionAffectationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SuggestionAffectationInclude<ExtArgs> | null
    /**
     * The filter to search for the SuggestionAffectation to update in case it exists.
     */
    where: SuggestionAffectationWhereUniqueInput
    /**
     * In case the SuggestionAffectation found by the `where` argument doesn't exist, create a new SuggestionAffectation with this data.
     */
    create: XOR<SuggestionAffectationCreateInput, SuggestionAffectationUncheckedCreateInput>
    /**
     * In case the SuggestionAffectation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SuggestionAffectationUpdateInput, SuggestionAffectationUncheckedUpdateInput>
  }

  /**
   * SuggestionAffectation delete
   */
  export type SuggestionAffectationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuggestionAffectation
     */
    select?: SuggestionAffectationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SuggestionAffectation
     */
    omit?: SuggestionAffectationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SuggestionAffectationInclude<ExtArgs> | null
    /**
     * Filter which SuggestionAffectation to delete.
     */
    where: SuggestionAffectationWhereUniqueInput
  }

  /**
   * SuggestionAffectation deleteMany
   */
  export type SuggestionAffectationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SuggestionAffectations to delete
     */
    where?: SuggestionAffectationWhereInput
    /**
     * Limit how many SuggestionAffectations to delete.
     */
    limit?: number
  }

  /**
   * SuggestionAffectation without action
   */
  export type SuggestionAffectationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuggestionAffectation
     */
    select?: SuggestionAffectationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SuggestionAffectation
     */
    omit?: SuggestionAffectationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SuggestionAffectationInclude<ExtArgs> | null
  }


  /**
   * Model Message
   */

  export type AggregateMessage = {
    _count: MessageCountAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  export type MessageMinAggregateOutputType = {
    id: string | null
    expediteurId: string | null
    destinataireId: string | null
    contenu: string | null
    fichierJoint: string | null
    lu: boolean | null
    envoyeLe: Date | null
  }

  export type MessageMaxAggregateOutputType = {
    id: string | null
    expediteurId: string | null
    destinataireId: string | null
    contenu: string | null
    fichierJoint: string | null
    lu: boolean | null
    envoyeLe: Date | null
  }

  export type MessageCountAggregateOutputType = {
    id: number
    expediteurId: number
    destinataireId: number
    contenu: number
    fichierJoint: number
    lu: number
    envoyeLe: number
    _all: number
  }


  export type MessageMinAggregateInputType = {
    id?: true
    expediteurId?: true
    destinataireId?: true
    contenu?: true
    fichierJoint?: true
    lu?: true
    envoyeLe?: true
  }

  export type MessageMaxAggregateInputType = {
    id?: true
    expediteurId?: true
    destinataireId?: true
    contenu?: true
    fichierJoint?: true
    lu?: true
    envoyeLe?: true
  }

  export type MessageCountAggregateInputType = {
    id?: true
    expediteurId?: true
    destinataireId?: true
    contenu?: true
    fichierJoint?: true
    lu?: true
    envoyeLe?: true
    _all?: true
  }

  export type MessageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Message to aggregate.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Messages
    **/
    _count?: true | MessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MessageMaxAggregateInputType
  }

  export type GetMessageAggregateType<T extends MessageAggregateArgs> = {
        [P in keyof T & keyof AggregateMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMessage[P]>
      : GetScalarType<T[P], AggregateMessage[P]>
  }




  export type MessageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithAggregationInput | MessageOrderByWithAggregationInput[]
    by: MessageScalarFieldEnum[] | MessageScalarFieldEnum
    having?: MessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MessageCountAggregateInputType | true
    _min?: MessageMinAggregateInputType
    _max?: MessageMaxAggregateInputType
  }

  export type MessageGroupByOutputType = {
    id: string
    expediteurId: string
    destinataireId: string
    contenu: string
    fichierJoint: string | null
    lu: boolean
    envoyeLe: Date
    _count: MessageCountAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  type GetMessageGroupByPayload<T extends MessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MessageGroupByOutputType[P]>
            : GetScalarType<T[P], MessageGroupByOutputType[P]>
        }
      >
    >


  export type MessageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    expediteurId?: boolean
    destinataireId?: boolean
    contenu?: boolean
    fichierJoint?: boolean
    lu?: boolean
    envoyeLe?: boolean
    expediteur?: boolean | UserDefaultArgs<ExtArgs>
    destinataire?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type MessageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    expediteurId?: boolean
    destinataireId?: boolean
    contenu?: boolean
    fichierJoint?: boolean
    lu?: boolean
    envoyeLe?: boolean
    expediteur?: boolean | UserDefaultArgs<ExtArgs>
    destinataire?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type MessageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    expediteurId?: boolean
    destinataireId?: boolean
    contenu?: boolean
    fichierJoint?: boolean
    lu?: boolean
    envoyeLe?: boolean
    expediteur?: boolean | UserDefaultArgs<ExtArgs>
    destinataire?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type MessageSelectScalar = {
    id?: boolean
    expediteurId?: boolean
    destinataireId?: boolean
    contenu?: boolean
    fichierJoint?: boolean
    lu?: boolean
    envoyeLe?: boolean
  }

  export type MessageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "expediteurId" | "destinataireId" | "contenu" | "fichierJoint" | "lu" | "envoyeLe", ExtArgs["result"]["message"]>
  export type MessageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    expediteur?: boolean | UserDefaultArgs<ExtArgs>
    destinataire?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type MessageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    expediteur?: boolean | UserDefaultArgs<ExtArgs>
    destinataire?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type MessageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    expediteur?: boolean | UserDefaultArgs<ExtArgs>
    destinataire?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $MessagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Message"
    objects: {
      expediteur: Prisma.$UserPayload<ExtArgs>
      destinataire: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      expediteurId: string
      destinataireId: string
      contenu: string
      fichierJoint: string | null
      lu: boolean
      envoyeLe: Date
    }, ExtArgs["result"]["message"]>
    composites: {}
  }

  type MessageGetPayload<S extends boolean | null | undefined | MessageDefaultArgs> = $Result.GetResult<Prisma.$MessagePayload, S>

  type MessageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MessageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MessageCountAggregateInputType | true
    }

  export interface MessageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Message'], meta: { name: 'Message' } }
    /**
     * Find zero or one Message that matches the filter.
     * @param {MessageFindUniqueArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MessageFindUniqueArgs>(args: SelectSubset<T, MessageFindUniqueArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Message that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MessageFindUniqueOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MessageFindUniqueOrThrowArgs>(args: SelectSubset<T, MessageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Message that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MessageFindFirstArgs>(args?: SelectSubset<T, MessageFindFirstArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Message that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MessageFindFirstOrThrowArgs>(args?: SelectSubset<T, MessageFindFirstOrThrowArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Messages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Messages
     * const messages = await prisma.message.findMany()
     * 
     * // Get first 10 Messages
     * const messages = await prisma.message.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const messageWithIdOnly = await prisma.message.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MessageFindManyArgs>(args?: SelectSubset<T, MessageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Message.
     * @param {MessageCreateArgs} args - Arguments to create a Message.
     * @example
     * // Create one Message
     * const Message = await prisma.message.create({
     *   data: {
     *     // ... data to create a Message
     *   }
     * })
     * 
     */
    create<T extends MessageCreateArgs>(args: SelectSubset<T, MessageCreateArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Messages.
     * @param {MessageCreateManyArgs} args - Arguments to create many Messages.
     * @example
     * // Create many Messages
     * const message = await prisma.message.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MessageCreateManyArgs>(args?: SelectSubset<T, MessageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Messages and returns the data saved in the database.
     * @param {MessageCreateManyAndReturnArgs} args - Arguments to create many Messages.
     * @example
     * // Create many Messages
     * const message = await prisma.message.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Messages and only return the `id`
     * const messageWithIdOnly = await prisma.message.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MessageCreateManyAndReturnArgs>(args?: SelectSubset<T, MessageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Message.
     * @param {MessageDeleteArgs} args - Arguments to delete one Message.
     * @example
     * // Delete one Message
     * const Message = await prisma.message.delete({
     *   where: {
     *     // ... filter to delete one Message
     *   }
     * })
     * 
     */
    delete<T extends MessageDeleteArgs>(args: SelectSubset<T, MessageDeleteArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Message.
     * @param {MessageUpdateArgs} args - Arguments to update one Message.
     * @example
     * // Update one Message
     * const message = await prisma.message.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MessageUpdateArgs>(args: SelectSubset<T, MessageUpdateArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Messages.
     * @param {MessageDeleteManyArgs} args - Arguments to filter Messages to delete.
     * @example
     * // Delete a few Messages
     * const { count } = await prisma.message.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MessageDeleteManyArgs>(args?: SelectSubset<T, MessageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Messages
     * const message = await prisma.message.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MessageUpdateManyArgs>(args: SelectSubset<T, MessageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Messages and returns the data updated in the database.
     * @param {MessageUpdateManyAndReturnArgs} args - Arguments to update many Messages.
     * @example
     * // Update many Messages
     * const message = await prisma.message.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Messages and only return the `id`
     * const messageWithIdOnly = await prisma.message.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MessageUpdateManyAndReturnArgs>(args: SelectSubset<T, MessageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Message.
     * @param {MessageUpsertArgs} args - Arguments to update or create a Message.
     * @example
     * // Update or create a Message
     * const message = await prisma.message.upsert({
     *   create: {
     *     // ... data to create a Message
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Message we want to update
     *   }
     * })
     */
    upsert<T extends MessageUpsertArgs>(args: SelectSubset<T, MessageUpsertArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageCountArgs} args - Arguments to filter Messages to count.
     * @example
     * // Count the number of Messages
     * const count = await prisma.message.count({
     *   where: {
     *     // ... the filter for the Messages we want to count
     *   }
     * })
    **/
    count<T extends MessageCountArgs>(
      args?: Subset<T, MessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MessageAggregateArgs>(args: Subset<T, MessageAggregateArgs>): Prisma.PrismaPromise<GetMessageAggregateType<T>>

    /**
     * Group by Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MessageGroupByArgs['orderBy'] }
        : { orderBy?: MessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Message model
   */
  readonly fields: MessageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Message.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MessageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    expediteur<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    destinataire<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Message model
   */
  interface MessageFieldRefs {
    readonly id: FieldRef<"Message", 'String'>
    readonly expediteurId: FieldRef<"Message", 'String'>
    readonly destinataireId: FieldRef<"Message", 'String'>
    readonly contenu: FieldRef<"Message", 'String'>
    readonly fichierJoint: FieldRef<"Message", 'String'>
    readonly lu: FieldRef<"Message", 'Boolean'>
    readonly envoyeLe: FieldRef<"Message", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Message findUnique
   */
  export type MessageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message findUniqueOrThrow
   */
  export type MessageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message findFirst
   */
  export type MessageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message findFirstOrThrow
   */
  export type MessageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message findMany
   */
  export type MessageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Messages to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message create
   */
  export type MessageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The data needed to create a Message.
     */
    data: XOR<MessageCreateInput, MessageUncheckedCreateInput>
  }

  /**
   * Message createMany
   */
  export type MessageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Messages.
     */
    data: MessageCreateManyInput | MessageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Message createManyAndReturn
   */
  export type MessageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * The data used to create many Messages.
     */
    data: MessageCreateManyInput | MessageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Message update
   */
  export type MessageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The data needed to update a Message.
     */
    data: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
    /**
     * Choose, which Message to update.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message updateMany
   */
  export type MessageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Messages.
     */
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyInput>
    /**
     * Filter which Messages to update
     */
    where?: MessageWhereInput
    /**
     * Limit how many Messages to update.
     */
    limit?: number
  }

  /**
   * Message updateManyAndReturn
   */
  export type MessageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * The data used to update Messages.
     */
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyInput>
    /**
     * Filter which Messages to update
     */
    where?: MessageWhereInput
    /**
     * Limit how many Messages to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Message upsert
   */
  export type MessageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The filter to search for the Message to update in case it exists.
     */
    where: MessageWhereUniqueInput
    /**
     * In case the Message found by the `where` argument doesn't exist, create a new Message with this data.
     */
    create: XOR<MessageCreateInput, MessageUncheckedCreateInput>
    /**
     * In case the Message was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
  }

  /**
   * Message delete
   */
  export type MessageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter which Message to delete.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message deleteMany
   */
  export type MessageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Messages to delete
     */
    where?: MessageWhereInput
    /**
     * Limit how many Messages to delete.
     */
    limit?: number
  }

  /**
   * Message without action
   */
  export type MessageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
  }


  /**
   * Model ThemeTuteur
   */

  export type AggregateThemeTuteur = {
    _count: ThemeTuteurCountAggregateOutputType | null
    _min: ThemeTuteurMinAggregateOutputType | null
    _max: ThemeTuteurMaxAggregateOutputType | null
  }

  export type ThemeTuteurMinAggregateOutputType = {
    id: string | null
    tuteurId: string | null
    titre: string | null
    description: string | null
    disponible: boolean | null
  }

  export type ThemeTuteurMaxAggregateOutputType = {
    id: string | null
    tuteurId: string | null
    titre: string | null
    description: string | null
    disponible: boolean | null
  }

  export type ThemeTuteurCountAggregateOutputType = {
    id: number
    tuteurId: number
    titre: number
    description: number
    disponible: number
    _all: number
  }


  export type ThemeTuteurMinAggregateInputType = {
    id?: true
    tuteurId?: true
    titre?: true
    description?: true
    disponible?: true
  }

  export type ThemeTuteurMaxAggregateInputType = {
    id?: true
    tuteurId?: true
    titre?: true
    description?: true
    disponible?: true
  }

  export type ThemeTuteurCountAggregateInputType = {
    id?: true
    tuteurId?: true
    titre?: true
    description?: true
    disponible?: true
    _all?: true
  }

  export type ThemeTuteurAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ThemeTuteur to aggregate.
     */
    where?: ThemeTuteurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ThemeTuteurs to fetch.
     */
    orderBy?: ThemeTuteurOrderByWithRelationInput | ThemeTuteurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ThemeTuteurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ThemeTuteurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ThemeTuteurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ThemeTuteurs
    **/
    _count?: true | ThemeTuteurCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ThemeTuteurMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ThemeTuteurMaxAggregateInputType
  }

  export type GetThemeTuteurAggregateType<T extends ThemeTuteurAggregateArgs> = {
        [P in keyof T & keyof AggregateThemeTuteur]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateThemeTuteur[P]>
      : GetScalarType<T[P], AggregateThemeTuteur[P]>
  }




  export type ThemeTuteurGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ThemeTuteurWhereInput
    orderBy?: ThemeTuteurOrderByWithAggregationInput | ThemeTuteurOrderByWithAggregationInput[]
    by: ThemeTuteurScalarFieldEnum[] | ThemeTuteurScalarFieldEnum
    having?: ThemeTuteurScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ThemeTuteurCountAggregateInputType | true
    _min?: ThemeTuteurMinAggregateInputType
    _max?: ThemeTuteurMaxAggregateInputType
  }

  export type ThemeTuteurGroupByOutputType = {
    id: string
    tuteurId: string
    titre: string
    description: string | null
    disponible: boolean
    _count: ThemeTuteurCountAggregateOutputType | null
    _min: ThemeTuteurMinAggregateOutputType | null
    _max: ThemeTuteurMaxAggregateOutputType | null
  }

  type GetThemeTuteurGroupByPayload<T extends ThemeTuteurGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ThemeTuteurGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ThemeTuteurGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ThemeTuteurGroupByOutputType[P]>
            : GetScalarType<T[P], ThemeTuteurGroupByOutputType[P]>
        }
      >
    >


  export type ThemeTuteurSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tuteurId?: boolean
    titre?: boolean
    description?: boolean
    disponible?: boolean
    tuteur?: boolean | TuteurDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["themeTuteur"]>

  export type ThemeTuteurSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tuteurId?: boolean
    titre?: boolean
    description?: boolean
    disponible?: boolean
    tuteur?: boolean | TuteurDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["themeTuteur"]>

  export type ThemeTuteurSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tuteurId?: boolean
    titre?: boolean
    description?: boolean
    disponible?: boolean
    tuteur?: boolean | TuteurDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["themeTuteur"]>

  export type ThemeTuteurSelectScalar = {
    id?: boolean
    tuteurId?: boolean
    titre?: boolean
    description?: boolean
    disponible?: boolean
  }

  export type ThemeTuteurOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "tuteurId" | "titre" | "description" | "disponible", ExtArgs["result"]["themeTuteur"]>
  export type ThemeTuteurInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tuteur?: boolean | TuteurDefaultArgs<ExtArgs>
  }
  export type ThemeTuteurIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tuteur?: boolean | TuteurDefaultArgs<ExtArgs>
  }
  export type ThemeTuteurIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tuteur?: boolean | TuteurDefaultArgs<ExtArgs>
  }

  export type $ThemeTuteurPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ThemeTuteur"
    objects: {
      tuteur: Prisma.$TuteurPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tuteurId: string
      titre: string
      description: string | null
      disponible: boolean
    }, ExtArgs["result"]["themeTuteur"]>
    composites: {}
  }

  type ThemeTuteurGetPayload<S extends boolean | null | undefined | ThemeTuteurDefaultArgs> = $Result.GetResult<Prisma.$ThemeTuteurPayload, S>

  type ThemeTuteurCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ThemeTuteurFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ThemeTuteurCountAggregateInputType | true
    }

  export interface ThemeTuteurDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ThemeTuteur'], meta: { name: 'ThemeTuteur' } }
    /**
     * Find zero or one ThemeTuteur that matches the filter.
     * @param {ThemeTuteurFindUniqueArgs} args - Arguments to find a ThemeTuteur
     * @example
     * // Get one ThemeTuteur
     * const themeTuteur = await prisma.themeTuteur.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ThemeTuteurFindUniqueArgs>(args: SelectSubset<T, ThemeTuteurFindUniqueArgs<ExtArgs>>): Prisma__ThemeTuteurClient<$Result.GetResult<Prisma.$ThemeTuteurPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ThemeTuteur that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ThemeTuteurFindUniqueOrThrowArgs} args - Arguments to find a ThemeTuteur
     * @example
     * // Get one ThemeTuteur
     * const themeTuteur = await prisma.themeTuteur.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ThemeTuteurFindUniqueOrThrowArgs>(args: SelectSubset<T, ThemeTuteurFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ThemeTuteurClient<$Result.GetResult<Prisma.$ThemeTuteurPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ThemeTuteur that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeTuteurFindFirstArgs} args - Arguments to find a ThemeTuteur
     * @example
     * // Get one ThemeTuteur
     * const themeTuteur = await prisma.themeTuteur.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ThemeTuteurFindFirstArgs>(args?: SelectSubset<T, ThemeTuteurFindFirstArgs<ExtArgs>>): Prisma__ThemeTuteurClient<$Result.GetResult<Prisma.$ThemeTuteurPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ThemeTuteur that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeTuteurFindFirstOrThrowArgs} args - Arguments to find a ThemeTuteur
     * @example
     * // Get one ThemeTuteur
     * const themeTuteur = await prisma.themeTuteur.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ThemeTuteurFindFirstOrThrowArgs>(args?: SelectSubset<T, ThemeTuteurFindFirstOrThrowArgs<ExtArgs>>): Prisma__ThemeTuteurClient<$Result.GetResult<Prisma.$ThemeTuteurPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ThemeTuteurs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeTuteurFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ThemeTuteurs
     * const themeTuteurs = await prisma.themeTuteur.findMany()
     * 
     * // Get first 10 ThemeTuteurs
     * const themeTuteurs = await prisma.themeTuteur.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const themeTuteurWithIdOnly = await prisma.themeTuteur.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ThemeTuteurFindManyArgs>(args?: SelectSubset<T, ThemeTuteurFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ThemeTuteurPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ThemeTuteur.
     * @param {ThemeTuteurCreateArgs} args - Arguments to create a ThemeTuteur.
     * @example
     * // Create one ThemeTuteur
     * const ThemeTuteur = await prisma.themeTuteur.create({
     *   data: {
     *     // ... data to create a ThemeTuteur
     *   }
     * })
     * 
     */
    create<T extends ThemeTuteurCreateArgs>(args: SelectSubset<T, ThemeTuteurCreateArgs<ExtArgs>>): Prisma__ThemeTuteurClient<$Result.GetResult<Prisma.$ThemeTuteurPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ThemeTuteurs.
     * @param {ThemeTuteurCreateManyArgs} args - Arguments to create many ThemeTuteurs.
     * @example
     * // Create many ThemeTuteurs
     * const themeTuteur = await prisma.themeTuteur.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ThemeTuteurCreateManyArgs>(args?: SelectSubset<T, ThemeTuteurCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ThemeTuteurs and returns the data saved in the database.
     * @param {ThemeTuteurCreateManyAndReturnArgs} args - Arguments to create many ThemeTuteurs.
     * @example
     * // Create many ThemeTuteurs
     * const themeTuteur = await prisma.themeTuteur.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ThemeTuteurs and only return the `id`
     * const themeTuteurWithIdOnly = await prisma.themeTuteur.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ThemeTuteurCreateManyAndReturnArgs>(args?: SelectSubset<T, ThemeTuteurCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ThemeTuteurPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ThemeTuteur.
     * @param {ThemeTuteurDeleteArgs} args - Arguments to delete one ThemeTuteur.
     * @example
     * // Delete one ThemeTuteur
     * const ThemeTuteur = await prisma.themeTuteur.delete({
     *   where: {
     *     // ... filter to delete one ThemeTuteur
     *   }
     * })
     * 
     */
    delete<T extends ThemeTuteurDeleteArgs>(args: SelectSubset<T, ThemeTuteurDeleteArgs<ExtArgs>>): Prisma__ThemeTuteurClient<$Result.GetResult<Prisma.$ThemeTuteurPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ThemeTuteur.
     * @param {ThemeTuteurUpdateArgs} args - Arguments to update one ThemeTuteur.
     * @example
     * // Update one ThemeTuteur
     * const themeTuteur = await prisma.themeTuteur.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ThemeTuteurUpdateArgs>(args: SelectSubset<T, ThemeTuteurUpdateArgs<ExtArgs>>): Prisma__ThemeTuteurClient<$Result.GetResult<Prisma.$ThemeTuteurPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ThemeTuteurs.
     * @param {ThemeTuteurDeleteManyArgs} args - Arguments to filter ThemeTuteurs to delete.
     * @example
     * // Delete a few ThemeTuteurs
     * const { count } = await prisma.themeTuteur.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ThemeTuteurDeleteManyArgs>(args?: SelectSubset<T, ThemeTuteurDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ThemeTuteurs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeTuteurUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ThemeTuteurs
     * const themeTuteur = await prisma.themeTuteur.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ThemeTuteurUpdateManyArgs>(args: SelectSubset<T, ThemeTuteurUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ThemeTuteurs and returns the data updated in the database.
     * @param {ThemeTuteurUpdateManyAndReturnArgs} args - Arguments to update many ThemeTuteurs.
     * @example
     * // Update many ThemeTuteurs
     * const themeTuteur = await prisma.themeTuteur.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ThemeTuteurs and only return the `id`
     * const themeTuteurWithIdOnly = await prisma.themeTuteur.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ThemeTuteurUpdateManyAndReturnArgs>(args: SelectSubset<T, ThemeTuteurUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ThemeTuteurPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ThemeTuteur.
     * @param {ThemeTuteurUpsertArgs} args - Arguments to update or create a ThemeTuteur.
     * @example
     * // Update or create a ThemeTuteur
     * const themeTuteur = await prisma.themeTuteur.upsert({
     *   create: {
     *     // ... data to create a ThemeTuteur
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ThemeTuteur we want to update
     *   }
     * })
     */
    upsert<T extends ThemeTuteurUpsertArgs>(args: SelectSubset<T, ThemeTuteurUpsertArgs<ExtArgs>>): Prisma__ThemeTuteurClient<$Result.GetResult<Prisma.$ThemeTuteurPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ThemeTuteurs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeTuteurCountArgs} args - Arguments to filter ThemeTuteurs to count.
     * @example
     * // Count the number of ThemeTuteurs
     * const count = await prisma.themeTuteur.count({
     *   where: {
     *     // ... the filter for the ThemeTuteurs we want to count
     *   }
     * })
    **/
    count<T extends ThemeTuteurCountArgs>(
      args?: Subset<T, ThemeTuteurCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ThemeTuteurCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ThemeTuteur.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeTuteurAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ThemeTuteurAggregateArgs>(args: Subset<T, ThemeTuteurAggregateArgs>): Prisma.PrismaPromise<GetThemeTuteurAggregateType<T>>

    /**
     * Group by ThemeTuteur.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeTuteurGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ThemeTuteurGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ThemeTuteurGroupByArgs['orderBy'] }
        : { orderBy?: ThemeTuteurGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ThemeTuteurGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetThemeTuteurGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ThemeTuteur model
   */
  readonly fields: ThemeTuteurFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ThemeTuteur.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ThemeTuteurClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tuteur<T extends TuteurDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TuteurDefaultArgs<ExtArgs>>): Prisma__TuteurClient<$Result.GetResult<Prisma.$TuteurPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ThemeTuteur model
   */
  interface ThemeTuteurFieldRefs {
    readonly id: FieldRef<"ThemeTuteur", 'String'>
    readonly tuteurId: FieldRef<"ThemeTuteur", 'String'>
    readonly titre: FieldRef<"ThemeTuteur", 'String'>
    readonly description: FieldRef<"ThemeTuteur", 'String'>
    readonly disponible: FieldRef<"ThemeTuteur", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * ThemeTuteur findUnique
   */
  export type ThemeTuteurFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThemeTuteur
     */
    select?: ThemeTuteurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ThemeTuteur
     */
    omit?: ThemeTuteurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemeTuteurInclude<ExtArgs> | null
    /**
     * Filter, which ThemeTuteur to fetch.
     */
    where: ThemeTuteurWhereUniqueInput
  }

  /**
   * ThemeTuteur findUniqueOrThrow
   */
  export type ThemeTuteurFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThemeTuteur
     */
    select?: ThemeTuteurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ThemeTuteur
     */
    omit?: ThemeTuteurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemeTuteurInclude<ExtArgs> | null
    /**
     * Filter, which ThemeTuteur to fetch.
     */
    where: ThemeTuteurWhereUniqueInput
  }

  /**
   * ThemeTuteur findFirst
   */
  export type ThemeTuteurFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThemeTuteur
     */
    select?: ThemeTuteurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ThemeTuteur
     */
    omit?: ThemeTuteurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemeTuteurInclude<ExtArgs> | null
    /**
     * Filter, which ThemeTuteur to fetch.
     */
    where?: ThemeTuteurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ThemeTuteurs to fetch.
     */
    orderBy?: ThemeTuteurOrderByWithRelationInput | ThemeTuteurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ThemeTuteurs.
     */
    cursor?: ThemeTuteurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ThemeTuteurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ThemeTuteurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ThemeTuteurs.
     */
    distinct?: ThemeTuteurScalarFieldEnum | ThemeTuteurScalarFieldEnum[]
  }

  /**
   * ThemeTuteur findFirstOrThrow
   */
  export type ThemeTuteurFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThemeTuteur
     */
    select?: ThemeTuteurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ThemeTuteur
     */
    omit?: ThemeTuteurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemeTuteurInclude<ExtArgs> | null
    /**
     * Filter, which ThemeTuteur to fetch.
     */
    where?: ThemeTuteurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ThemeTuteurs to fetch.
     */
    orderBy?: ThemeTuteurOrderByWithRelationInput | ThemeTuteurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ThemeTuteurs.
     */
    cursor?: ThemeTuteurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ThemeTuteurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ThemeTuteurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ThemeTuteurs.
     */
    distinct?: ThemeTuteurScalarFieldEnum | ThemeTuteurScalarFieldEnum[]
  }

  /**
   * ThemeTuteur findMany
   */
  export type ThemeTuteurFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThemeTuteur
     */
    select?: ThemeTuteurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ThemeTuteur
     */
    omit?: ThemeTuteurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemeTuteurInclude<ExtArgs> | null
    /**
     * Filter, which ThemeTuteurs to fetch.
     */
    where?: ThemeTuteurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ThemeTuteurs to fetch.
     */
    orderBy?: ThemeTuteurOrderByWithRelationInput | ThemeTuteurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ThemeTuteurs.
     */
    cursor?: ThemeTuteurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ThemeTuteurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ThemeTuteurs.
     */
    skip?: number
    distinct?: ThemeTuteurScalarFieldEnum | ThemeTuteurScalarFieldEnum[]
  }

  /**
   * ThemeTuteur create
   */
  export type ThemeTuteurCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThemeTuteur
     */
    select?: ThemeTuteurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ThemeTuteur
     */
    omit?: ThemeTuteurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemeTuteurInclude<ExtArgs> | null
    /**
     * The data needed to create a ThemeTuteur.
     */
    data: XOR<ThemeTuteurCreateInput, ThemeTuteurUncheckedCreateInput>
  }

  /**
   * ThemeTuteur createMany
   */
  export type ThemeTuteurCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ThemeTuteurs.
     */
    data: ThemeTuteurCreateManyInput | ThemeTuteurCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ThemeTuteur createManyAndReturn
   */
  export type ThemeTuteurCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThemeTuteur
     */
    select?: ThemeTuteurSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ThemeTuteur
     */
    omit?: ThemeTuteurOmit<ExtArgs> | null
    /**
     * The data used to create many ThemeTuteurs.
     */
    data: ThemeTuteurCreateManyInput | ThemeTuteurCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemeTuteurIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ThemeTuteur update
   */
  export type ThemeTuteurUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThemeTuteur
     */
    select?: ThemeTuteurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ThemeTuteur
     */
    omit?: ThemeTuteurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemeTuteurInclude<ExtArgs> | null
    /**
     * The data needed to update a ThemeTuteur.
     */
    data: XOR<ThemeTuteurUpdateInput, ThemeTuteurUncheckedUpdateInput>
    /**
     * Choose, which ThemeTuteur to update.
     */
    where: ThemeTuteurWhereUniqueInput
  }

  /**
   * ThemeTuteur updateMany
   */
  export type ThemeTuteurUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ThemeTuteurs.
     */
    data: XOR<ThemeTuteurUpdateManyMutationInput, ThemeTuteurUncheckedUpdateManyInput>
    /**
     * Filter which ThemeTuteurs to update
     */
    where?: ThemeTuteurWhereInput
    /**
     * Limit how many ThemeTuteurs to update.
     */
    limit?: number
  }

  /**
   * ThemeTuteur updateManyAndReturn
   */
  export type ThemeTuteurUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThemeTuteur
     */
    select?: ThemeTuteurSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ThemeTuteur
     */
    omit?: ThemeTuteurOmit<ExtArgs> | null
    /**
     * The data used to update ThemeTuteurs.
     */
    data: XOR<ThemeTuteurUpdateManyMutationInput, ThemeTuteurUncheckedUpdateManyInput>
    /**
     * Filter which ThemeTuteurs to update
     */
    where?: ThemeTuteurWhereInput
    /**
     * Limit how many ThemeTuteurs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemeTuteurIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ThemeTuteur upsert
   */
  export type ThemeTuteurUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThemeTuteur
     */
    select?: ThemeTuteurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ThemeTuteur
     */
    omit?: ThemeTuteurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemeTuteurInclude<ExtArgs> | null
    /**
     * The filter to search for the ThemeTuteur to update in case it exists.
     */
    where: ThemeTuteurWhereUniqueInput
    /**
     * In case the ThemeTuteur found by the `where` argument doesn't exist, create a new ThemeTuteur with this data.
     */
    create: XOR<ThemeTuteurCreateInput, ThemeTuteurUncheckedCreateInput>
    /**
     * In case the ThemeTuteur was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ThemeTuteurUpdateInput, ThemeTuteurUncheckedUpdateInput>
  }

  /**
   * ThemeTuteur delete
   */
  export type ThemeTuteurDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThemeTuteur
     */
    select?: ThemeTuteurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ThemeTuteur
     */
    omit?: ThemeTuteurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemeTuteurInclude<ExtArgs> | null
    /**
     * Filter which ThemeTuteur to delete.
     */
    where: ThemeTuteurWhereUniqueInput
  }

  /**
   * ThemeTuteur deleteMany
   */
  export type ThemeTuteurDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ThemeTuteurs to delete
     */
    where?: ThemeTuteurWhereInput
    /**
     * Limit how many ThemeTuteurs to delete.
     */
    limit?: number
  }

  /**
   * ThemeTuteur without action
   */
  export type ThemeTuteurDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThemeTuteur
     */
    select?: ThemeTuteurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ThemeTuteur
     */
    omit?: ThemeTuteurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemeTuteurInclude<ExtArgs> | null
  }


  /**
   * Model ParametreSysteme
   */

  export type AggregateParametreSysteme = {
    _count: ParametreSystemeCountAggregateOutputType | null
    _avg: ParametreSystemeAvgAggregateOutputType | null
    _sum: ParametreSystemeSumAggregateOutputType | null
    _min: ParametreSystemeMinAggregateOutputType | null
    _max: ParametreSystemeMaxAggregateOutputType | null
  }

  export type ParametreSystemeAvgAggregateOutputType = {
    id: number | null
  }

  export type ParametreSystemeSumAggregateOutputType = {
    id: number | null
  }

  export type ParametreSystemeMinAggregateOutputType = {
    id: number | null
    cle: string | null
    valeur: string | null
  }

  export type ParametreSystemeMaxAggregateOutputType = {
    id: number | null
    cle: string | null
    valeur: string | null
  }

  export type ParametreSystemeCountAggregateOutputType = {
    id: number
    cle: number
    valeur: number
    _all: number
  }


  export type ParametreSystemeAvgAggregateInputType = {
    id?: true
  }

  export type ParametreSystemeSumAggregateInputType = {
    id?: true
  }

  export type ParametreSystemeMinAggregateInputType = {
    id?: true
    cle?: true
    valeur?: true
  }

  export type ParametreSystemeMaxAggregateInputType = {
    id?: true
    cle?: true
    valeur?: true
  }

  export type ParametreSystemeCountAggregateInputType = {
    id?: true
    cle?: true
    valeur?: true
    _all?: true
  }

  export type ParametreSystemeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ParametreSysteme to aggregate.
     */
    where?: ParametreSystemeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ParametreSystemes to fetch.
     */
    orderBy?: ParametreSystemeOrderByWithRelationInput | ParametreSystemeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ParametreSystemeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ParametreSystemes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ParametreSystemes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ParametreSystemes
    **/
    _count?: true | ParametreSystemeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ParametreSystemeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ParametreSystemeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ParametreSystemeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ParametreSystemeMaxAggregateInputType
  }

  export type GetParametreSystemeAggregateType<T extends ParametreSystemeAggregateArgs> = {
        [P in keyof T & keyof AggregateParametreSysteme]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateParametreSysteme[P]>
      : GetScalarType<T[P], AggregateParametreSysteme[P]>
  }




  export type ParametreSystemeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ParametreSystemeWhereInput
    orderBy?: ParametreSystemeOrderByWithAggregationInput | ParametreSystemeOrderByWithAggregationInput[]
    by: ParametreSystemeScalarFieldEnum[] | ParametreSystemeScalarFieldEnum
    having?: ParametreSystemeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ParametreSystemeCountAggregateInputType | true
    _avg?: ParametreSystemeAvgAggregateInputType
    _sum?: ParametreSystemeSumAggregateInputType
    _min?: ParametreSystemeMinAggregateInputType
    _max?: ParametreSystemeMaxAggregateInputType
  }

  export type ParametreSystemeGroupByOutputType = {
    id: number
    cle: string
    valeur: string
    _count: ParametreSystemeCountAggregateOutputType | null
    _avg: ParametreSystemeAvgAggregateOutputType | null
    _sum: ParametreSystemeSumAggregateOutputType | null
    _min: ParametreSystemeMinAggregateOutputType | null
    _max: ParametreSystemeMaxAggregateOutputType | null
  }

  type GetParametreSystemeGroupByPayload<T extends ParametreSystemeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ParametreSystemeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ParametreSystemeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ParametreSystemeGroupByOutputType[P]>
            : GetScalarType<T[P], ParametreSystemeGroupByOutputType[P]>
        }
      >
    >


  export type ParametreSystemeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cle?: boolean
    valeur?: boolean
  }, ExtArgs["result"]["parametreSysteme"]>

  export type ParametreSystemeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cle?: boolean
    valeur?: boolean
  }, ExtArgs["result"]["parametreSysteme"]>

  export type ParametreSystemeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cle?: boolean
    valeur?: boolean
  }, ExtArgs["result"]["parametreSysteme"]>

  export type ParametreSystemeSelectScalar = {
    id?: boolean
    cle?: boolean
    valeur?: boolean
  }

  export type ParametreSystemeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "cle" | "valeur", ExtArgs["result"]["parametreSysteme"]>

  export type $ParametreSystemePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ParametreSysteme"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      cle: string
      valeur: string
    }, ExtArgs["result"]["parametreSysteme"]>
    composites: {}
  }

  type ParametreSystemeGetPayload<S extends boolean | null | undefined | ParametreSystemeDefaultArgs> = $Result.GetResult<Prisma.$ParametreSystemePayload, S>

  type ParametreSystemeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ParametreSystemeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ParametreSystemeCountAggregateInputType | true
    }

  export interface ParametreSystemeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ParametreSysteme'], meta: { name: 'ParametreSysteme' } }
    /**
     * Find zero or one ParametreSysteme that matches the filter.
     * @param {ParametreSystemeFindUniqueArgs} args - Arguments to find a ParametreSysteme
     * @example
     * // Get one ParametreSysteme
     * const parametreSysteme = await prisma.parametreSysteme.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ParametreSystemeFindUniqueArgs>(args: SelectSubset<T, ParametreSystemeFindUniqueArgs<ExtArgs>>): Prisma__ParametreSystemeClient<$Result.GetResult<Prisma.$ParametreSystemePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ParametreSysteme that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ParametreSystemeFindUniqueOrThrowArgs} args - Arguments to find a ParametreSysteme
     * @example
     * // Get one ParametreSysteme
     * const parametreSysteme = await prisma.parametreSysteme.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ParametreSystemeFindUniqueOrThrowArgs>(args: SelectSubset<T, ParametreSystemeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ParametreSystemeClient<$Result.GetResult<Prisma.$ParametreSystemePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ParametreSysteme that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParametreSystemeFindFirstArgs} args - Arguments to find a ParametreSysteme
     * @example
     * // Get one ParametreSysteme
     * const parametreSysteme = await prisma.parametreSysteme.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ParametreSystemeFindFirstArgs>(args?: SelectSubset<T, ParametreSystemeFindFirstArgs<ExtArgs>>): Prisma__ParametreSystemeClient<$Result.GetResult<Prisma.$ParametreSystemePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ParametreSysteme that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParametreSystemeFindFirstOrThrowArgs} args - Arguments to find a ParametreSysteme
     * @example
     * // Get one ParametreSysteme
     * const parametreSysteme = await prisma.parametreSysteme.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ParametreSystemeFindFirstOrThrowArgs>(args?: SelectSubset<T, ParametreSystemeFindFirstOrThrowArgs<ExtArgs>>): Prisma__ParametreSystemeClient<$Result.GetResult<Prisma.$ParametreSystemePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ParametreSystemes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParametreSystemeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ParametreSystemes
     * const parametreSystemes = await prisma.parametreSysteme.findMany()
     * 
     * // Get first 10 ParametreSystemes
     * const parametreSystemes = await prisma.parametreSysteme.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const parametreSystemeWithIdOnly = await prisma.parametreSysteme.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ParametreSystemeFindManyArgs>(args?: SelectSubset<T, ParametreSystemeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParametreSystemePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ParametreSysteme.
     * @param {ParametreSystemeCreateArgs} args - Arguments to create a ParametreSysteme.
     * @example
     * // Create one ParametreSysteme
     * const ParametreSysteme = await prisma.parametreSysteme.create({
     *   data: {
     *     // ... data to create a ParametreSysteme
     *   }
     * })
     * 
     */
    create<T extends ParametreSystemeCreateArgs>(args: SelectSubset<T, ParametreSystemeCreateArgs<ExtArgs>>): Prisma__ParametreSystemeClient<$Result.GetResult<Prisma.$ParametreSystemePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ParametreSystemes.
     * @param {ParametreSystemeCreateManyArgs} args - Arguments to create many ParametreSystemes.
     * @example
     * // Create many ParametreSystemes
     * const parametreSysteme = await prisma.parametreSysteme.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ParametreSystemeCreateManyArgs>(args?: SelectSubset<T, ParametreSystemeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ParametreSystemes and returns the data saved in the database.
     * @param {ParametreSystemeCreateManyAndReturnArgs} args - Arguments to create many ParametreSystemes.
     * @example
     * // Create many ParametreSystemes
     * const parametreSysteme = await prisma.parametreSysteme.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ParametreSystemes and only return the `id`
     * const parametreSystemeWithIdOnly = await prisma.parametreSysteme.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ParametreSystemeCreateManyAndReturnArgs>(args?: SelectSubset<T, ParametreSystemeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParametreSystemePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ParametreSysteme.
     * @param {ParametreSystemeDeleteArgs} args - Arguments to delete one ParametreSysteme.
     * @example
     * // Delete one ParametreSysteme
     * const ParametreSysteme = await prisma.parametreSysteme.delete({
     *   where: {
     *     // ... filter to delete one ParametreSysteme
     *   }
     * })
     * 
     */
    delete<T extends ParametreSystemeDeleteArgs>(args: SelectSubset<T, ParametreSystemeDeleteArgs<ExtArgs>>): Prisma__ParametreSystemeClient<$Result.GetResult<Prisma.$ParametreSystemePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ParametreSysteme.
     * @param {ParametreSystemeUpdateArgs} args - Arguments to update one ParametreSysteme.
     * @example
     * // Update one ParametreSysteme
     * const parametreSysteme = await prisma.parametreSysteme.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ParametreSystemeUpdateArgs>(args: SelectSubset<T, ParametreSystemeUpdateArgs<ExtArgs>>): Prisma__ParametreSystemeClient<$Result.GetResult<Prisma.$ParametreSystemePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ParametreSystemes.
     * @param {ParametreSystemeDeleteManyArgs} args - Arguments to filter ParametreSystemes to delete.
     * @example
     * // Delete a few ParametreSystemes
     * const { count } = await prisma.parametreSysteme.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ParametreSystemeDeleteManyArgs>(args?: SelectSubset<T, ParametreSystemeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ParametreSystemes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParametreSystemeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ParametreSystemes
     * const parametreSysteme = await prisma.parametreSysteme.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ParametreSystemeUpdateManyArgs>(args: SelectSubset<T, ParametreSystemeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ParametreSystemes and returns the data updated in the database.
     * @param {ParametreSystemeUpdateManyAndReturnArgs} args - Arguments to update many ParametreSystemes.
     * @example
     * // Update many ParametreSystemes
     * const parametreSysteme = await prisma.parametreSysteme.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ParametreSystemes and only return the `id`
     * const parametreSystemeWithIdOnly = await prisma.parametreSysteme.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ParametreSystemeUpdateManyAndReturnArgs>(args: SelectSubset<T, ParametreSystemeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParametreSystemePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ParametreSysteme.
     * @param {ParametreSystemeUpsertArgs} args - Arguments to update or create a ParametreSysteme.
     * @example
     * // Update or create a ParametreSysteme
     * const parametreSysteme = await prisma.parametreSysteme.upsert({
     *   create: {
     *     // ... data to create a ParametreSysteme
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ParametreSysteme we want to update
     *   }
     * })
     */
    upsert<T extends ParametreSystemeUpsertArgs>(args: SelectSubset<T, ParametreSystemeUpsertArgs<ExtArgs>>): Prisma__ParametreSystemeClient<$Result.GetResult<Prisma.$ParametreSystemePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ParametreSystemes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParametreSystemeCountArgs} args - Arguments to filter ParametreSystemes to count.
     * @example
     * // Count the number of ParametreSystemes
     * const count = await prisma.parametreSysteme.count({
     *   where: {
     *     // ... the filter for the ParametreSystemes we want to count
     *   }
     * })
    **/
    count<T extends ParametreSystemeCountArgs>(
      args?: Subset<T, ParametreSystemeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ParametreSystemeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ParametreSysteme.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParametreSystemeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ParametreSystemeAggregateArgs>(args: Subset<T, ParametreSystemeAggregateArgs>): Prisma.PrismaPromise<GetParametreSystemeAggregateType<T>>

    /**
     * Group by ParametreSysteme.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParametreSystemeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ParametreSystemeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ParametreSystemeGroupByArgs['orderBy'] }
        : { orderBy?: ParametreSystemeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ParametreSystemeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetParametreSystemeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ParametreSysteme model
   */
  readonly fields: ParametreSystemeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ParametreSysteme.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ParametreSystemeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ParametreSysteme model
   */
  interface ParametreSystemeFieldRefs {
    readonly id: FieldRef<"ParametreSysteme", 'Int'>
    readonly cle: FieldRef<"ParametreSysteme", 'String'>
    readonly valeur: FieldRef<"ParametreSysteme", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ParametreSysteme findUnique
   */
  export type ParametreSystemeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParametreSysteme
     */
    select?: ParametreSystemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParametreSysteme
     */
    omit?: ParametreSystemeOmit<ExtArgs> | null
    /**
     * Filter, which ParametreSysteme to fetch.
     */
    where: ParametreSystemeWhereUniqueInput
  }

  /**
   * ParametreSysteme findUniqueOrThrow
   */
  export type ParametreSystemeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParametreSysteme
     */
    select?: ParametreSystemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParametreSysteme
     */
    omit?: ParametreSystemeOmit<ExtArgs> | null
    /**
     * Filter, which ParametreSysteme to fetch.
     */
    where: ParametreSystemeWhereUniqueInput
  }

  /**
   * ParametreSysteme findFirst
   */
  export type ParametreSystemeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParametreSysteme
     */
    select?: ParametreSystemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParametreSysteme
     */
    omit?: ParametreSystemeOmit<ExtArgs> | null
    /**
     * Filter, which ParametreSysteme to fetch.
     */
    where?: ParametreSystemeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ParametreSystemes to fetch.
     */
    orderBy?: ParametreSystemeOrderByWithRelationInput | ParametreSystemeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ParametreSystemes.
     */
    cursor?: ParametreSystemeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ParametreSystemes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ParametreSystemes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ParametreSystemes.
     */
    distinct?: ParametreSystemeScalarFieldEnum | ParametreSystemeScalarFieldEnum[]
  }

  /**
   * ParametreSysteme findFirstOrThrow
   */
  export type ParametreSystemeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParametreSysteme
     */
    select?: ParametreSystemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParametreSysteme
     */
    omit?: ParametreSystemeOmit<ExtArgs> | null
    /**
     * Filter, which ParametreSysteme to fetch.
     */
    where?: ParametreSystemeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ParametreSystemes to fetch.
     */
    orderBy?: ParametreSystemeOrderByWithRelationInput | ParametreSystemeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ParametreSystemes.
     */
    cursor?: ParametreSystemeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ParametreSystemes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ParametreSystemes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ParametreSystemes.
     */
    distinct?: ParametreSystemeScalarFieldEnum | ParametreSystemeScalarFieldEnum[]
  }

  /**
   * ParametreSysteme findMany
   */
  export type ParametreSystemeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParametreSysteme
     */
    select?: ParametreSystemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParametreSysteme
     */
    omit?: ParametreSystemeOmit<ExtArgs> | null
    /**
     * Filter, which ParametreSystemes to fetch.
     */
    where?: ParametreSystemeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ParametreSystemes to fetch.
     */
    orderBy?: ParametreSystemeOrderByWithRelationInput | ParametreSystemeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ParametreSystemes.
     */
    cursor?: ParametreSystemeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ParametreSystemes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ParametreSystemes.
     */
    skip?: number
    distinct?: ParametreSystemeScalarFieldEnum | ParametreSystemeScalarFieldEnum[]
  }

  /**
   * ParametreSysteme create
   */
  export type ParametreSystemeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParametreSysteme
     */
    select?: ParametreSystemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParametreSysteme
     */
    omit?: ParametreSystemeOmit<ExtArgs> | null
    /**
     * The data needed to create a ParametreSysteme.
     */
    data: XOR<ParametreSystemeCreateInput, ParametreSystemeUncheckedCreateInput>
  }

  /**
   * ParametreSysteme createMany
   */
  export type ParametreSystemeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ParametreSystemes.
     */
    data: ParametreSystemeCreateManyInput | ParametreSystemeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ParametreSysteme createManyAndReturn
   */
  export type ParametreSystemeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParametreSysteme
     */
    select?: ParametreSystemeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ParametreSysteme
     */
    omit?: ParametreSystemeOmit<ExtArgs> | null
    /**
     * The data used to create many ParametreSystemes.
     */
    data: ParametreSystemeCreateManyInput | ParametreSystemeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ParametreSysteme update
   */
  export type ParametreSystemeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParametreSysteme
     */
    select?: ParametreSystemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParametreSysteme
     */
    omit?: ParametreSystemeOmit<ExtArgs> | null
    /**
     * The data needed to update a ParametreSysteme.
     */
    data: XOR<ParametreSystemeUpdateInput, ParametreSystemeUncheckedUpdateInput>
    /**
     * Choose, which ParametreSysteme to update.
     */
    where: ParametreSystemeWhereUniqueInput
  }

  /**
   * ParametreSysteme updateMany
   */
  export type ParametreSystemeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ParametreSystemes.
     */
    data: XOR<ParametreSystemeUpdateManyMutationInput, ParametreSystemeUncheckedUpdateManyInput>
    /**
     * Filter which ParametreSystemes to update
     */
    where?: ParametreSystemeWhereInput
    /**
     * Limit how many ParametreSystemes to update.
     */
    limit?: number
  }

  /**
   * ParametreSysteme updateManyAndReturn
   */
  export type ParametreSystemeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParametreSysteme
     */
    select?: ParametreSystemeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ParametreSysteme
     */
    omit?: ParametreSystemeOmit<ExtArgs> | null
    /**
     * The data used to update ParametreSystemes.
     */
    data: XOR<ParametreSystemeUpdateManyMutationInput, ParametreSystemeUncheckedUpdateManyInput>
    /**
     * Filter which ParametreSystemes to update
     */
    where?: ParametreSystemeWhereInput
    /**
     * Limit how many ParametreSystemes to update.
     */
    limit?: number
  }

  /**
   * ParametreSysteme upsert
   */
  export type ParametreSystemeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParametreSysteme
     */
    select?: ParametreSystemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParametreSysteme
     */
    omit?: ParametreSystemeOmit<ExtArgs> | null
    /**
     * The filter to search for the ParametreSysteme to update in case it exists.
     */
    where: ParametreSystemeWhereUniqueInput
    /**
     * In case the ParametreSysteme found by the `where` argument doesn't exist, create a new ParametreSysteme with this data.
     */
    create: XOR<ParametreSystemeCreateInput, ParametreSystemeUncheckedCreateInput>
    /**
     * In case the ParametreSysteme was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ParametreSystemeUpdateInput, ParametreSystemeUncheckedUpdateInput>
  }

  /**
   * ParametreSysteme delete
   */
  export type ParametreSystemeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParametreSysteme
     */
    select?: ParametreSystemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParametreSysteme
     */
    omit?: ParametreSystemeOmit<ExtArgs> | null
    /**
     * Filter which ParametreSysteme to delete.
     */
    where: ParametreSystemeWhereUniqueInput
  }

  /**
   * ParametreSysteme deleteMany
   */
  export type ParametreSystemeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ParametreSystemes to delete
     */
    where?: ParametreSystemeWhereInput
    /**
     * Limit how many ParametreSystemes to delete.
     */
    limit?: number
  }

  /**
   * ParametreSysteme without action
   */
  export type ParametreSystemeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParametreSysteme
     */
    select?: ParametreSystemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParametreSysteme
     */
    omit?: ParametreSystemeOmit<ExtArgs> | null
  }


  /**
   * Model JournalAction
   */

  export type AggregateJournalAction = {
    _count: JournalActionCountAggregateOutputType | null
    _min: JournalActionMinAggregateOutputType | null
    _max: JournalActionMaxAggregateOutputType | null
  }

  export type JournalActionMinAggregateOutputType = {
    id: string | null
    userId: string | null
    action: string | null
    cible: string | null
    timestamp: Date | null
  }

  export type JournalActionMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    action: string | null
    cible: string | null
    timestamp: Date | null
  }

  export type JournalActionCountAggregateOutputType = {
    id: number
    userId: number
    action: number
    cible: number
    timestamp: number
    _all: number
  }


  export type JournalActionMinAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    cible?: true
    timestamp?: true
  }

  export type JournalActionMaxAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    cible?: true
    timestamp?: true
  }

  export type JournalActionCountAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    cible?: true
    timestamp?: true
    _all?: true
  }

  export type JournalActionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JournalAction to aggregate.
     */
    where?: JournalActionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JournalActions to fetch.
     */
    orderBy?: JournalActionOrderByWithRelationInput | JournalActionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: JournalActionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JournalActions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JournalActions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned JournalActions
    **/
    _count?: true | JournalActionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JournalActionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JournalActionMaxAggregateInputType
  }

  export type GetJournalActionAggregateType<T extends JournalActionAggregateArgs> = {
        [P in keyof T & keyof AggregateJournalAction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJournalAction[P]>
      : GetScalarType<T[P], AggregateJournalAction[P]>
  }




  export type JournalActionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JournalActionWhereInput
    orderBy?: JournalActionOrderByWithAggregationInput | JournalActionOrderByWithAggregationInput[]
    by: JournalActionScalarFieldEnum[] | JournalActionScalarFieldEnum
    having?: JournalActionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JournalActionCountAggregateInputType | true
    _min?: JournalActionMinAggregateInputType
    _max?: JournalActionMaxAggregateInputType
  }

  export type JournalActionGroupByOutputType = {
    id: string
    userId: string
    action: string
    cible: string
    timestamp: Date
    _count: JournalActionCountAggregateOutputType | null
    _min: JournalActionMinAggregateOutputType | null
    _max: JournalActionMaxAggregateOutputType | null
  }

  type GetJournalActionGroupByPayload<T extends JournalActionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<JournalActionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JournalActionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JournalActionGroupByOutputType[P]>
            : GetScalarType<T[P], JournalActionGroupByOutputType[P]>
        }
      >
    >


  export type JournalActionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    action?: boolean
    cible?: boolean
    timestamp?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["journalAction"]>

  export type JournalActionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    action?: boolean
    cible?: boolean
    timestamp?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["journalAction"]>

  export type JournalActionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    action?: boolean
    cible?: boolean
    timestamp?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["journalAction"]>

  export type JournalActionSelectScalar = {
    id?: boolean
    userId?: boolean
    action?: boolean
    cible?: boolean
    timestamp?: boolean
  }

  export type JournalActionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "action" | "cible" | "timestamp", ExtArgs["result"]["journalAction"]>
  export type JournalActionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type JournalActionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type JournalActionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $JournalActionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "JournalAction"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      action: string
      cible: string
      timestamp: Date
    }, ExtArgs["result"]["journalAction"]>
    composites: {}
  }

  type JournalActionGetPayload<S extends boolean | null | undefined | JournalActionDefaultArgs> = $Result.GetResult<Prisma.$JournalActionPayload, S>

  type JournalActionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<JournalActionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: JournalActionCountAggregateInputType | true
    }

  export interface JournalActionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['JournalAction'], meta: { name: 'JournalAction' } }
    /**
     * Find zero or one JournalAction that matches the filter.
     * @param {JournalActionFindUniqueArgs} args - Arguments to find a JournalAction
     * @example
     * // Get one JournalAction
     * const journalAction = await prisma.journalAction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends JournalActionFindUniqueArgs>(args: SelectSubset<T, JournalActionFindUniqueArgs<ExtArgs>>): Prisma__JournalActionClient<$Result.GetResult<Prisma.$JournalActionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one JournalAction that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {JournalActionFindUniqueOrThrowArgs} args - Arguments to find a JournalAction
     * @example
     * // Get one JournalAction
     * const journalAction = await prisma.journalAction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends JournalActionFindUniqueOrThrowArgs>(args: SelectSubset<T, JournalActionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__JournalActionClient<$Result.GetResult<Prisma.$JournalActionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first JournalAction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JournalActionFindFirstArgs} args - Arguments to find a JournalAction
     * @example
     * // Get one JournalAction
     * const journalAction = await prisma.journalAction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends JournalActionFindFirstArgs>(args?: SelectSubset<T, JournalActionFindFirstArgs<ExtArgs>>): Prisma__JournalActionClient<$Result.GetResult<Prisma.$JournalActionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first JournalAction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JournalActionFindFirstOrThrowArgs} args - Arguments to find a JournalAction
     * @example
     * // Get one JournalAction
     * const journalAction = await prisma.journalAction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends JournalActionFindFirstOrThrowArgs>(args?: SelectSubset<T, JournalActionFindFirstOrThrowArgs<ExtArgs>>): Prisma__JournalActionClient<$Result.GetResult<Prisma.$JournalActionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more JournalActions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JournalActionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all JournalActions
     * const journalActions = await prisma.journalAction.findMany()
     * 
     * // Get first 10 JournalActions
     * const journalActions = await prisma.journalAction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const journalActionWithIdOnly = await prisma.journalAction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends JournalActionFindManyArgs>(args?: SelectSubset<T, JournalActionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JournalActionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a JournalAction.
     * @param {JournalActionCreateArgs} args - Arguments to create a JournalAction.
     * @example
     * // Create one JournalAction
     * const JournalAction = await prisma.journalAction.create({
     *   data: {
     *     // ... data to create a JournalAction
     *   }
     * })
     * 
     */
    create<T extends JournalActionCreateArgs>(args: SelectSubset<T, JournalActionCreateArgs<ExtArgs>>): Prisma__JournalActionClient<$Result.GetResult<Prisma.$JournalActionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many JournalActions.
     * @param {JournalActionCreateManyArgs} args - Arguments to create many JournalActions.
     * @example
     * // Create many JournalActions
     * const journalAction = await prisma.journalAction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends JournalActionCreateManyArgs>(args?: SelectSubset<T, JournalActionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many JournalActions and returns the data saved in the database.
     * @param {JournalActionCreateManyAndReturnArgs} args - Arguments to create many JournalActions.
     * @example
     * // Create many JournalActions
     * const journalAction = await prisma.journalAction.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many JournalActions and only return the `id`
     * const journalActionWithIdOnly = await prisma.journalAction.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends JournalActionCreateManyAndReturnArgs>(args?: SelectSubset<T, JournalActionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JournalActionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a JournalAction.
     * @param {JournalActionDeleteArgs} args - Arguments to delete one JournalAction.
     * @example
     * // Delete one JournalAction
     * const JournalAction = await prisma.journalAction.delete({
     *   where: {
     *     // ... filter to delete one JournalAction
     *   }
     * })
     * 
     */
    delete<T extends JournalActionDeleteArgs>(args: SelectSubset<T, JournalActionDeleteArgs<ExtArgs>>): Prisma__JournalActionClient<$Result.GetResult<Prisma.$JournalActionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one JournalAction.
     * @param {JournalActionUpdateArgs} args - Arguments to update one JournalAction.
     * @example
     * // Update one JournalAction
     * const journalAction = await prisma.journalAction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends JournalActionUpdateArgs>(args: SelectSubset<T, JournalActionUpdateArgs<ExtArgs>>): Prisma__JournalActionClient<$Result.GetResult<Prisma.$JournalActionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more JournalActions.
     * @param {JournalActionDeleteManyArgs} args - Arguments to filter JournalActions to delete.
     * @example
     * // Delete a few JournalActions
     * const { count } = await prisma.journalAction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends JournalActionDeleteManyArgs>(args?: SelectSubset<T, JournalActionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more JournalActions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JournalActionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many JournalActions
     * const journalAction = await prisma.journalAction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends JournalActionUpdateManyArgs>(args: SelectSubset<T, JournalActionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more JournalActions and returns the data updated in the database.
     * @param {JournalActionUpdateManyAndReturnArgs} args - Arguments to update many JournalActions.
     * @example
     * // Update many JournalActions
     * const journalAction = await prisma.journalAction.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more JournalActions and only return the `id`
     * const journalActionWithIdOnly = await prisma.journalAction.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends JournalActionUpdateManyAndReturnArgs>(args: SelectSubset<T, JournalActionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JournalActionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one JournalAction.
     * @param {JournalActionUpsertArgs} args - Arguments to update or create a JournalAction.
     * @example
     * // Update or create a JournalAction
     * const journalAction = await prisma.journalAction.upsert({
     *   create: {
     *     // ... data to create a JournalAction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the JournalAction we want to update
     *   }
     * })
     */
    upsert<T extends JournalActionUpsertArgs>(args: SelectSubset<T, JournalActionUpsertArgs<ExtArgs>>): Prisma__JournalActionClient<$Result.GetResult<Prisma.$JournalActionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of JournalActions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JournalActionCountArgs} args - Arguments to filter JournalActions to count.
     * @example
     * // Count the number of JournalActions
     * const count = await prisma.journalAction.count({
     *   where: {
     *     // ... the filter for the JournalActions we want to count
     *   }
     * })
    **/
    count<T extends JournalActionCountArgs>(
      args?: Subset<T, JournalActionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JournalActionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a JournalAction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JournalActionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JournalActionAggregateArgs>(args: Subset<T, JournalActionAggregateArgs>): Prisma.PrismaPromise<GetJournalActionAggregateType<T>>

    /**
     * Group by JournalAction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JournalActionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JournalActionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JournalActionGroupByArgs['orderBy'] }
        : { orderBy?: JournalActionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JournalActionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJournalActionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the JournalAction model
   */
  readonly fields: JournalActionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for JournalAction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__JournalActionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the JournalAction model
   */
  interface JournalActionFieldRefs {
    readonly id: FieldRef<"JournalAction", 'String'>
    readonly userId: FieldRef<"JournalAction", 'String'>
    readonly action: FieldRef<"JournalAction", 'String'>
    readonly cible: FieldRef<"JournalAction", 'String'>
    readonly timestamp: FieldRef<"JournalAction", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * JournalAction findUnique
   */
  export type JournalActionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JournalAction
     */
    select?: JournalActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JournalAction
     */
    omit?: JournalActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JournalActionInclude<ExtArgs> | null
    /**
     * Filter, which JournalAction to fetch.
     */
    where: JournalActionWhereUniqueInput
  }

  /**
   * JournalAction findUniqueOrThrow
   */
  export type JournalActionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JournalAction
     */
    select?: JournalActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JournalAction
     */
    omit?: JournalActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JournalActionInclude<ExtArgs> | null
    /**
     * Filter, which JournalAction to fetch.
     */
    where: JournalActionWhereUniqueInput
  }

  /**
   * JournalAction findFirst
   */
  export type JournalActionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JournalAction
     */
    select?: JournalActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JournalAction
     */
    omit?: JournalActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JournalActionInclude<ExtArgs> | null
    /**
     * Filter, which JournalAction to fetch.
     */
    where?: JournalActionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JournalActions to fetch.
     */
    orderBy?: JournalActionOrderByWithRelationInput | JournalActionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JournalActions.
     */
    cursor?: JournalActionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JournalActions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JournalActions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JournalActions.
     */
    distinct?: JournalActionScalarFieldEnum | JournalActionScalarFieldEnum[]
  }

  /**
   * JournalAction findFirstOrThrow
   */
  export type JournalActionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JournalAction
     */
    select?: JournalActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JournalAction
     */
    omit?: JournalActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JournalActionInclude<ExtArgs> | null
    /**
     * Filter, which JournalAction to fetch.
     */
    where?: JournalActionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JournalActions to fetch.
     */
    orderBy?: JournalActionOrderByWithRelationInput | JournalActionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JournalActions.
     */
    cursor?: JournalActionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JournalActions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JournalActions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JournalActions.
     */
    distinct?: JournalActionScalarFieldEnum | JournalActionScalarFieldEnum[]
  }

  /**
   * JournalAction findMany
   */
  export type JournalActionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JournalAction
     */
    select?: JournalActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JournalAction
     */
    omit?: JournalActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JournalActionInclude<ExtArgs> | null
    /**
     * Filter, which JournalActions to fetch.
     */
    where?: JournalActionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JournalActions to fetch.
     */
    orderBy?: JournalActionOrderByWithRelationInput | JournalActionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing JournalActions.
     */
    cursor?: JournalActionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JournalActions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JournalActions.
     */
    skip?: number
    distinct?: JournalActionScalarFieldEnum | JournalActionScalarFieldEnum[]
  }

  /**
   * JournalAction create
   */
  export type JournalActionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JournalAction
     */
    select?: JournalActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JournalAction
     */
    omit?: JournalActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JournalActionInclude<ExtArgs> | null
    /**
     * The data needed to create a JournalAction.
     */
    data: XOR<JournalActionCreateInput, JournalActionUncheckedCreateInput>
  }

  /**
   * JournalAction createMany
   */
  export type JournalActionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many JournalActions.
     */
    data: JournalActionCreateManyInput | JournalActionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * JournalAction createManyAndReturn
   */
  export type JournalActionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JournalAction
     */
    select?: JournalActionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the JournalAction
     */
    omit?: JournalActionOmit<ExtArgs> | null
    /**
     * The data used to create many JournalActions.
     */
    data: JournalActionCreateManyInput | JournalActionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JournalActionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * JournalAction update
   */
  export type JournalActionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JournalAction
     */
    select?: JournalActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JournalAction
     */
    omit?: JournalActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JournalActionInclude<ExtArgs> | null
    /**
     * The data needed to update a JournalAction.
     */
    data: XOR<JournalActionUpdateInput, JournalActionUncheckedUpdateInput>
    /**
     * Choose, which JournalAction to update.
     */
    where: JournalActionWhereUniqueInput
  }

  /**
   * JournalAction updateMany
   */
  export type JournalActionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update JournalActions.
     */
    data: XOR<JournalActionUpdateManyMutationInput, JournalActionUncheckedUpdateManyInput>
    /**
     * Filter which JournalActions to update
     */
    where?: JournalActionWhereInput
    /**
     * Limit how many JournalActions to update.
     */
    limit?: number
  }

  /**
   * JournalAction updateManyAndReturn
   */
  export type JournalActionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JournalAction
     */
    select?: JournalActionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the JournalAction
     */
    omit?: JournalActionOmit<ExtArgs> | null
    /**
     * The data used to update JournalActions.
     */
    data: XOR<JournalActionUpdateManyMutationInput, JournalActionUncheckedUpdateManyInput>
    /**
     * Filter which JournalActions to update
     */
    where?: JournalActionWhereInput
    /**
     * Limit how many JournalActions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JournalActionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * JournalAction upsert
   */
  export type JournalActionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JournalAction
     */
    select?: JournalActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JournalAction
     */
    omit?: JournalActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JournalActionInclude<ExtArgs> | null
    /**
     * The filter to search for the JournalAction to update in case it exists.
     */
    where: JournalActionWhereUniqueInput
    /**
     * In case the JournalAction found by the `where` argument doesn't exist, create a new JournalAction with this data.
     */
    create: XOR<JournalActionCreateInput, JournalActionUncheckedCreateInput>
    /**
     * In case the JournalAction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<JournalActionUpdateInput, JournalActionUncheckedUpdateInput>
  }

  /**
   * JournalAction delete
   */
  export type JournalActionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JournalAction
     */
    select?: JournalActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JournalAction
     */
    omit?: JournalActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JournalActionInclude<ExtArgs> | null
    /**
     * Filter which JournalAction to delete.
     */
    where: JournalActionWhereUniqueInput
  }

  /**
   * JournalAction deleteMany
   */
  export type JournalActionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JournalActions to delete
     */
    where?: JournalActionWhereInput
    /**
     * Limit how many JournalActions to delete.
     */
    limit?: number
  }

  /**
   * JournalAction without action
   */
  export type JournalActionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JournalAction
     */
    select?: JournalActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JournalAction
     */
    omit?: JournalActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JournalActionInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    passwordHash: 'passwordHash',
    role: 'role',
    isActive: 'isActive',
    createdAt: 'createdAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const UserProfileScalarFieldEnum: {
    userId: 'userId',
    nom: 'nom',
    prenom: 'prenom',
    telephone: 'telephone',
    photo: 'photo',
    adresse: 'adresse',
    autresInfos: 'autresInfos'
  };

  export type UserProfileScalarFieldEnum = (typeof UserProfileScalarFieldEnum)[keyof typeof UserProfileScalarFieldEnum]


  export const StructureScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    nomStructure: 'nomStructure',
    type: 'type',
    adresse: 'adresse',
    emailContact: 'emailContact',
    telephoneContact: 'telephoneContact'
  };

  export type StructureScalarFieldEnum = (typeof StructureScalarFieldEnum)[keyof typeof StructureScalarFieldEnum]


  export const TuteurScalarFieldEnum: {
    userId: 'userId',
    structureId: 'structureId',
    fonction: 'fonction',
    disponibilite: 'disponibilite',
    competences: 'competences'
  };

  export type TuteurScalarFieldEnum = (typeof TuteurScalarFieldEnum)[keyof typeof TuteurScalarFieldEnum]


  export const StagiaireScalarFieldEnum: {
    userId: 'userId',
    codeDemande: 'codeDemande',
    statutDemande: 'statutDemande',
    structureAffecteeId: 'structureAffecteeId',
    tuteurId: 'tuteurId',
    dateDebut: 'dateDebut',
    dateFin: 'dateFin'
  };

  export type StagiaireScalarFieldEnum = (typeof StagiaireScalarFieldEnum)[keyof typeof StagiaireScalarFieldEnum]


  export const DPAFScalarFieldEnum: {
    userId: 'userId'
  };

  export type DPAFScalarFieldEnum = (typeof DPAFScalarFieldEnum)[keyof typeof DPAFScalarFieldEnum]


  export const DemandeStageScalarFieldEnum: {
    id: 'id',
    stagiaireId: 'stagiaireId',
    dateDemande: 'dateDemande',
    etat: 'etat',
    motifRefus: 'motifRefus',
    dateTraitement: 'dateTraitement',
    structureCibleId: 'structureCibleId'
  };

  export type DemandeStageScalarFieldEnum = (typeof DemandeStageScalarFieldEnum)[keyof typeof DemandeStageScalarFieldEnum]


  export const StageScalarFieldEnum: {
    id: 'id',
    stagiaireId: 'stagiaireId',
    tuteurId: 'tuteurId',
    structureId: 'structureId',
    theme: 'theme',
    etat: 'etat',
    dateDebut: 'dateDebut',
    dateFin: 'dateFin',
    noteFinale: 'noteFinale'
  };

  export type StageScalarFieldEnum = (typeof StageScalarFieldEnum)[keyof typeof StageScalarFieldEnum]


  export const CandidatureScoreScalarFieldEnum: {
    id: 'id',
    stagiaireId: 'stagiaireId',
    scorePertinence: 'scorePertinence',
    dateEvaluation: 'dateEvaluation'
  };

  export type CandidatureScoreScalarFieldEnum = (typeof CandidatureScoreScalarFieldEnum)[keyof typeof CandidatureScoreScalarFieldEnum]


  export const SuggestionAffectationScalarFieldEnum: {
    id: 'id',
    stagiaireId: 'stagiaireId',
    tuteurId: 'tuteurId',
    scoreMatch: 'scoreMatch',
    createdAt: 'createdAt'
  };

  export type SuggestionAffectationScalarFieldEnum = (typeof SuggestionAffectationScalarFieldEnum)[keyof typeof SuggestionAffectationScalarFieldEnum]


  export const MessageScalarFieldEnum: {
    id: 'id',
    expediteurId: 'expediteurId',
    destinataireId: 'destinataireId',
    contenu: 'contenu',
    fichierJoint: 'fichierJoint',
    lu: 'lu',
    envoyeLe: 'envoyeLe'
  };

  export type MessageScalarFieldEnum = (typeof MessageScalarFieldEnum)[keyof typeof MessageScalarFieldEnum]


  export const ThemeTuteurScalarFieldEnum: {
    id: 'id',
    tuteurId: 'tuteurId',
    titre: 'titre',
    description: 'description',
    disponible: 'disponible'
  };

  export type ThemeTuteurScalarFieldEnum = (typeof ThemeTuteurScalarFieldEnum)[keyof typeof ThemeTuteurScalarFieldEnum]


  export const ParametreSystemeScalarFieldEnum: {
    id: 'id',
    cle: 'cle',
    valeur: 'valeur'
  };

  export type ParametreSystemeScalarFieldEnum = (typeof ParametreSystemeScalarFieldEnum)[keyof typeof ParametreSystemeScalarFieldEnum]


  export const JournalActionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    action: 'action',
    cible: 'cible',
    timestamp: 'timestamp'
  };

  export type JournalActionScalarFieldEnum = (typeof JournalActionScalarFieldEnum)[keyof typeof JournalActionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'UserRole[]'
   */
  export type ListEnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'StatutDemande'
   */
  export type EnumStatutDemandeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StatutDemande'>
    


  /**
   * Reference to a field of type 'StatutDemande[]'
   */
  export type ListEnumStatutDemandeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StatutDemande[]'>
    


  /**
   * Reference to a field of type 'EtatDemande'
   */
  export type EnumEtatDemandeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EtatDemande'>
    


  /**
   * Reference to a field of type 'EtatDemande[]'
   */
  export type ListEnumEtatDemandeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EtatDemande[]'>
    


  /**
   * Reference to a field of type 'EtatStage'
   */
  export type EnumEtatStageFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EtatStage'>
    


  /**
   * Reference to a field of type 'EtatStage[]'
   */
  export type ListEnumEtatStageFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EtatStage[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: UuidFilter<"User"> | string
    email?: StringFilter<"User"> | string
    passwordHash?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    isActive?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    profile?: XOR<UserProfileNullableScalarRelationFilter, UserProfileWhereInput> | null
    tuteur?: XOR<TuteurNullableScalarRelationFilter, TuteurWhereInput> | null
    stagiaire?: XOR<StagiaireNullableScalarRelationFilter, StagiaireWhereInput> | null
    dpaf?: XOR<DPAFNullableScalarRelationFilter, DPAFWhereInput> | null
    structure?: XOR<StructureNullableScalarRelationFilter, StructureWhereInput> | null
    messagesSent?: MessageListRelationFilter
    messagesReceived?: MessageListRelationFilter
    journalActions?: JournalActionListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    profile?: UserProfileOrderByWithRelationInput
    tuteur?: TuteurOrderByWithRelationInput
    stagiaire?: StagiaireOrderByWithRelationInput
    dpaf?: DPAFOrderByWithRelationInput
    structure?: StructureOrderByWithRelationInput
    messagesSent?: MessageOrderByRelationAggregateInput
    messagesReceived?: MessageOrderByRelationAggregateInput
    journalActions?: JournalActionOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    passwordHash?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    isActive?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    profile?: XOR<UserProfileNullableScalarRelationFilter, UserProfileWhereInput> | null
    tuteur?: XOR<TuteurNullableScalarRelationFilter, TuteurWhereInput> | null
    stagiaire?: XOR<StagiaireNullableScalarRelationFilter, StagiaireWhereInput> | null
    dpaf?: XOR<DPAFNullableScalarRelationFilter, DPAFWhereInput> | null
    structure?: XOR<StructureNullableScalarRelationFilter, StructureWhereInput> | null
    messagesSent?: MessageListRelationFilter
    messagesReceived?: MessageListRelationFilter
    journalActions?: JournalActionListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    passwordHash?: StringWithAggregatesFilter<"User"> | string
    role?: EnumUserRoleWithAggregatesFilter<"User"> | $Enums.UserRole
    isActive?: BoolWithAggregatesFilter<"User"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type UserProfileWhereInput = {
    AND?: UserProfileWhereInput | UserProfileWhereInput[]
    OR?: UserProfileWhereInput[]
    NOT?: UserProfileWhereInput | UserProfileWhereInput[]
    userId?: UuidFilter<"UserProfile"> | string
    nom?: StringNullableFilter<"UserProfile"> | string | null
    prenom?: StringNullableFilter<"UserProfile"> | string | null
    telephone?: StringNullableFilter<"UserProfile"> | string | null
    photo?: StringNullableFilter<"UserProfile"> | string | null
    adresse?: StringNullableFilter<"UserProfile"> | string | null
    autresInfos?: JsonNullableFilter<"UserProfile">
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type UserProfileOrderByWithRelationInput = {
    userId?: SortOrder
    nom?: SortOrderInput | SortOrder
    prenom?: SortOrderInput | SortOrder
    telephone?: SortOrderInput | SortOrder
    photo?: SortOrderInput | SortOrder
    adresse?: SortOrderInput | SortOrder
    autresInfos?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UserProfileWhereUniqueInput = Prisma.AtLeast<{
    userId?: string
    AND?: UserProfileWhereInput | UserProfileWhereInput[]
    OR?: UserProfileWhereInput[]
    NOT?: UserProfileWhereInput | UserProfileWhereInput[]
    nom?: StringNullableFilter<"UserProfile"> | string | null
    prenom?: StringNullableFilter<"UserProfile"> | string | null
    telephone?: StringNullableFilter<"UserProfile"> | string | null
    photo?: StringNullableFilter<"UserProfile"> | string | null
    adresse?: StringNullableFilter<"UserProfile"> | string | null
    autresInfos?: JsonNullableFilter<"UserProfile">
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "userId">

  export type UserProfileOrderByWithAggregationInput = {
    userId?: SortOrder
    nom?: SortOrderInput | SortOrder
    prenom?: SortOrderInput | SortOrder
    telephone?: SortOrderInput | SortOrder
    photo?: SortOrderInput | SortOrder
    adresse?: SortOrderInput | SortOrder
    autresInfos?: SortOrderInput | SortOrder
    _count?: UserProfileCountOrderByAggregateInput
    _max?: UserProfileMaxOrderByAggregateInput
    _min?: UserProfileMinOrderByAggregateInput
  }

  export type UserProfileScalarWhereWithAggregatesInput = {
    AND?: UserProfileScalarWhereWithAggregatesInput | UserProfileScalarWhereWithAggregatesInput[]
    OR?: UserProfileScalarWhereWithAggregatesInput[]
    NOT?: UserProfileScalarWhereWithAggregatesInput | UserProfileScalarWhereWithAggregatesInput[]
    userId?: UuidWithAggregatesFilter<"UserProfile"> | string
    nom?: StringNullableWithAggregatesFilter<"UserProfile"> | string | null
    prenom?: StringNullableWithAggregatesFilter<"UserProfile"> | string | null
    telephone?: StringNullableWithAggregatesFilter<"UserProfile"> | string | null
    photo?: StringNullableWithAggregatesFilter<"UserProfile"> | string | null
    adresse?: StringNullableWithAggregatesFilter<"UserProfile"> | string | null
    autresInfos?: JsonNullableWithAggregatesFilter<"UserProfile">
  }

  export type StructureWhereInput = {
    AND?: StructureWhereInput | StructureWhereInput[]
    OR?: StructureWhereInput[]
    NOT?: StructureWhereInput | StructureWhereInput[]
    id?: UuidFilter<"Structure"> | string
    userId?: UuidFilter<"Structure"> | string
    nomStructure?: StringFilter<"Structure"> | string
    type?: StringNullableFilter<"Structure"> | string | null
    adresse?: StringNullableFilter<"Structure"> | string | null
    emailContact?: StringNullableFilter<"Structure"> | string | null
    telephoneContact?: StringNullableFilter<"Structure"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    tuteurs?: TuteurListRelationFilter
    stagiaires?: StagiaireListRelationFilter
    demandesStages?: DemandeStageListRelationFilter
    stages?: StageListRelationFilter
  }

  export type StructureOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    nomStructure?: SortOrder
    type?: SortOrderInput | SortOrder
    adresse?: SortOrderInput | SortOrder
    emailContact?: SortOrderInput | SortOrder
    telephoneContact?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    tuteurs?: TuteurOrderByRelationAggregateInput
    stagiaires?: StagiaireOrderByRelationAggregateInput
    demandesStages?: DemandeStageOrderByRelationAggregateInput
    stages?: StageOrderByRelationAggregateInput
  }

  export type StructureWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: StructureWhereInput | StructureWhereInput[]
    OR?: StructureWhereInput[]
    NOT?: StructureWhereInput | StructureWhereInput[]
    nomStructure?: StringFilter<"Structure"> | string
    type?: StringNullableFilter<"Structure"> | string | null
    adresse?: StringNullableFilter<"Structure"> | string | null
    emailContact?: StringNullableFilter<"Structure"> | string | null
    telephoneContact?: StringNullableFilter<"Structure"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    tuteurs?: TuteurListRelationFilter
    stagiaires?: StagiaireListRelationFilter
    demandesStages?: DemandeStageListRelationFilter
    stages?: StageListRelationFilter
  }, "id" | "userId">

  export type StructureOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    nomStructure?: SortOrder
    type?: SortOrderInput | SortOrder
    adresse?: SortOrderInput | SortOrder
    emailContact?: SortOrderInput | SortOrder
    telephoneContact?: SortOrderInput | SortOrder
    _count?: StructureCountOrderByAggregateInput
    _max?: StructureMaxOrderByAggregateInput
    _min?: StructureMinOrderByAggregateInput
  }

  export type StructureScalarWhereWithAggregatesInput = {
    AND?: StructureScalarWhereWithAggregatesInput | StructureScalarWhereWithAggregatesInput[]
    OR?: StructureScalarWhereWithAggregatesInput[]
    NOT?: StructureScalarWhereWithAggregatesInput | StructureScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Structure"> | string
    userId?: UuidWithAggregatesFilter<"Structure"> | string
    nomStructure?: StringWithAggregatesFilter<"Structure"> | string
    type?: StringNullableWithAggregatesFilter<"Structure"> | string | null
    adresse?: StringNullableWithAggregatesFilter<"Structure"> | string | null
    emailContact?: StringNullableWithAggregatesFilter<"Structure"> | string | null
    telephoneContact?: StringNullableWithAggregatesFilter<"Structure"> | string | null
  }

  export type TuteurWhereInput = {
    AND?: TuteurWhereInput | TuteurWhereInput[]
    OR?: TuteurWhereInput[]
    NOT?: TuteurWhereInput | TuteurWhereInput[]
    userId?: UuidFilter<"Tuteur"> | string
    structureId?: UuidNullableFilter<"Tuteur"> | string | null
    fonction?: StringNullableFilter<"Tuteur"> | string | null
    disponibilite?: BoolFilter<"Tuteur"> | boolean
    competences?: StringNullableListFilter<"Tuteur">
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    structure?: XOR<StructureNullableScalarRelationFilter, StructureWhereInput> | null
    stagiaires?: StagiaireListRelationFilter
    stages?: StageListRelationFilter
    themes?: ThemeTuteurListRelationFilter
    suggestions?: SuggestionAffectationListRelationFilter
  }

  export type TuteurOrderByWithRelationInput = {
    userId?: SortOrder
    structureId?: SortOrderInput | SortOrder
    fonction?: SortOrderInput | SortOrder
    disponibilite?: SortOrder
    competences?: SortOrder
    user?: UserOrderByWithRelationInput
    structure?: StructureOrderByWithRelationInput
    stagiaires?: StagiaireOrderByRelationAggregateInput
    stages?: StageOrderByRelationAggregateInput
    themes?: ThemeTuteurOrderByRelationAggregateInput
    suggestions?: SuggestionAffectationOrderByRelationAggregateInput
  }

  export type TuteurWhereUniqueInput = Prisma.AtLeast<{
    userId?: string
    AND?: TuteurWhereInput | TuteurWhereInput[]
    OR?: TuteurWhereInput[]
    NOT?: TuteurWhereInput | TuteurWhereInput[]
    structureId?: UuidNullableFilter<"Tuteur"> | string | null
    fonction?: StringNullableFilter<"Tuteur"> | string | null
    disponibilite?: BoolFilter<"Tuteur"> | boolean
    competences?: StringNullableListFilter<"Tuteur">
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    structure?: XOR<StructureNullableScalarRelationFilter, StructureWhereInput> | null
    stagiaires?: StagiaireListRelationFilter
    stages?: StageListRelationFilter
    themes?: ThemeTuteurListRelationFilter
    suggestions?: SuggestionAffectationListRelationFilter
  }, "userId">

  export type TuteurOrderByWithAggregationInput = {
    userId?: SortOrder
    structureId?: SortOrderInput | SortOrder
    fonction?: SortOrderInput | SortOrder
    disponibilite?: SortOrder
    competences?: SortOrder
    _count?: TuteurCountOrderByAggregateInput
    _max?: TuteurMaxOrderByAggregateInput
    _min?: TuteurMinOrderByAggregateInput
  }

  export type TuteurScalarWhereWithAggregatesInput = {
    AND?: TuteurScalarWhereWithAggregatesInput | TuteurScalarWhereWithAggregatesInput[]
    OR?: TuteurScalarWhereWithAggregatesInput[]
    NOT?: TuteurScalarWhereWithAggregatesInput | TuteurScalarWhereWithAggregatesInput[]
    userId?: UuidWithAggregatesFilter<"Tuteur"> | string
    structureId?: UuidNullableWithAggregatesFilter<"Tuteur"> | string | null
    fonction?: StringNullableWithAggregatesFilter<"Tuteur"> | string | null
    disponibilite?: BoolWithAggregatesFilter<"Tuteur"> | boolean
    competences?: StringNullableListFilter<"Tuteur">
  }

  export type StagiaireWhereInput = {
    AND?: StagiaireWhereInput | StagiaireWhereInput[]
    OR?: StagiaireWhereInput[]
    NOT?: StagiaireWhereInput | StagiaireWhereInput[]
    userId?: UuidFilter<"Stagiaire"> | string
    codeDemande?: StringNullableFilter<"Stagiaire"> | string | null
    statutDemande?: EnumStatutDemandeNullableFilter<"Stagiaire"> | $Enums.StatutDemande | null
    structureAffecteeId?: UuidNullableFilter<"Stagiaire"> | string | null
    tuteurId?: UuidNullableFilter<"Stagiaire"> | string | null
    dateDebut?: DateTimeNullableFilter<"Stagiaire"> | Date | string | null
    dateFin?: DateTimeNullableFilter<"Stagiaire"> | Date | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    structure?: XOR<StructureNullableScalarRelationFilter, StructureWhereInput> | null
    tuteur?: XOR<TuteurNullableScalarRelationFilter, TuteurWhereInput> | null
    demandesStages?: DemandeStageListRelationFilter
    stages?: StageListRelationFilter
    candidatureScores?: CandidatureScoreListRelationFilter
    suggestions?: SuggestionAffectationListRelationFilter
  }

  export type StagiaireOrderByWithRelationInput = {
    userId?: SortOrder
    codeDemande?: SortOrderInput | SortOrder
    statutDemande?: SortOrderInput | SortOrder
    structureAffecteeId?: SortOrderInput | SortOrder
    tuteurId?: SortOrderInput | SortOrder
    dateDebut?: SortOrderInput | SortOrder
    dateFin?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    structure?: StructureOrderByWithRelationInput
    tuteur?: TuteurOrderByWithRelationInput
    demandesStages?: DemandeStageOrderByRelationAggregateInput
    stages?: StageOrderByRelationAggregateInput
    candidatureScores?: CandidatureScoreOrderByRelationAggregateInput
    suggestions?: SuggestionAffectationOrderByRelationAggregateInput
  }

  export type StagiaireWhereUniqueInput = Prisma.AtLeast<{
    userId?: string
    codeDemande?: string
    AND?: StagiaireWhereInput | StagiaireWhereInput[]
    OR?: StagiaireWhereInput[]
    NOT?: StagiaireWhereInput | StagiaireWhereInput[]
    statutDemande?: EnumStatutDemandeNullableFilter<"Stagiaire"> | $Enums.StatutDemande | null
    structureAffecteeId?: UuidNullableFilter<"Stagiaire"> | string | null
    tuteurId?: UuidNullableFilter<"Stagiaire"> | string | null
    dateDebut?: DateTimeNullableFilter<"Stagiaire"> | Date | string | null
    dateFin?: DateTimeNullableFilter<"Stagiaire"> | Date | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    structure?: XOR<StructureNullableScalarRelationFilter, StructureWhereInput> | null
    tuteur?: XOR<TuteurNullableScalarRelationFilter, TuteurWhereInput> | null
    demandesStages?: DemandeStageListRelationFilter
    stages?: StageListRelationFilter
    candidatureScores?: CandidatureScoreListRelationFilter
    suggestions?: SuggestionAffectationListRelationFilter
  }, "userId" | "codeDemande">

  export type StagiaireOrderByWithAggregationInput = {
    userId?: SortOrder
    codeDemande?: SortOrderInput | SortOrder
    statutDemande?: SortOrderInput | SortOrder
    structureAffecteeId?: SortOrderInput | SortOrder
    tuteurId?: SortOrderInput | SortOrder
    dateDebut?: SortOrderInput | SortOrder
    dateFin?: SortOrderInput | SortOrder
    _count?: StagiaireCountOrderByAggregateInput
    _max?: StagiaireMaxOrderByAggregateInput
    _min?: StagiaireMinOrderByAggregateInput
  }

  export type StagiaireScalarWhereWithAggregatesInput = {
    AND?: StagiaireScalarWhereWithAggregatesInput | StagiaireScalarWhereWithAggregatesInput[]
    OR?: StagiaireScalarWhereWithAggregatesInput[]
    NOT?: StagiaireScalarWhereWithAggregatesInput | StagiaireScalarWhereWithAggregatesInput[]
    userId?: UuidWithAggregatesFilter<"Stagiaire"> | string
    codeDemande?: StringNullableWithAggregatesFilter<"Stagiaire"> | string | null
    statutDemande?: EnumStatutDemandeNullableWithAggregatesFilter<"Stagiaire"> | $Enums.StatutDemande | null
    structureAffecteeId?: UuidNullableWithAggregatesFilter<"Stagiaire"> | string | null
    tuteurId?: UuidNullableWithAggregatesFilter<"Stagiaire"> | string | null
    dateDebut?: DateTimeNullableWithAggregatesFilter<"Stagiaire"> | Date | string | null
    dateFin?: DateTimeNullableWithAggregatesFilter<"Stagiaire"> | Date | string | null
  }

  export type DPAFWhereInput = {
    AND?: DPAFWhereInput | DPAFWhereInput[]
    OR?: DPAFWhereInput[]
    NOT?: DPAFWhereInput | DPAFWhereInput[]
    userId?: UuidFilter<"DPAF"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type DPAFOrderByWithRelationInput = {
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type DPAFWhereUniqueInput = Prisma.AtLeast<{
    userId?: string
    AND?: DPAFWhereInput | DPAFWhereInput[]
    OR?: DPAFWhereInput[]
    NOT?: DPAFWhereInput | DPAFWhereInput[]
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "userId">

  export type DPAFOrderByWithAggregationInput = {
    userId?: SortOrder
    _count?: DPAFCountOrderByAggregateInput
    _max?: DPAFMaxOrderByAggregateInput
    _min?: DPAFMinOrderByAggregateInput
  }

  export type DPAFScalarWhereWithAggregatesInput = {
    AND?: DPAFScalarWhereWithAggregatesInput | DPAFScalarWhereWithAggregatesInput[]
    OR?: DPAFScalarWhereWithAggregatesInput[]
    NOT?: DPAFScalarWhereWithAggregatesInput | DPAFScalarWhereWithAggregatesInput[]
    userId?: UuidWithAggregatesFilter<"DPAF"> | string
  }

  export type DemandeStageWhereInput = {
    AND?: DemandeStageWhereInput | DemandeStageWhereInput[]
    OR?: DemandeStageWhereInput[]
    NOT?: DemandeStageWhereInput | DemandeStageWhereInput[]
    id?: UuidFilter<"DemandeStage"> | string
    stagiaireId?: UuidFilter<"DemandeStage"> | string
    dateDemande?: DateTimeFilter<"DemandeStage"> | Date | string
    etat?: EnumEtatDemandeFilter<"DemandeStage"> | $Enums.EtatDemande
    motifRefus?: StringNullableFilter<"DemandeStage"> | string | null
    dateTraitement?: DateTimeNullableFilter<"DemandeStage"> | Date | string | null
    structureCibleId?: UuidNullableFilter<"DemandeStage"> | string | null
    stagiaire?: XOR<StagiaireScalarRelationFilter, StagiaireWhereInput>
    structureCible?: XOR<StructureNullableScalarRelationFilter, StructureWhereInput> | null
  }

  export type DemandeStageOrderByWithRelationInput = {
    id?: SortOrder
    stagiaireId?: SortOrder
    dateDemande?: SortOrder
    etat?: SortOrder
    motifRefus?: SortOrderInput | SortOrder
    dateTraitement?: SortOrderInput | SortOrder
    structureCibleId?: SortOrderInput | SortOrder
    stagiaire?: StagiaireOrderByWithRelationInput
    structureCible?: StructureOrderByWithRelationInput
  }

  export type DemandeStageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DemandeStageWhereInput | DemandeStageWhereInput[]
    OR?: DemandeStageWhereInput[]
    NOT?: DemandeStageWhereInput | DemandeStageWhereInput[]
    stagiaireId?: UuidFilter<"DemandeStage"> | string
    dateDemande?: DateTimeFilter<"DemandeStage"> | Date | string
    etat?: EnumEtatDemandeFilter<"DemandeStage"> | $Enums.EtatDemande
    motifRefus?: StringNullableFilter<"DemandeStage"> | string | null
    dateTraitement?: DateTimeNullableFilter<"DemandeStage"> | Date | string | null
    structureCibleId?: UuidNullableFilter<"DemandeStage"> | string | null
    stagiaire?: XOR<StagiaireScalarRelationFilter, StagiaireWhereInput>
    structureCible?: XOR<StructureNullableScalarRelationFilter, StructureWhereInput> | null
  }, "id">

  export type DemandeStageOrderByWithAggregationInput = {
    id?: SortOrder
    stagiaireId?: SortOrder
    dateDemande?: SortOrder
    etat?: SortOrder
    motifRefus?: SortOrderInput | SortOrder
    dateTraitement?: SortOrderInput | SortOrder
    structureCibleId?: SortOrderInput | SortOrder
    _count?: DemandeStageCountOrderByAggregateInput
    _max?: DemandeStageMaxOrderByAggregateInput
    _min?: DemandeStageMinOrderByAggregateInput
  }

  export type DemandeStageScalarWhereWithAggregatesInput = {
    AND?: DemandeStageScalarWhereWithAggregatesInput | DemandeStageScalarWhereWithAggregatesInput[]
    OR?: DemandeStageScalarWhereWithAggregatesInput[]
    NOT?: DemandeStageScalarWhereWithAggregatesInput | DemandeStageScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"DemandeStage"> | string
    stagiaireId?: UuidWithAggregatesFilter<"DemandeStage"> | string
    dateDemande?: DateTimeWithAggregatesFilter<"DemandeStage"> | Date | string
    etat?: EnumEtatDemandeWithAggregatesFilter<"DemandeStage"> | $Enums.EtatDemande
    motifRefus?: StringNullableWithAggregatesFilter<"DemandeStage"> | string | null
    dateTraitement?: DateTimeNullableWithAggregatesFilter<"DemandeStage"> | Date | string | null
    structureCibleId?: UuidNullableWithAggregatesFilter<"DemandeStage"> | string | null
  }

  export type StageWhereInput = {
    AND?: StageWhereInput | StageWhereInput[]
    OR?: StageWhereInput[]
    NOT?: StageWhereInput | StageWhereInput[]
    id?: UuidFilter<"Stage"> | string
    stagiaireId?: UuidFilter<"Stage"> | string
    tuteurId?: UuidFilter<"Stage"> | string
    structureId?: UuidFilter<"Stage"> | string
    theme?: StringNullableFilter<"Stage"> | string | null
    etat?: EnumEtatStageFilter<"Stage"> | $Enums.EtatStage
    dateDebut?: DateTimeFilter<"Stage"> | Date | string
    dateFin?: DateTimeFilter<"Stage"> | Date | string
    noteFinale?: StringNullableFilter<"Stage"> | string | null
    stagiaire?: XOR<StagiaireScalarRelationFilter, StagiaireWhereInput>
    tuteur?: XOR<TuteurScalarRelationFilter, TuteurWhereInput>
    structure?: XOR<StructureScalarRelationFilter, StructureWhereInput>
  }

  export type StageOrderByWithRelationInput = {
    id?: SortOrder
    stagiaireId?: SortOrder
    tuteurId?: SortOrder
    structureId?: SortOrder
    theme?: SortOrderInput | SortOrder
    etat?: SortOrder
    dateDebut?: SortOrder
    dateFin?: SortOrder
    noteFinale?: SortOrderInput | SortOrder
    stagiaire?: StagiaireOrderByWithRelationInput
    tuteur?: TuteurOrderByWithRelationInput
    structure?: StructureOrderByWithRelationInput
  }

  export type StageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: StageWhereInput | StageWhereInput[]
    OR?: StageWhereInput[]
    NOT?: StageWhereInput | StageWhereInput[]
    stagiaireId?: UuidFilter<"Stage"> | string
    tuteurId?: UuidFilter<"Stage"> | string
    structureId?: UuidFilter<"Stage"> | string
    theme?: StringNullableFilter<"Stage"> | string | null
    etat?: EnumEtatStageFilter<"Stage"> | $Enums.EtatStage
    dateDebut?: DateTimeFilter<"Stage"> | Date | string
    dateFin?: DateTimeFilter<"Stage"> | Date | string
    noteFinale?: StringNullableFilter<"Stage"> | string | null
    stagiaire?: XOR<StagiaireScalarRelationFilter, StagiaireWhereInput>
    tuteur?: XOR<TuteurScalarRelationFilter, TuteurWhereInput>
    structure?: XOR<StructureScalarRelationFilter, StructureWhereInput>
  }, "id">

  export type StageOrderByWithAggregationInput = {
    id?: SortOrder
    stagiaireId?: SortOrder
    tuteurId?: SortOrder
    structureId?: SortOrder
    theme?: SortOrderInput | SortOrder
    etat?: SortOrder
    dateDebut?: SortOrder
    dateFin?: SortOrder
    noteFinale?: SortOrderInput | SortOrder
    _count?: StageCountOrderByAggregateInput
    _max?: StageMaxOrderByAggregateInput
    _min?: StageMinOrderByAggregateInput
  }

  export type StageScalarWhereWithAggregatesInput = {
    AND?: StageScalarWhereWithAggregatesInput | StageScalarWhereWithAggregatesInput[]
    OR?: StageScalarWhereWithAggregatesInput[]
    NOT?: StageScalarWhereWithAggregatesInput | StageScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Stage"> | string
    stagiaireId?: UuidWithAggregatesFilter<"Stage"> | string
    tuteurId?: UuidWithAggregatesFilter<"Stage"> | string
    structureId?: UuidWithAggregatesFilter<"Stage"> | string
    theme?: StringNullableWithAggregatesFilter<"Stage"> | string | null
    etat?: EnumEtatStageWithAggregatesFilter<"Stage"> | $Enums.EtatStage
    dateDebut?: DateTimeWithAggregatesFilter<"Stage"> | Date | string
    dateFin?: DateTimeWithAggregatesFilter<"Stage"> | Date | string
    noteFinale?: StringNullableWithAggregatesFilter<"Stage"> | string | null
  }

  export type CandidatureScoreWhereInput = {
    AND?: CandidatureScoreWhereInput | CandidatureScoreWhereInput[]
    OR?: CandidatureScoreWhereInput[]
    NOT?: CandidatureScoreWhereInput | CandidatureScoreWhereInput[]
    id?: UuidFilter<"CandidatureScore"> | string
    stagiaireId?: UuidFilter<"CandidatureScore"> | string
    scorePertinence?: FloatFilter<"CandidatureScore"> | number
    dateEvaluation?: DateTimeFilter<"CandidatureScore"> | Date | string
    stagiaire?: XOR<StagiaireScalarRelationFilter, StagiaireWhereInput>
  }

  export type CandidatureScoreOrderByWithRelationInput = {
    id?: SortOrder
    stagiaireId?: SortOrder
    scorePertinence?: SortOrder
    dateEvaluation?: SortOrder
    stagiaire?: StagiaireOrderByWithRelationInput
  }

  export type CandidatureScoreWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CandidatureScoreWhereInput | CandidatureScoreWhereInput[]
    OR?: CandidatureScoreWhereInput[]
    NOT?: CandidatureScoreWhereInput | CandidatureScoreWhereInput[]
    stagiaireId?: UuidFilter<"CandidatureScore"> | string
    scorePertinence?: FloatFilter<"CandidatureScore"> | number
    dateEvaluation?: DateTimeFilter<"CandidatureScore"> | Date | string
    stagiaire?: XOR<StagiaireScalarRelationFilter, StagiaireWhereInput>
  }, "id">

  export type CandidatureScoreOrderByWithAggregationInput = {
    id?: SortOrder
    stagiaireId?: SortOrder
    scorePertinence?: SortOrder
    dateEvaluation?: SortOrder
    _count?: CandidatureScoreCountOrderByAggregateInput
    _avg?: CandidatureScoreAvgOrderByAggregateInput
    _max?: CandidatureScoreMaxOrderByAggregateInput
    _min?: CandidatureScoreMinOrderByAggregateInput
    _sum?: CandidatureScoreSumOrderByAggregateInput
  }

  export type CandidatureScoreScalarWhereWithAggregatesInput = {
    AND?: CandidatureScoreScalarWhereWithAggregatesInput | CandidatureScoreScalarWhereWithAggregatesInput[]
    OR?: CandidatureScoreScalarWhereWithAggregatesInput[]
    NOT?: CandidatureScoreScalarWhereWithAggregatesInput | CandidatureScoreScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"CandidatureScore"> | string
    stagiaireId?: UuidWithAggregatesFilter<"CandidatureScore"> | string
    scorePertinence?: FloatWithAggregatesFilter<"CandidatureScore"> | number
    dateEvaluation?: DateTimeWithAggregatesFilter<"CandidatureScore"> | Date | string
  }

  export type SuggestionAffectationWhereInput = {
    AND?: SuggestionAffectationWhereInput | SuggestionAffectationWhereInput[]
    OR?: SuggestionAffectationWhereInput[]
    NOT?: SuggestionAffectationWhereInput | SuggestionAffectationWhereInput[]
    id?: UuidFilter<"SuggestionAffectation"> | string
    stagiaireId?: UuidFilter<"SuggestionAffectation"> | string
    tuteurId?: UuidFilter<"SuggestionAffectation"> | string
    scoreMatch?: FloatFilter<"SuggestionAffectation"> | number
    createdAt?: DateTimeFilter<"SuggestionAffectation"> | Date | string
    stagiaire?: XOR<StagiaireScalarRelationFilter, StagiaireWhereInput>
    tuteur?: XOR<TuteurScalarRelationFilter, TuteurWhereInput>
  }

  export type SuggestionAffectationOrderByWithRelationInput = {
    id?: SortOrder
    stagiaireId?: SortOrder
    tuteurId?: SortOrder
    scoreMatch?: SortOrder
    createdAt?: SortOrder
    stagiaire?: StagiaireOrderByWithRelationInput
    tuteur?: TuteurOrderByWithRelationInput
  }

  export type SuggestionAffectationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SuggestionAffectationWhereInput | SuggestionAffectationWhereInput[]
    OR?: SuggestionAffectationWhereInput[]
    NOT?: SuggestionAffectationWhereInput | SuggestionAffectationWhereInput[]
    stagiaireId?: UuidFilter<"SuggestionAffectation"> | string
    tuteurId?: UuidFilter<"SuggestionAffectation"> | string
    scoreMatch?: FloatFilter<"SuggestionAffectation"> | number
    createdAt?: DateTimeFilter<"SuggestionAffectation"> | Date | string
    stagiaire?: XOR<StagiaireScalarRelationFilter, StagiaireWhereInput>
    tuteur?: XOR<TuteurScalarRelationFilter, TuteurWhereInput>
  }, "id">

  export type SuggestionAffectationOrderByWithAggregationInput = {
    id?: SortOrder
    stagiaireId?: SortOrder
    tuteurId?: SortOrder
    scoreMatch?: SortOrder
    createdAt?: SortOrder
    _count?: SuggestionAffectationCountOrderByAggregateInput
    _avg?: SuggestionAffectationAvgOrderByAggregateInput
    _max?: SuggestionAffectationMaxOrderByAggregateInput
    _min?: SuggestionAffectationMinOrderByAggregateInput
    _sum?: SuggestionAffectationSumOrderByAggregateInput
  }

  export type SuggestionAffectationScalarWhereWithAggregatesInput = {
    AND?: SuggestionAffectationScalarWhereWithAggregatesInput | SuggestionAffectationScalarWhereWithAggregatesInput[]
    OR?: SuggestionAffectationScalarWhereWithAggregatesInput[]
    NOT?: SuggestionAffectationScalarWhereWithAggregatesInput | SuggestionAffectationScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"SuggestionAffectation"> | string
    stagiaireId?: UuidWithAggregatesFilter<"SuggestionAffectation"> | string
    tuteurId?: UuidWithAggregatesFilter<"SuggestionAffectation"> | string
    scoreMatch?: FloatWithAggregatesFilter<"SuggestionAffectation"> | number
    createdAt?: DateTimeWithAggregatesFilter<"SuggestionAffectation"> | Date | string
  }

  export type MessageWhereInput = {
    AND?: MessageWhereInput | MessageWhereInput[]
    OR?: MessageWhereInput[]
    NOT?: MessageWhereInput | MessageWhereInput[]
    id?: UuidFilter<"Message"> | string
    expediteurId?: UuidFilter<"Message"> | string
    destinataireId?: UuidFilter<"Message"> | string
    contenu?: StringFilter<"Message"> | string
    fichierJoint?: StringNullableFilter<"Message"> | string | null
    lu?: BoolFilter<"Message"> | boolean
    envoyeLe?: DateTimeFilter<"Message"> | Date | string
    expediteur?: XOR<UserScalarRelationFilter, UserWhereInput>
    destinataire?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type MessageOrderByWithRelationInput = {
    id?: SortOrder
    expediteurId?: SortOrder
    destinataireId?: SortOrder
    contenu?: SortOrder
    fichierJoint?: SortOrderInput | SortOrder
    lu?: SortOrder
    envoyeLe?: SortOrder
    expediteur?: UserOrderByWithRelationInput
    destinataire?: UserOrderByWithRelationInput
  }

  export type MessageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MessageWhereInput | MessageWhereInput[]
    OR?: MessageWhereInput[]
    NOT?: MessageWhereInput | MessageWhereInput[]
    expediteurId?: UuidFilter<"Message"> | string
    destinataireId?: UuidFilter<"Message"> | string
    contenu?: StringFilter<"Message"> | string
    fichierJoint?: StringNullableFilter<"Message"> | string | null
    lu?: BoolFilter<"Message"> | boolean
    envoyeLe?: DateTimeFilter<"Message"> | Date | string
    expediteur?: XOR<UserScalarRelationFilter, UserWhereInput>
    destinataire?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type MessageOrderByWithAggregationInput = {
    id?: SortOrder
    expediteurId?: SortOrder
    destinataireId?: SortOrder
    contenu?: SortOrder
    fichierJoint?: SortOrderInput | SortOrder
    lu?: SortOrder
    envoyeLe?: SortOrder
    _count?: MessageCountOrderByAggregateInput
    _max?: MessageMaxOrderByAggregateInput
    _min?: MessageMinOrderByAggregateInput
  }

  export type MessageScalarWhereWithAggregatesInput = {
    AND?: MessageScalarWhereWithAggregatesInput | MessageScalarWhereWithAggregatesInput[]
    OR?: MessageScalarWhereWithAggregatesInput[]
    NOT?: MessageScalarWhereWithAggregatesInput | MessageScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Message"> | string
    expediteurId?: UuidWithAggregatesFilter<"Message"> | string
    destinataireId?: UuidWithAggregatesFilter<"Message"> | string
    contenu?: StringWithAggregatesFilter<"Message"> | string
    fichierJoint?: StringNullableWithAggregatesFilter<"Message"> | string | null
    lu?: BoolWithAggregatesFilter<"Message"> | boolean
    envoyeLe?: DateTimeWithAggregatesFilter<"Message"> | Date | string
  }

  export type ThemeTuteurWhereInput = {
    AND?: ThemeTuteurWhereInput | ThemeTuteurWhereInput[]
    OR?: ThemeTuteurWhereInput[]
    NOT?: ThemeTuteurWhereInput | ThemeTuteurWhereInput[]
    id?: UuidFilter<"ThemeTuteur"> | string
    tuteurId?: UuidFilter<"ThemeTuteur"> | string
    titre?: StringFilter<"ThemeTuteur"> | string
    description?: StringNullableFilter<"ThemeTuteur"> | string | null
    disponible?: BoolFilter<"ThemeTuteur"> | boolean
    tuteur?: XOR<TuteurScalarRelationFilter, TuteurWhereInput>
  }

  export type ThemeTuteurOrderByWithRelationInput = {
    id?: SortOrder
    tuteurId?: SortOrder
    titre?: SortOrder
    description?: SortOrderInput | SortOrder
    disponible?: SortOrder
    tuteur?: TuteurOrderByWithRelationInput
  }

  export type ThemeTuteurWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ThemeTuteurWhereInput | ThemeTuteurWhereInput[]
    OR?: ThemeTuteurWhereInput[]
    NOT?: ThemeTuteurWhereInput | ThemeTuteurWhereInput[]
    tuteurId?: UuidFilter<"ThemeTuteur"> | string
    titre?: StringFilter<"ThemeTuteur"> | string
    description?: StringNullableFilter<"ThemeTuteur"> | string | null
    disponible?: BoolFilter<"ThemeTuteur"> | boolean
    tuteur?: XOR<TuteurScalarRelationFilter, TuteurWhereInput>
  }, "id">

  export type ThemeTuteurOrderByWithAggregationInput = {
    id?: SortOrder
    tuteurId?: SortOrder
    titre?: SortOrder
    description?: SortOrderInput | SortOrder
    disponible?: SortOrder
    _count?: ThemeTuteurCountOrderByAggregateInput
    _max?: ThemeTuteurMaxOrderByAggregateInput
    _min?: ThemeTuteurMinOrderByAggregateInput
  }

  export type ThemeTuteurScalarWhereWithAggregatesInput = {
    AND?: ThemeTuteurScalarWhereWithAggregatesInput | ThemeTuteurScalarWhereWithAggregatesInput[]
    OR?: ThemeTuteurScalarWhereWithAggregatesInput[]
    NOT?: ThemeTuteurScalarWhereWithAggregatesInput | ThemeTuteurScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"ThemeTuteur"> | string
    tuteurId?: UuidWithAggregatesFilter<"ThemeTuteur"> | string
    titre?: StringWithAggregatesFilter<"ThemeTuteur"> | string
    description?: StringNullableWithAggregatesFilter<"ThemeTuteur"> | string | null
    disponible?: BoolWithAggregatesFilter<"ThemeTuteur"> | boolean
  }

  export type ParametreSystemeWhereInput = {
    AND?: ParametreSystemeWhereInput | ParametreSystemeWhereInput[]
    OR?: ParametreSystemeWhereInput[]
    NOT?: ParametreSystemeWhereInput | ParametreSystemeWhereInput[]
    id?: IntFilter<"ParametreSysteme"> | number
    cle?: StringFilter<"ParametreSysteme"> | string
    valeur?: StringFilter<"ParametreSysteme"> | string
  }

  export type ParametreSystemeOrderByWithRelationInput = {
    id?: SortOrder
    cle?: SortOrder
    valeur?: SortOrder
  }

  export type ParametreSystemeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    cle?: string
    AND?: ParametreSystemeWhereInput | ParametreSystemeWhereInput[]
    OR?: ParametreSystemeWhereInput[]
    NOT?: ParametreSystemeWhereInput | ParametreSystemeWhereInput[]
    valeur?: StringFilter<"ParametreSysteme"> | string
  }, "id" | "cle">

  export type ParametreSystemeOrderByWithAggregationInput = {
    id?: SortOrder
    cle?: SortOrder
    valeur?: SortOrder
    _count?: ParametreSystemeCountOrderByAggregateInput
    _avg?: ParametreSystemeAvgOrderByAggregateInput
    _max?: ParametreSystemeMaxOrderByAggregateInput
    _min?: ParametreSystemeMinOrderByAggregateInput
    _sum?: ParametreSystemeSumOrderByAggregateInput
  }

  export type ParametreSystemeScalarWhereWithAggregatesInput = {
    AND?: ParametreSystemeScalarWhereWithAggregatesInput | ParametreSystemeScalarWhereWithAggregatesInput[]
    OR?: ParametreSystemeScalarWhereWithAggregatesInput[]
    NOT?: ParametreSystemeScalarWhereWithAggregatesInput | ParametreSystemeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ParametreSysteme"> | number
    cle?: StringWithAggregatesFilter<"ParametreSysteme"> | string
    valeur?: StringWithAggregatesFilter<"ParametreSysteme"> | string
  }

  export type JournalActionWhereInput = {
    AND?: JournalActionWhereInput | JournalActionWhereInput[]
    OR?: JournalActionWhereInput[]
    NOT?: JournalActionWhereInput | JournalActionWhereInput[]
    id?: UuidFilter<"JournalAction"> | string
    userId?: UuidFilter<"JournalAction"> | string
    action?: StringFilter<"JournalAction"> | string
    cible?: StringFilter<"JournalAction"> | string
    timestamp?: DateTimeFilter<"JournalAction"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type JournalActionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    cible?: SortOrder
    timestamp?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type JournalActionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: JournalActionWhereInput | JournalActionWhereInput[]
    OR?: JournalActionWhereInput[]
    NOT?: JournalActionWhereInput | JournalActionWhereInput[]
    userId?: UuidFilter<"JournalAction"> | string
    action?: StringFilter<"JournalAction"> | string
    cible?: StringFilter<"JournalAction"> | string
    timestamp?: DateTimeFilter<"JournalAction"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type JournalActionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    cible?: SortOrder
    timestamp?: SortOrder
    _count?: JournalActionCountOrderByAggregateInput
    _max?: JournalActionMaxOrderByAggregateInput
    _min?: JournalActionMinOrderByAggregateInput
  }

  export type JournalActionScalarWhereWithAggregatesInput = {
    AND?: JournalActionScalarWhereWithAggregatesInput | JournalActionScalarWhereWithAggregatesInput[]
    OR?: JournalActionScalarWhereWithAggregatesInput[]
    NOT?: JournalActionScalarWhereWithAggregatesInput | JournalActionScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"JournalAction"> | string
    userId?: UuidWithAggregatesFilter<"JournalAction"> | string
    action?: StringWithAggregatesFilter<"JournalAction"> | string
    cible?: StringWithAggregatesFilter<"JournalAction"> | string
    timestamp?: DateTimeWithAggregatesFilter<"JournalAction"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    profile?: UserProfileCreateNestedOneWithoutUserInput
    tuteur?: TuteurCreateNestedOneWithoutUserInput
    stagiaire?: StagiaireCreateNestedOneWithoutUserInput
    dpaf?: DPAFCreateNestedOneWithoutUserInput
    structure?: StructureCreateNestedOneWithoutUserInput
    messagesSent?: MessageCreateNestedManyWithoutExpediteurInput
    messagesReceived?: MessageCreateNestedManyWithoutDestinataireInput
    journalActions?: JournalActionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    tuteur?: TuteurUncheckedCreateNestedOneWithoutUserInput
    stagiaire?: StagiaireUncheckedCreateNestedOneWithoutUserInput
    dpaf?: DPAFUncheckedCreateNestedOneWithoutUserInput
    structure?: StructureUncheckedCreateNestedOneWithoutUserInput
    messagesSent?: MessageUncheckedCreateNestedManyWithoutExpediteurInput
    messagesReceived?: MessageUncheckedCreateNestedManyWithoutDestinataireInput
    journalActions?: JournalActionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    tuteur?: TuteurUpdateOneWithoutUserNestedInput
    stagiaire?: StagiaireUpdateOneWithoutUserNestedInput
    dpaf?: DPAFUpdateOneWithoutUserNestedInput
    structure?: StructureUpdateOneWithoutUserNestedInput
    messagesSent?: MessageUpdateManyWithoutExpediteurNestedInput
    messagesReceived?: MessageUpdateManyWithoutDestinataireNestedInput
    journalActions?: JournalActionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    tuteur?: TuteurUncheckedUpdateOneWithoutUserNestedInput
    stagiaire?: StagiaireUncheckedUpdateOneWithoutUserNestedInput
    dpaf?: DPAFUncheckedUpdateOneWithoutUserNestedInput
    structure?: StructureUncheckedUpdateOneWithoutUserNestedInput
    messagesSent?: MessageUncheckedUpdateManyWithoutExpediteurNestedInput
    messagesReceived?: MessageUncheckedUpdateManyWithoutDestinataireNestedInput
    journalActions?: JournalActionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserProfileCreateInput = {
    nom?: string | null
    prenom?: string | null
    telephone?: string | null
    photo?: string | null
    adresse?: string | null
    autresInfos?: NullableJsonNullValueInput | InputJsonValue
    user: UserCreateNestedOneWithoutProfileInput
  }

  export type UserProfileUncheckedCreateInput = {
    userId: string
    nom?: string | null
    prenom?: string | null
    telephone?: string | null
    photo?: string | null
    adresse?: string | null
    autresInfos?: NullableJsonNullValueInput | InputJsonValue
  }

  export type UserProfileUpdateInput = {
    nom?: NullableStringFieldUpdateOperationsInput | string | null
    prenom?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    adresse?: NullableStringFieldUpdateOperationsInput | string | null
    autresInfos?: NullableJsonNullValueInput | InputJsonValue
    user?: UserUpdateOneRequiredWithoutProfileNestedInput
  }

  export type UserProfileUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    nom?: NullableStringFieldUpdateOperationsInput | string | null
    prenom?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    adresse?: NullableStringFieldUpdateOperationsInput | string | null
    autresInfos?: NullableJsonNullValueInput | InputJsonValue
  }

  export type UserProfileCreateManyInput = {
    userId: string
    nom?: string | null
    prenom?: string | null
    telephone?: string | null
    photo?: string | null
    adresse?: string | null
    autresInfos?: NullableJsonNullValueInput | InputJsonValue
  }

  export type UserProfileUpdateManyMutationInput = {
    nom?: NullableStringFieldUpdateOperationsInput | string | null
    prenom?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    adresse?: NullableStringFieldUpdateOperationsInput | string | null
    autresInfos?: NullableJsonNullValueInput | InputJsonValue
  }

  export type UserProfileUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    nom?: NullableStringFieldUpdateOperationsInput | string | null
    prenom?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    adresse?: NullableStringFieldUpdateOperationsInput | string | null
    autresInfos?: NullableJsonNullValueInput | InputJsonValue
  }

  export type StructureCreateInput = {
    id?: string
    nomStructure: string
    type?: string | null
    adresse?: string | null
    emailContact?: string | null
    telephoneContact?: string | null
    user: UserCreateNestedOneWithoutStructureInput
    tuteurs?: TuteurCreateNestedManyWithoutStructureInput
    stagiaires?: StagiaireCreateNestedManyWithoutStructureInput
    demandesStages?: DemandeStageCreateNestedManyWithoutStructureCibleInput
    stages?: StageCreateNestedManyWithoutStructureInput
  }

  export type StructureUncheckedCreateInput = {
    id?: string
    userId: string
    nomStructure: string
    type?: string | null
    adresse?: string | null
    emailContact?: string | null
    telephoneContact?: string | null
    tuteurs?: TuteurUncheckedCreateNestedManyWithoutStructureInput
    stagiaires?: StagiaireUncheckedCreateNestedManyWithoutStructureInput
    demandesStages?: DemandeStageUncheckedCreateNestedManyWithoutStructureCibleInput
    stages?: StageUncheckedCreateNestedManyWithoutStructureInput
  }

  export type StructureUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nomStructure?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    adresse?: NullableStringFieldUpdateOperationsInput | string | null
    emailContact?: NullableStringFieldUpdateOperationsInput | string | null
    telephoneContact?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutStructureNestedInput
    tuteurs?: TuteurUpdateManyWithoutStructureNestedInput
    stagiaires?: StagiaireUpdateManyWithoutStructureNestedInput
    demandesStages?: DemandeStageUpdateManyWithoutStructureCibleNestedInput
    stages?: StageUpdateManyWithoutStructureNestedInput
  }

  export type StructureUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    nomStructure?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    adresse?: NullableStringFieldUpdateOperationsInput | string | null
    emailContact?: NullableStringFieldUpdateOperationsInput | string | null
    telephoneContact?: NullableStringFieldUpdateOperationsInput | string | null
    tuteurs?: TuteurUncheckedUpdateManyWithoutStructureNestedInput
    stagiaires?: StagiaireUncheckedUpdateManyWithoutStructureNestedInput
    demandesStages?: DemandeStageUncheckedUpdateManyWithoutStructureCibleNestedInput
    stages?: StageUncheckedUpdateManyWithoutStructureNestedInput
  }

  export type StructureCreateManyInput = {
    id?: string
    userId: string
    nomStructure: string
    type?: string | null
    adresse?: string | null
    emailContact?: string | null
    telephoneContact?: string | null
  }

  export type StructureUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nomStructure?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    adresse?: NullableStringFieldUpdateOperationsInput | string | null
    emailContact?: NullableStringFieldUpdateOperationsInput | string | null
    telephoneContact?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StructureUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    nomStructure?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    adresse?: NullableStringFieldUpdateOperationsInput | string | null
    emailContact?: NullableStringFieldUpdateOperationsInput | string | null
    telephoneContact?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TuteurCreateInput = {
    fonction?: string | null
    disponibilite?: boolean
    competences?: TuteurCreatecompetencesInput | string[]
    user: UserCreateNestedOneWithoutTuteurInput
    structure?: StructureCreateNestedOneWithoutTuteursInput
    stagiaires?: StagiaireCreateNestedManyWithoutTuteurInput
    stages?: StageCreateNestedManyWithoutTuteurInput
    themes?: ThemeTuteurCreateNestedManyWithoutTuteurInput
    suggestions?: SuggestionAffectationCreateNestedManyWithoutTuteurInput
  }

  export type TuteurUncheckedCreateInput = {
    userId: string
    structureId?: string | null
    fonction?: string | null
    disponibilite?: boolean
    competences?: TuteurCreatecompetencesInput | string[]
    stagiaires?: StagiaireUncheckedCreateNestedManyWithoutTuteurInput
    stages?: StageUncheckedCreateNestedManyWithoutTuteurInput
    themes?: ThemeTuteurUncheckedCreateNestedManyWithoutTuteurInput
    suggestions?: SuggestionAffectationUncheckedCreateNestedManyWithoutTuteurInput
  }

  export type TuteurUpdateInput = {
    fonction?: NullableStringFieldUpdateOperationsInput | string | null
    disponibilite?: BoolFieldUpdateOperationsInput | boolean
    competences?: TuteurUpdatecompetencesInput | string[]
    user?: UserUpdateOneRequiredWithoutTuteurNestedInput
    structure?: StructureUpdateOneWithoutTuteursNestedInput
    stagiaires?: StagiaireUpdateManyWithoutTuteurNestedInput
    stages?: StageUpdateManyWithoutTuteurNestedInput
    themes?: ThemeTuteurUpdateManyWithoutTuteurNestedInput
    suggestions?: SuggestionAffectationUpdateManyWithoutTuteurNestedInput
  }

  export type TuteurUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    structureId?: NullableStringFieldUpdateOperationsInput | string | null
    fonction?: NullableStringFieldUpdateOperationsInput | string | null
    disponibilite?: BoolFieldUpdateOperationsInput | boolean
    competences?: TuteurUpdatecompetencesInput | string[]
    stagiaires?: StagiaireUncheckedUpdateManyWithoutTuteurNestedInput
    stages?: StageUncheckedUpdateManyWithoutTuteurNestedInput
    themes?: ThemeTuteurUncheckedUpdateManyWithoutTuteurNestedInput
    suggestions?: SuggestionAffectationUncheckedUpdateManyWithoutTuteurNestedInput
  }

  export type TuteurCreateManyInput = {
    userId: string
    structureId?: string | null
    fonction?: string | null
    disponibilite?: boolean
    competences?: TuteurCreatecompetencesInput | string[]
  }

  export type TuteurUpdateManyMutationInput = {
    fonction?: NullableStringFieldUpdateOperationsInput | string | null
    disponibilite?: BoolFieldUpdateOperationsInput | boolean
    competences?: TuteurUpdatecompetencesInput | string[]
  }

  export type TuteurUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    structureId?: NullableStringFieldUpdateOperationsInput | string | null
    fonction?: NullableStringFieldUpdateOperationsInput | string | null
    disponibilite?: BoolFieldUpdateOperationsInput | boolean
    competences?: TuteurUpdatecompetencesInput | string[]
  }

  export type StagiaireCreateInput = {
    codeDemande?: string | null
    statutDemande?: $Enums.StatutDemande | null
    dateDebut?: Date | string | null
    dateFin?: Date | string | null
    user: UserCreateNestedOneWithoutStagiaireInput
    structure?: StructureCreateNestedOneWithoutStagiairesInput
    tuteur?: TuteurCreateNestedOneWithoutStagiairesInput
    demandesStages?: DemandeStageCreateNestedManyWithoutStagiaireInput
    stages?: StageCreateNestedManyWithoutStagiaireInput
    candidatureScores?: CandidatureScoreCreateNestedManyWithoutStagiaireInput
    suggestions?: SuggestionAffectationCreateNestedManyWithoutStagiaireInput
  }

  export type StagiaireUncheckedCreateInput = {
    userId: string
    codeDemande?: string | null
    statutDemande?: $Enums.StatutDemande | null
    structureAffecteeId?: string | null
    tuteurId?: string | null
    dateDebut?: Date | string | null
    dateFin?: Date | string | null
    demandesStages?: DemandeStageUncheckedCreateNestedManyWithoutStagiaireInput
    stages?: StageUncheckedCreateNestedManyWithoutStagiaireInput
    candidatureScores?: CandidatureScoreUncheckedCreateNestedManyWithoutStagiaireInput
    suggestions?: SuggestionAffectationUncheckedCreateNestedManyWithoutStagiaireInput
  }

  export type StagiaireUpdateInput = {
    codeDemande?: NullableStringFieldUpdateOperationsInput | string | null
    statutDemande?: NullableEnumStatutDemandeFieldUpdateOperationsInput | $Enums.StatutDemande | null
    dateDebut?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dateFin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutStagiaireNestedInput
    structure?: StructureUpdateOneWithoutStagiairesNestedInput
    tuteur?: TuteurUpdateOneWithoutStagiairesNestedInput
    demandesStages?: DemandeStageUpdateManyWithoutStagiaireNestedInput
    stages?: StageUpdateManyWithoutStagiaireNestedInput
    candidatureScores?: CandidatureScoreUpdateManyWithoutStagiaireNestedInput
    suggestions?: SuggestionAffectationUpdateManyWithoutStagiaireNestedInput
  }

  export type StagiaireUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    codeDemande?: NullableStringFieldUpdateOperationsInput | string | null
    statutDemande?: NullableEnumStatutDemandeFieldUpdateOperationsInput | $Enums.StatutDemande | null
    structureAffecteeId?: NullableStringFieldUpdateOperationsInput | string | null
    tuteurId?: NullableStringFieldUpdateOperationsInput | string | null
    dateDebut?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dateFin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    demandesStages?: DemandeStageUncheckedUpdateManyWithoutStagiaireNestedInput
    stages?: StageUncheckedUpdateManyWithoutStagiaireNestedInput
    candidatureScores?: CandidatureScoreUncheckedUpdateManyWithoutStagiaireNestedInput
    suggestions?: SuggestionAffectationUncheckedUpdateManyWithoutStagiaireNestedInput
  }

  export type StagiaireCreateManyInput = {
    userId: string
    codeDemande?: string | null
    statutDemande?: $Enums.StatutDemande | null
    structureAffecteeId?: string | null
    tuteurId?: string | null
    dateDebut?: Date | string | null
    dateFin?: Date | string | null
  }

  export type StagiaireUpdateManyMutationInput = {
    codeDemande?: NullableStringFieldUpdateOperationsInput | string | null
    statutDemande?: NullableEnumStatutDemandeFieldUpdateOperationsInput | $Enums.StatutDemande | null
    dateDebut?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dateFin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type StagiaireUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    codeDemande?: NullableStringFieldUpdateOperationsInput | string | null
    statutDemande?: NullableEnumStatutDemandeFieldUpdateOperationsInput | $Enums.StatutDemande | null
    structureAffecteeId?: NullableStringFieldUpdateOperationsInput | string | null
    tuteurId?: NullableStringFieldUpdateOperationsInput | string | null
    dateDebut?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dateFin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type DPAFCreateInput = {
    user: UserCreateNestedOneWithoutDpafInput
  }

  export type DPAFUncheckedCreateInput = {
    userId: string
  }

  export type DPAFUpdateInput = {
    user?: UserUpdateOneRequiredWithoutDpafNestedInput
  }

  export type DPAFUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type DPAFCreateManyInput = {
    userId: string
  }

  export type DPAFUpdateManyMutationInput = {

  }

  export type DPAFUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type DemandeStageCreateInput = {
    id?: string
    dateDemande?: Date | string
    etat?: $Enums.EtatDemande
    motifRefus?: string | null
    dateTraitement?: Date | string | null
    stagiaire: StagiaireCreateNestedOneWithoutDemandesStagesInput
    structureCible?: StructureCreateNestedOneWithoutDemandesStagesInput
  }

  export type DemandeStageUncheckedCreateInput = {
    id?: string
    stagiaireId: string
    dateDemande?: Date | string
    etat?: $Enums.EtatDemande
    motifRefus?: string | null
    dateTraitement?: Date | string | null
    structureCibleId?: string | null
  }

  export type DemandeStageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateDemande?: DateTimeFieldUpdateOperationsInput | Date | string
    etat?: EnumEtatDemandeFieldUpdateOperationsInput | $Enums.EtatDemande
    motifRefus?: NullableStringFieldUpdateOperationsInput | string | null
    dateTraitement?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stagiaire?: StagiaireUpdateOneRequiredWithoutDemandesStagesNestedInput
    structureCible?: StructureUpdateOneWithoutDemandesStagesNestedInput
  }

  export type DemandeStageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    stagiaireId?: StringFieldUpdateOperationsInput | string
    dateDemande?: DateTimeFieldUpdateOperationsInput | Date | string
    etat?: EnumEtatDemandeFieldUpdateOperationsInput | $Enums.EtatDemande
    motifRefus?: NullableStringFieldUpdateOperationsInput | string | null
    dateTraitement?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    structureCibleId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DemandeStageCreateManyInput = {
    id?: string
    stagiaireId: string
    dateDemande?: Date | string
    etat?: $Enums.EtatDemande
    motifRefus?: string | null
    dateTraitement?: Date | string | null
    structureCibleId?: string | null
  }

  export type DemandeStageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateDemande?: DateTimeFieldUpdateOperationsInput | Date | string
    etat?: EnumEtatDemandeFieldUpdateOperationsInput | $Enums.EtatDemande
    motifRefus?: NullableStringFieldUpdateOperationsInput | string | null
    dateTraitement?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type DemandeStageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    stagiaireId?: StringFieldUpdateOperationsInput | string
    dateDemande?: DateTimeFieldUpdateOperationsInput | Date | string
    etat?: EnumEtatDemandeFieldUpdateOperationsInput | $Enums.EtatDemande
    motifRefus?: NullableStringFieldUpdateOperationsInput | string | null
    dateTraitement?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    structureCibleId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StageCreateInput = {
    id?: string
    theme?: string | null
    etat?: $Enums.EtatStage
    dateDebut: Date | string
    dateFin: Date | string
    noteFinale?: string | null
    stagiaire: StagiaireCreateNestedOneWithoutStagesInput
    tuteur: TuteurCreateNestedOneWithoutStagesInput
    structure: StructureCreateNestedOneWithoutStagesInput
  }

  export type StageUncheckedCreateInput = {
    id?: string
    stagiaireId: string
    tuteurId: string
    structureId: string
    theme?: string | null
    etat?: $Enums.EtatStage
    dateDebut: Date | string
    dateFin: Date | string
    noteFinale?: string | null
  }

  export type StageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    etat?: EnumEtatStageFieldUpdateOperationsInput | $Enums.EtatStage
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    noteFinale?: NullableStringFieldUpdateOperationsInput | string | null
    stagiaire?: StagiaireUpdateOneRequiredWithoutStagesNestedInput
    tuteur?: TuteurUpdateOneRequiredWithoutStagesNestedInput
    structure?: StructureUpdateOneRequiredWithoutStagesNestedInput
  }

  export type StageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    stagiaireId?: StringFieldUpdateOperationsInput | string
    tuteurId?: StringFieldUpdateOperationsInput | string
    structureId?: StringFieldUpdateOperationsInput | string
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    etat?: EnumEtatStageFieldUpdateOperationsInput | $Enums.EtatStage
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    noteFinale?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StageCreateManyInput = {
    id?: string
    stagiaireId: string
    tuteurId: string
    structureId: string
    theme?: string | null
    etat?: $Enums.EtatStage
    dateDebut: Date | string
    dateFin: Date | string
    noteFinale?: string | null
  }

  export type StageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    etat?: EnumEtatStageFieldUpdateOperationsInput | $Enums.EtatStage
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    noteFinale?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    stagiaireId?: StringFieldUpdateOperationsInput | string
    tuteurId?: StringFieldUpdateOperationsInput | string
    structureId?: StringFieldUpdateOperationsInput | string
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    etat?: EnumEtatStageFieldUpdateOperationsInput | $Enums.EtatStage
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    noteFinale?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CandidatureScoreCreateInput = {
    id?: string
    scorePertinence: number
    dateEvaluation?: Date | string
    stagiaire: StagiaireCreateNestedOneWithoutCandidatureScoresInput
  }

  export type CandidatureScoreUncheckedCreateInput = {
    id?: string
    stagiaireId: string
    scorePertinence: number
    dateEvaluation?: Date | string
  }

  export type CandidatureScoreUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    scorePertinence?: FloatFieldUpdateOperationsInput | number
    dateEvaluation?: DateTimeFieldUpdateOperationsInput | Date | string
    stagiaire?: StagiaireUpdateOneRequiredWithoutCandidatureScoresNestedInput
  }

  export type CandidatureScoreUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    stagiaireId?: StringFieldUpdateOperationsInput | string
    scorePertinence?: FloatFieldUpdateOperationsInput | number
    dateEvaluation?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CandidatureScoreCreateManyInput = {
    id?: string
    stagiaireId: string
    scorePertinence: number
    dateEvaluation?: Date | string
  }

  export type CandidatureScoreUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    scorePertinence?: FloatFieldUpdateOperationsInput | number
    dateEvaluation?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CandidatureScoreUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    stagiaireId?: StringFieldUpdateOperationsInput | string
    scorePertinence?: FloatFieldUpdateOperationsInput | number
    dateEvaluation?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SuggestionAffectationCreateInput = {
    id?: string
    scoreMatch: number
    createdAt?: Date | string
    stagiaire: StagiaireCreateNestedOneWithoutSuggestionsInput
    tuteur: TuteurCreateNestedOneWithoutSuggestionsInput
  }

  export type SuggestionAffectationUncheckedCreateInput = {
    id?: string
    stagiaireId: string
    tuteurId: string
    scoreMatch: number
    createdAt?: Date | string
  }

  export type SuggestionAffectationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    scoreMatch?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stagiaire?: StagiaireUpdateOneRequiredWithoutSuggestionsNestedInput
    tuteur?: TuteurUpdateOneRequiredWithoutSuggestionsNestedInput
  }

  export type SuggestionAffectationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    stagiaireId?: StringFieldUpdateOperationsInput | string
    tuteurId?: StringFieldUpdateOperationsInput | string
    scoreMatch?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SuggestionAffectationCreateManyInput = {
    id?: string
    stagiaireId: string
    tuteurId: string
    scoreMatch: number
    createdAt?: Date | string
  }

  export type SuggestionAffectationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    scoreMatch?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SuggestionAffectationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    stagiaireId?: StringFieldUpdateOperationsInput | string
    tuteurId?: StringFieldUpdateOperationsInput | string
    scoreMatch?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageCreateInput = {
    id?: string
    contenu: string
    fichierJoint?: string | null
    lu?: boolean
    envoyeLe?: Date | string
    expediteur: UserCreateNestedOneWithoutMessagesSentInput
    destinataire: UserCreateNestedOneWithoutMessagesReceivedInput
  }

  export type MessageUncheckedCreateInput = {
    id?: string
    expediteurId: string
    destinataireId: string
    contenu: string
    fichierJoint?: string | null
    lu?: boolean
    envoyeLe?: Date | string
  }

  export type MessageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    contenu?: StringFieldUpdateOperationsInput | string
    fichierJoint?: NullableStringFieldUpdateOperationsInput | string | null
    lu?: BoolFieldUpdateOperationsInput | boolean
    envoyeLe?: DateTimeFieldUpdateOperationsInput | Date | string
    expediteur?: UserUpdateOneRequiredWithoutMessagesSentNestedInput
    destinataire?: UserUpdateOneRequiredWithoutMessagesReceivedNestedInput
  }

  export type MessageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    expediteurId?: StringFieldUpdateOperationsInput | string
    destinataireId?: StringFieldUpdateOperationsInput | string
    contenu?: StringFieldUpdateOperationsInput | string
    fichierJoint?: NullableStringFieldUpdateOperationsInput | string | null
    lu?: BoolFieldUpdateOperationsInput | boolean
    envoyeLe?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageCreateManyInput = {
    id?: string
    expediteurId: string
    destinataireId: string
    contenu: string
    fichierJoint?: string | null
    lu?: boolean
    envoyeLe?: Date | string
  }

  export type MessageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    contenu?: StringFieldUpdateOperationsInput | string
    fichierJoint?: NullableStringFieldUpdateOperationsInput | string | null
    lu?: BoolFieldUpdateOperationsInput | boolean
    envoyeLe?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    expediteurId?: StringFieldUpdateOperationsInput | string
    destinataireId?: StringFieldUpdateOperationsInput | string
    contenu?: StringFieldUpdateOperationsInput | string
    fichierJoint?: NullableStringFieldUpdateOperationsInput | string | null
    lu?: BoolFieldUpdateOperationsInput | boolean
    envoyeLe?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ThemeTuteurCreateInput = {
    id?: string
    titre: string
    description?: string | null
    disponible?: boolean
    tuteur: TuteurCreateNestedOneWithoutThemesInput
  }

  export type ThemeTuteurUncheckedCreateInput = {
    id?: string
    tuteurId: string
    titre: string
    description?: string | null
    disponible?: boolean
  }

  export type ThemeTuteurUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    titre?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    disponible?: BoolFieldUpdateOperationsInput | boolean
    tuteur?: TuteurUpdateOneRequiredWithoutThemesNestedInput
  }

  export type ThemeTuteurUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tuteurId?: StringFieldUpdateOperationsInput | string
    titre?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    disponible?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ThemeTuteurCreateManyInput = {
    id?: string
    tuteurId: string
    titre: string
    description?: string | null
    disponible?: boolean
  }

  export type ThemeTuteurUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    titre?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    disponible?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ThemeTuteurUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tuteurId?: StringFieldUpdateOperationsInput | string
    titre?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    disponible?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ParametreSystemeCreateInput = {
    cle: string
    valeur: string
  }

  export type ParametreSystemeUncheckedCreateInput = {
    id?: number
    cle: string
    valeur: string
  }

  export type ParametreSystemeUpdateInput = {
    cle?: StringFieldUpdateOperationsInput | string
    valeur?: StringFieldUpdateOperationsInput | string
  }

  export type ParametreSystemeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    cle?: StringFieldUpdateOperationsInput | string
    valeur?: StringFieldUpdateOperationsInput | string
  }

  export type ParametreSystemeCreateManyInput = {
    id?: number
    cle: string
    valeur: string
  }

  export type ParametreSystemeUpdateManyMutationInput = {
    cle?: StringFieldUpdateOperationsInput | string
    valeur?: StringFieldUpdateOperationsInput | string
  }

  export type ParametreSystemeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    cle?: StringFieldUpdateOperationsInput | string
    valeur?: StringFieldUpdateOperationsInput | string
  }

  export type JournalActionCreateInput = {
    id?: string
    action: string
    cible: string
    timestamp?: Date | string
    user: UserCreateNestedOneWithoutJournalActionsInput
  }

  export type JournalActionUncheckedCreateInput = {
    id?: string
    userId: string
    action: string
    cible: string
    timestamp?: Date | string
  }

  export type JournalActionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    cible?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutJournalActionsNestedInput
  }

  export type JournalActionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    cible?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JournalActionCreateManyInput = {
    id?: string
    userId: string
    action: string
    cible: string
    timestamp?: Date | string
  }

  export type JournalActionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    cible?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JournalActionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    cible?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UuidFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidFilter<$PrismaModel> | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserProfileNullableScalarRelationFilter = {
    is?: UserProfileWhereInput | null
    isNot?: UserProfileWhereInput | null
  }

  export type TuteurNullableScalarRelationFilter = {
    is?: TuteurWhereInput | null
    isNot?: TuteurWhereInput | null
  }

  export type StagiaireNullableScalarRelationFilter = {
    is?: StagiaireWhereInput | null
    isNot?: StagiaireWhereInput | null
  }

  export type DPAFNullableScalarRelationFilter = {
    is?: DPAFWhereInput | null
    isNot?: DPAFWhereInput | null
  }

  export type StructureNullableScalarRelationFilter = {
    is?: StructureWhereInput | null
    isNot?: StructureWhereInput | null
  }

  export type MessageListRelationFilter = {
    every?: MessageWhereInput
    some?: MessageWhereInput
    none?: MessageWhereInput
  }

  export type JournalActionListRelationFilter = {
    every?: JournalActionWhereInput
    some?: JournalActionWhereInput
    none?: JournalActionWhereInput
  }

  export type MessageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type JournalActionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
  }

  export type UuidWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UserProfileCountOrderByAggregateInput = {
    userId?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    telephone?: SortOrder
    photo?: SortOrder
    adresse?: SortOrder
    autresInfos?: SortOrder
  }

  export type UserProfileMaxOrderByAggregateInput = {
    userId?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    telephone?: SortOrder
    photo?: SortOrder
    adresse?: SortOrder
  }

  export type UserProfileMinOrderByAggregateInput = {
    userId?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    telephone?: SortOrder
    photo?: SortOrder
    adresse?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type TuteurListRelationFilter = {
    every?: TuteurWhereInput
    some?: TuteurWhereInput
    none?: TuteurWhereInput
  }

  export type StagiaireListRelationFilter = {
    every?: StagiaireWhereInput
    some?: StagiaireWhereInput
    none?: StagiaireWhereInput
  }

  export type DemandeStageListRelationFilter = {
    every?: DemandeStageWhereInput
    some?: DemandeStageWhereInput
    none?: DemandeStageWhereInput
  }

  export type StageListRelationFilter = {
    every?: StageWhereInput
    some?: StageWhereInput
    none?: StageWhereInput
  }

  export type TuteurOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StagiaireOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DemandeStageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StructureCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    nomStructure?: SortOrder
    type?: SortOrder
    adresse?: SortOrder
    emailContact?: SortOrder
    telephoneContact?: SortOrder
  }

  export type StructureMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    nomStructure?: SortOrder
    type?: SortOrder
    adresse?: SortOrder
    emailContact?: SortOrder
    telephoneContact?: SortOrder
  }

  export type StructureMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    nomStructure?: SortOrder
    type?: SortOrder
    adresse?: SortOrder
    emailContact?: SortOrder
    telephoneContact?: SortOrder
  }

  export type UuidNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidNullableFilter<$PrismaModel> | string | null
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type ThemeTuteurListRelationFilter = {
    every?: ThemeTuteurWhereInput
    some?: ThemeTuteurWhereInput
    none?: ThemeTuteurWhereInput
  }

  export type SuggestionAffectationListRelationFilter = {
    every?: SuggestionAffectationWhereInput
    some?: SuggestionAffectationWhereInput
    none?: SuggestionAffectationWhereInput
  }

  export type ThemeTuteurOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SuggestionAffectationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TuteurCountOrderByAggregateInput = {
    userId?: SortOrder
    structureId?: SortOrder
    fonction?: SortOrder
    disponibilite?: SortOrder
    competences?: SortOrder
  }

  export type TuteurMaxOrderByAggregateInput = {
    userId?: SortOrder
    structureId?: SortOrder
    fonction?: SortOrder
    disponibilite?: SortOrder
  }

  export type TuteurMinOrderByAggregateInput = {
    userId?: SortOrder
    structureId?: SortOrder
    fonction?: SortOrder
    disponibilite?: SortOrder
  }

  export type UuidNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumStatutDemandeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.StatutDemande | EnumStatutDemandeFieldRefInput<$PrismaModel> | null
    in?: $Enums.StatutDemande[] | ListEnumStatutDemandeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.StatutDemande[] | ListEnumStatutDemandeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumStatutDemandeNullableFilter<$PrismaModel> | $Enums.StatutDemande | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type CandidatureScoreListRelationFilter = {
    every?: CandidatureScoreWhereInput
    some?: CandidatureScoreWhereInput
    none?: CandidatureScoreWhereInput
  }

  export type CandidatureScoreOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StagiaireCountOrderByAggregateInput = {
    userId?: SortOrder
    codeDemande?: SortOrder
    statutDemande?: SortOrder
    structureAffecteeId?: SortOrder
    tuteurId?: SortOrder
    dateDebut?: SortOrder
    dateFin?: SortOrder
  }

  export type StagiaireMaxOrderByAggregateInput = {
    userId?: SortOrder
    codeDemande?: SortOrder
    statutDemande?: SortOrder
    structureAffecteeId?: SortOrder
    tuteurId?: SortOrder
    dateDebut?: SortOrder
    dateFin?: SortOrder
  }

  export type StagiaireMinOrderByAggregateInput = {
    userId?: SortOrder
    codeDemande?: SortOrder
    statutDemande?: SortOrder
    structureAffecteeId?: SortOrder
    tuteurId?: SortOrder
    dateDebut?: SortOrder
    dateFin?: SortOrder
  }

  export type EnumStatutDemandeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatutDemande | EnumStatutDemandeFieldRefInput<$PrismaModel> | null
    in?: $Enums.StatutDemande[] | ListEnumStatutDemandeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.StatutDemande[] | ListEnumStatutDemandeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumStatutDemandeNullableWithAggregatesFilter<$PrismaModel> | $Enums.StatutDemande | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumStatutDemandeNullableFilter<$PrismaModel>
    _max?: NestedEnumStatutDemandeNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type DPAFCountOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type DPAFMaxOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type DPAFMinOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type EnumEtatDemandeFilter<$PrismaModel = never> = {
    equals?: $Enums.EtatDemande | EnumEtatDemandeFieldRefInput<$PrismaModel>
    in?: $Enums.EtatDemande[] | ListEnumEtatDemandeFieldRefInput<$PrismaModel>
    notIn?: $Enums.EtatDemande[] | ListEnumEtatDemandeFieldRefInput<$PrismaModel>
    not?: NestedEnumEtatDemandeFilter<$PrismaModel> | $Enums.EtatDemande
  }

  export type StagiaireScalarRelationFilter = {
    is?: StagiaireWhereInput
    isNot?: StagiaireWhereInput
  }

  export type DemandeStageCountOrderByAggregateInput = {
    id?: SortOrder
    stagiaireId?: SortOrder
    dateDemande?: SortOrder
    etat?: SortOrder
    motifRefus?: SortOrder
    dateTraitement?: SortOrder
    structureCibleId?: SortOrder
  }

  export type DemandeStageMaxOrderByAggregateInput = {
    id?: SortOrder
    stagiaireId?: SortOrder
    dateDemande?: SortOrder
    etat?: SortOrder
    motifRefus?: SortOrder
    dateTraitement?: SortOrder
    structureCibleId?: SortOrder
  }

  export type DemandeStageMinOrderByAggregateInput = {
    id?: SortOrder
    stagiaireId?: SortOrder
    dateDemande?: SortOrder
    etat?: SortOrder
    motifRefus?: SortOrder
    dateTraitement?: SortOrder
    structureCibleId?: SortOrder
  }

  export type EnumEtatDemandeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EtatDemande | EnumEtatDemandeFieldRefInput<$PrismaModel>
    in?: $Enums.EtatDemande[] | ListEnumEtatDemandeFieldRefInput<$PrismaModel>
    notIn?: $Enums.EtatDemande[] | ListEnumEtatDemandeFieldRefInput<$PrismaModel>
    not?: NestedEnumEtatDemandeWithAggregatesFilter<$PrismaModel> | $Enums.EtatDemande
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEtatDemandeFilter<$PrismaModel>
    _max?: NestedEnumEtatDemandeFilter<$PrismaModel>
  }

  export type EnumEtatStageFilter<$PrismaModel = never> = {
    equals?: $Enums.EtatStage | EnumEtatStageFieldRefInput<$PrismaModel>
    in?: $Enums.EtatStage[] | ListEnumEtatStageFieldRefInput<$PrismaModel>
    notIn?: $Enums.EtatStage[] | ListEnumEtatStageFieldRefInput<$PrismaModel>
    not?: NestedEnumEtatStageFilter<$PrismaModel> | $Enums.EtatStage
  }

  export type TuteurScalarRelationFilter = {
    is?: TuteurWhereInput
    isNot?: TuteurWhereInput
  }

  export type StructureScalarRelationFilter = {
    is?: StructureWhereInput
    isNot?: StructureWhereInput
  }

  export type StageCountOrderByAggregateInput = {
    id?: SortOrder
    stagiaireId?: SortOrder
    tuteurId?: SortOrder
    structureId?: SortOrder
    theme?: SortOrder
    etat?: SortOrder
    dateDebut?: SortOrder
    dateFin?: SortOrder
    noteFinale?: SortOrder
  }

  export type StageMaxOrderByAggregateInput = {
    id?: SortOrder
    stagiaireId?: SortOrder
    tuteurId?: SortOrder
    structureId?: SortOrder
    theme?: SortOrder
    etat?: SortOrder
    dateDebut?: SortOrder
    dateFin?: SortOrder
    noteFinale?: SortOrder
  }

  export type StageMinOrderByAggregateInput = {
    id?: SortOrder
    stagiaireId?: SortOrder
    tuteurId?: SortOrder
    structureId?: SortOrder
    theme?: SortOrder
    etat?: SortOrder
    dateDebut?: SortOrder
    dateFin?: SortOrder
    noteFinale?: SortOrder
  }

  export type EnumEtatStageWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EtatStage | EnumEtatStageFieldRefInput<$PrismaModel>
    in?: $Enums.EtatStage[] | ListEnumEtatStageFieldRefInput<$PrismaModel>
    notIn?: $Enums.EtatStage[] | ListEnumEtatStageFieldRefInput<$PrismaModel>
    not?: NestedEnumEtatStageWithAggregatesFilter<$PrismaModel> | $Enums.EtatStage
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEtatStageFilter<$PrismaModel>
    _max?: NestedEnumEtatStageFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type CandidatureScoreCountOrderByAggregateInput = {
    id?: SortOrder
    stagiaireId?: SortOrder
    scorePertinence?: SortOrder
    dateEvaluation?: SortOrder
  }

  export type CandidatureScoreAvgOrderByAggregateInput = {
    scorePertinence?: SortOrder
  }

  export type CandidatureScoreMaxOrderByAggregateInput = {
    id?: SortOrder
    stagiaireId?: SortOrder
    scorePertinence?: SortOrder
    dateEvaluation?: SortOrder
  }

  export type CandidatureScoreMinOrderByAggregateInput = {
    id?: SortOrder
    stagiaireId?: SortOrder
    scorePertinence?: SortOrder
    dateEvaluation?: SortOrder
  }

  export type CandidatureScoreSumOrderByAggregateInput = {
    scorePertinence?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type SuggestionAffectationCountOrderByAggregateInput = {
    id?: SortOrder
    stagiaireId?: SortOrder
    tuteurId?: SortOrder
    scoreMatch?: SortOrder
    createdAt?: SortOrder
  }

  export type SuggestionAffectationAvgOrderByAggregateInput = {
    scoreMatch?: SortOrder
  }

  export type SuggestionAffectationMaxOrderByAggregateInput = {
    id?: SortOrder
    stagiaireId?: SortOrder
    tuteurId?: SortOrder
    scoreMatch?: SortOrder
    createdAt?: SortOrder
  }

  export type SuggestionAffectationMinOrderByAggregateInput = {
    id?: SortOrder
    stagiaireId?: SortOrder
    tuteurId?: SortOrder
    scoreMatch?: SortOrder
    createdAt?: SortOrder
  }

  export type SuggestionAffectationSumOrderByAggregateInput = {
    scoreMatch?: SortOrder
  }

  export type MessageCountOrderByAggregateInput = {
    id?: SortOrder
    expediteurId?: SortOrder
    destinataireId?: SortOrder
    contenu?: SortOrder
    fichierJoint?: SortOrder
    lu?: SortOrder
    envoyeLe?: SortOrder
  }

  export type MessageMaxOrderByAggregateInput = {
    id?: SortOrder
    expediteurId?: SortOrder
    destinataireId?: SortOrder
    contenu?: SortOrder
    fichierJoint?: SortOrder
    lu?: SortOrder
    envoyeLe?: SortOrder
  }

  export type MessageMinOrderByAggregateInput = {
    id?: SortOrder
    expediteurId?: SortOrder
    destinataireId?: SortOrder
    contenu?: SortOrder
    fichierJoint?: SortOrder
    lu?: SortOrder
    envoyeLe?: SortOrder
  }

  export type ThemeTuteurCountOrderByAggregateInput = {
    id?: SortOrder
    tuteurId?: SortOrder
    titre?: SortOrder
    description?: SortOrder
    disponible?: SortOrder
  }

  export type ThemeTuteurMaxOrderByAggregateInput = {
    id?: SortOrder
    tuteurId?: SortOrder
    titre?: SortOrder
    description?: SortOrder
    disponible?: SortOrder
  }

  export type ThemeTuteurMinOrderByAggregateInput = {
    id?: SortOrder
    tuteurId?: SortOrder
    titre?: SortOrder
    description?: SortOrder
    disponible?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type ParametreSystemeCountOrderByAggregateInput = {
    id?: SortOrder
    cle?: SortOrder
    valeur?: SortOrder
  }

  export type ParametreSystemeAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ParametreSystemeMaxOrderByAggregateInput = {
    id?: SortOrder
    cle?: SortOrder
    valeur?: SortOrder
  }

  export type ParametreSystemeMinOrderByAggregateInput = {
    id?: SortOrder
    cle?: SortOrder
    valeur?: SortOrder
  }

  export type ParametreSystemeSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type JournalActionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    cible?: SortOrder
    timestamp?: SortOrder
  }

  export type JournalActionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    cible?: SortOrder
    timestamp?: SortOrder
  }

  export type JournalActionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    cible?: SortOrder
    timestamp?: SortOrder
  }

  export type UserProfileCreateNestedOneWithoutUserInput = {
    create?: XOR<UserProfileCreateWithoutUserInput, UserProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserProfileCreateOrConnectWithoutUserInput
    connect?: UserProfileWhereUniqueInput
  }

  export type TuteurCreateNestedOneWithoutUserInput = {
    create?: XOR<TuteurCreateWithoutUserInput, TuteurUncheckedCreateWithoutUserInput>
    connectOrCreate?: TuteurCreateOrConnectWithoutUserInput
    connect?: TuteurWhereUniqueInput
  }

  export type StagiaireCreateNestedOneWithoutUserInput = {
    create?: XOR<StagiaireCreateWithoutUserInput, StagiaireUncheckedCreateWithoutUserInput>
    connectOrCreate?: StagiaireCreateOrConnectWithoutUserInput
    connect?: StagiaireWhereUniqueInput
  }

  export type DPAFCreateNestedOneWithoutUserInput = {
    create?: XOR<DPAFCreateWithoutUserInput, DPAFUncheckedCreateWithoutUserInput>
    connectOrCreate?: DPAFCreateOrConnectWithoutUserInput
    connect?: DPAFWhereUniqueInput
  }

  export type StructureCreateNestedOneWithoutUserInput = {
    create?: XOR<StructureCreateWithoutUserInput, StructureUncheckedCreateWithoutUserInput>
    connectOrCreate?: StructureCreateOrConnectWithoutUserInput
    connect?: StructureWhereUniqueInput
  }

  export type MessageCreateNestedManyWithoutExpediteurInput = {
    create?: XOR<MessageCreateWithoutExpediteurInput, MessageUncheckedCreateWithoutExpediteurInput> | MessageCreateWithoutExpediteurInput[] | MessageUncheckedCreateWithoutExpediteurInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutExpediteurInput | MessageCreateOrConnectWithoutExpediteurInput[]
    createMany?: MessageCreateManyExpediteurInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type MessageCreateNestedManyWithoutDestinataireInput = {
    create?: XOR<MessageCreateWithoutDestinataireInput, MessageUncheckedCreateWithoutDestinataireInput> | MessageCreateWithoutDestinataireInput[] | MessageUncheckedCreateWithoutDestinataireInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutDestinataireInput | MessageCreateOrConnectWithoutDestinataireInput[]
    createMany?: MessageCreateManyDestinataireInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type JournalActionCreateNestedManyWithoutUserInput = {
    create?: XOR<JournalActionCreateWithoutUserInput, JournalActionUncheckedCreateWithoutUserInput> | JournalActionCreateWithoutUserInput[] | JournalActionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: JournalActionCreateOrConnectWithoutUserInput | JournalActionCreateOrConnectWithoutUserInput[]
    createMany?: JournalActionCreateManyUserInputEnvelope
    connect?: JournalActionWhereUniqueInput | JournalActionWhereUniqueInput[]
  }

  export type UserProfileUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<UserProfileCreateWithoutUserInput, UserProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserProfileCreateOrConnectWithoutUserInput
    connect?: UserProfileWhereUniqueInput
  }

  export type TuteurUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<TuteurCreateWithoutUserInput, TuteurUncheckedCreateWithoutUserInput>
    connectOrCreate?: TuteurCreateOrConnectWithoutUserInput
    connect?: TuteurWhereUniqueInput
  }

  export type StagiaireUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<StagiaireCreateWithoutUserInput, StagiaireUncheckedCreateWithoutUserInput>
    connectOrCreate?: StagiaireCreateOrConnectWithoutUserInput
    connect?: StagiaireWhereUniqueInput
  }

  export type DPAFUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<DPAFCreateWithoutUserInput, DPAFUncheckedCreateWithoutUserInput>
    connectOrCreate?: DPAFCreateOrConnectWithoutUserInput
    connect?: DPAFWhereUniqueInput
  }

  export type StructureUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<StructureCreateWithoutUserInput, StructureUncheckedCreateWithoutUserInput>
    connectOrCreate?: StructureCreateOrConnectWithoutUserInput
    connect?: StructureWhereUniqueInput
  }

  export type MessageUncheckedCreateNestedManyWithoutExpediteurInput = {
    create?: XOR<MessageCreateWithoutExpediteurInput, MessageUncheckedCreateWithoutExpediteurInput> | MessageCreateWithoutExpediteurInput[] | MessageUncheckedCreateWithoutExpediteurInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutExpediteurInput | MessageCreateOrConnectWithoutExpediteurInput[]
    createMany?: MessageCreateManyExpediteurInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutDestinataireInput = {
    create?: XOR<MessageCreateWithoutDestinataireInput, MessageUncheckedCreateWithoutDestinataireInput> | MessageCreateWithoutDestinataireInput[] | MessageUncheckedCreateWithoutDestinataireInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutDestinataireInput | MessageCreateOrConnectWithoutDestinataireInput[]
    createMany?: MessageCreateManyDestinataireInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type JournalActionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<JournalActionCreateWithoutUserInput, JournalActionUncheckedCreateWithoutUserInput> | JournalActionCreateWithoutUserInput[] | JournalActionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: JournalActionCreateOrConnectWithoutUserInput | JournalActionCreateOrConnectWithoutUserInput[]
    createMany?: JournalActionCreateManyUserInputEnvelope
    connect?: JournalActionWhereUniqueInput | JournalActionWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserProfileUpdateOneWithoutUserNestedInput = {
    create?: XOR<UserProfileCreateWithoutUserInput, UserProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserProfileCreateOrConnectWithoutUserInput
    upsert?: UserProfileUpsertWithoutUserInput
    disconnect?: UserProfileWhereInput | boolean
    delete?: UserProfileWhereInput | boolean
    connect?: UserProfileWhereUniqueInput
    update?: XOR<XOR<UserProfileUpdateToOneWithWhereWithoutUserInput, UserProfileUpdateWithoutUserInput>, UserProfileUncheckedUpdateWithoutUserInput>
  }

  export type TuteurUpdateOneWithoutUserNestedInput = {
    create?: XOR<TuteurCreateWithoutUserInput, TuteurUncheckedCreateWithoutUserInput>
    connectOrCreate?: TuteurCreateOrConnectWithoutUserInput
    upsert?: TuteurUpsertWithoutUserInput
    disconnect?: TuteurWhereInput | boolean
    delete?: TuteurWhereInput | boolean
    connect?: TuteurWhereUniqueInput
    update?: XOR<XOR<TuteurUpdateToOneWithWhereWithoutUserInput, TuteurUpdateWithoutUserInput>, TuteurUncheckedUpdateWithoutUserInput>
  }

  export type StagiaireUpdateOneWithoutUserNestedInput = {
    create?: XOR<StagiaireCreateWithoutUserInput, StagiaireUncheckedCreateWithoutUserInput>
    connectOrCreate?: StagiaireCreateOrConnectWithoutUserInput
    upsert?: StagiaireUpsertWithoutUserInput
    disconnect?: StagiaireWhereInput | boolean
    delete?: StagiaireWhereInput | boolean
    connect?: StagiaireWhereUniqueInput
    update?: XOR<XOR<StagiaireUpdateToOneWithWhereWithoutUserInput, StagiaireUpdateWithoutUserInput>, StagiaireUncheckedUpdateWithoutUserInput>
  }

  export type DPAFUpdateOneWithoutUserNestedInput = {
    create?: XOR<DPAFCreateWithoutUserInput, DPAFUncheckedCreateWithoutUserInput>
    connectOrCreate?: DPAFCreateOrConnectWithoutUserInput
    upsert?: DPAFUpsertWithoutUserInput
    disconnect?: DPAFWhereInput | boolean
    delete?: DPAFWhereInput | boolean
    connect?: DPAFWhereUniqueInput
    update?: XOR<XOR<DPAFUpdateToOneWithWhereWithoutUserInput, DPAFUpdateWithoutUserInput>, DPAFUncheckedUpdateWithoutUserInput>
  }

  export type StructureUpdateOneWithoutUserNestedInput = {
    create?: XOR<StructureCreateWithoutUserInput, StructureUncheckedCreateWithoutUserInput>
    connectOrCreate?: StructureCreateOrConnectWithoutUserInput
    upsert?: StructureUpsertWithoutUserInput
    disconnect?: StructureWhereInput | boolean
    delete?: StructureWhereInput | boolean
    connect?: StructureWhereUniqueInput
    update?: XOR<XOR<StructureUpdateToOneWithWhereWithoutUserInput, StructureUpdateWithoutUserInput>, StructureUncheckedUpdateWithoutUserInput>
  }

  export type MessageUpdateManyWithoutExpediteurNestedInput = {
    create?: XOR<MessageCreateWithoutExpediteurInput, MessageUncheckedCreateWithoutExpediteurInput> | MessageCreateWithoutExpediteurInput[] | MessageUncheckedCreateWithoutExpediteurInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutExpediteurInput | MessageCreateOrConnectWithoutExpediteurInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutExpediteurInput | MessageUpsertWithWhereUniqueWithoutExpediteurInput[]
    createMany?: MessageCreateManyExpediteurInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutExpediteurInput | MessageUpdateWithWhereUniqueWithoutExpediteurInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutExpediteurInput | MessageUpdateManyWithWhereWithoutExpediteurInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type MessageUpdateManyWithoutDestinataireNestedInput = {
    create?: XOR<MessageCreateWithoutDestinataireInput, MessageUncheckedCreateWithoutDestinataireInput> | MessageCreateWithoutDestinataireInput[] | MessageUncheckedCreateWithoutDestinataireInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutDestinataireInput | MessageCreateOrConnectWithoutDestinataireInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutDestinataireInput | MessageUpsertWithWhereUniqueWithoutDestinataireInput[]
    createMany?: MessageCreateManyDestinataireInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutDestinataireInput | MessageUpdateWithWhereUniqueWithoutDestinataireInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutDestinataireInput | MessageUpdateManyWithWhereWithoutDestinataireInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type JournalActionUpdateManyWithoutUserNestedInput = {
    create?: XOR<JournalActionCreateWithoutUserInput, JournalActionUncheckedCreateWithoutUserInput> | JournalActionCreateWithoutUserInput[] | JournalActionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: JournalActionCreateOrConnectWithoutUserInput | JournalActionCreateOrConnectWithoutUserInput[]
    upsert?: JournalActionUpsertWithWhereUniqueWithoutUserInput | JournalActionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: JournalActionCreateManyUserInputEnvelope
    set?: JournalActionWhereUniqueInput | JournalActionWhereUniqueInput[]
    disconnect?: JournalActionWhereUniqueInput | JournalActionWhereUniqueInput[]
    delete?: JournalActionWhereUniqueInput | JournalActionWhereUniqueInput[]
    connect?: JournalActionWhereUniqueInput | JournalActionWhereUniqueInput[]
    update?: JournalActionUpdateWithWhereUniqueWithoutUserInput | JournalActionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: JournalActionUpdateManyWithWhereWithoutUserInput | JournalActionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: JournalActionScalarWhereInput | JournalActionScalarWhereInput[]
  }

  export type UserProfileUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<UserProfileCreateWithoutUserInput, UserProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserProfileCreateOrConnectWithoutUserInput
    upsert?: UserProfileUpsertWithoutUserInput
    disconnect?: UserProfileWhereInput | boolean
    delete?: UserProfileWhereInput | boolean
    connect?: UserProfileWhereUniqueInput
    update?: XOR<XOR<UserProfileUpdateToOneWithWhereWithoutUserInput, UserProfileUpdateWithoutUserInput>, UserProfileUncheckedUpdateWithoutUserInput>
  }

  export type TuteurUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<TuteurCreateWithoutUserInput, TuteurUncheckedCreateWithoutUserInput>
    connectOrCreate?: TuteurCreateOrConnectWithoutUserInput
    upsert?: TuteurUpsertWithoutUserInput
    disconnect?: TuteurWhereInput | boolean
    delete?: TuteurWhereInput | boolean
    connect?: TuteurWhereUniqueInput
    update?: XOR<XOR<TuteurUpdateToOneWithWhereWithoutUserInput, TuteurUpdateWithoutUserInput>, TuteurUncheckedUpdateWithoutUserInput>
  }

  export type StagiaireUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<StagiaireCreateWithoutUserInput, StagiaireUncheckedCreateWithoutUserInput>
    connectOrCreate?: StagiaireCreateOrConnectWithoutUserInput
    upsert?: StagiaireUpsertWithoutUserInput
    disconnect?: StagiaireWhereInput | boolean
    delete?: StagiaireWhereInput | boolean
    connect?: StagiaireWhereUniqueInput
    update?: XOR<XOR<StagiaireUpdateToOneWithWhereWithoutUserInput, StagiaireUpdateWithoutUserInput>, StagiaireUncheckedUpdateWithoutUserInput>
  }

  export type DPAFUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<DPAFCreateWithoutUserInput, DPAFUncheckedCreateWithoutUserInput>
    connectOrCreate?: DPAFCreateOrConnectWithoutUserInput
    upsert?: DPAFUpsertWithoutUserInput
    disconnect?: DPAFWhereInput | boolean
    delete?: DPAFWhereInput | boolean
    connect?: DPAFWhereUniqueInput
    update?: XOR<XOR<DPAFUpdateToOneWithWhereWithoutUserInput, DPAFUpdateWithoutUserInput>, DPAFUncheckedUpdateWithoutUserInput>
  }

  export type StructureUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<StructureCreateWithoutUserInput, StructureUncheckedCreateWithoutUserInput>
    connectOrCreate?: StructureCreateOrConnectWithoutUserInput
    upsert?: StructureUpsertWithoutUserInput
    disconnect?: StructureWhereInput | boolean
    delete?: StructureWhereInput | boolean
    connect?: StructureWhereUniqueInput
    update?: XOR<XOR<StructureUpdateToOneWithWhereWithoutUserInput, StructureUpdateWithoutUserInput>, StructureUncheckedUpdateWithoutUserInput>
  }

  export type MessageUncheckedUpdateManyWithoutExpediteurNestedInput = {
    create?: XOR<MessageCreateWithoutExpediteurInput, MessageUncheckedCreateWithoutExpediteurInput> | MessageCreateWithoutExpediteurInput[] | MessageUncheckedCreateWithoutExpediteurInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutExpediteurInput | MessageCreateOrConnectWithoutExpediteurInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutExpediteurInput | MessageUpsertWithWhereUniqueWithoutExpediteurInput[]
    createMany?: MessageCreateManyExpediteurInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutExpediteurInput | MessageUpdateWithWhereUniqueWithoutExpediteurInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutExpediteurInput | MessageUpdateManyWithWhereWithoutExpediteurInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutDestinataireNestedInput = {
    create?: XOR<MessageCreateWithoutDestinataireInput, MessageUncheckedCreateWithoutDestinataireInput> | MessageCreateWithoutDestinataireInput[] | MessageUncheckedCreateWithoutDestinataireInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutDestinataireInput | MessageCreateOrConnectWithoutDestinataireInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutDestinataireInput | MessageUpsertWithWhereUniqueWithoutDestinataireInput[]
    createMany?: MessageCreateManyDestinataireInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutDestinataireInput | MessageUpdateWithWhereUniqueWithoutDestinataireInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutDestinataireInput | MessageUpdateManyWithWhereWithoutDestinataireInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type JournalActionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<JournalActionCreateWithoutUserInput, JournalActionUncheckedCreateWithoutUserInput> | JournalActionCreateWithoutUserInput[] | JournalActionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: JournalActionCreateOrConnectWithoutUserInput | JournalActionCreateOrConnectWithoutUserInput[]
    upsert?: JournalActionUpsertWithWhereUniqueWithoutUserInput | JournalActionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: JournalActionCreateManyUserInputEnvelope
    set?: JournalActionWhereUniqueInput | JournalActionWhereUniqueInput[]
    disconnect?: JournalActionWhereUniqueInput | JournalActionWhereUniqueInput[]
    delete?: JournalActionWhereUniqueInput | JournalActionWhereUniqueInput[]
    connect?: JournalActionWhereUniqueInput | JournalActionWhereUniqueInput[]
    update?: JournalActionUpdateWithWhereUniqueWithoutUserInput | JournalActionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: JournalActionUpdateManyWithWhereWithoutUserInput | JournalActionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: JournalActionScalarWhereInput | JournalActionScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutProfileInput = {
    create?: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfileInput
    connect?: UserWhereUniqueInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type UserUpdateOneRequiredWithoutProfileNestedInput = {
    create?: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfileInput
    upsert?: UserUpsertWithoutProfileInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutProfileInput, UserUpdateWithoutProfileInput>, UserUncheckedUpdateWithoutProfileInput>
  }

  export type UserCreateNestedOneWithoutStructureInput = {
    create?: XOR<UserCreateWithoutStructureInput, UserUncheckedCreateWithoutStructureInput>
    connectOrCreate?: UserCreateOrConnectWithoutStructureInput
    connect?: UserWhereUniqueInput
  }

  export type TuteurCreateNestedManyWithoutStructureInput = {
    create?: XOR<TuteurCreateWithoutStructureInput, TuteurUncheckedCreateWithoutStructureInput> | TuteurCreateWithoutStructureInput[] | TuteurUncheckedCreateWithoutStructureInput[]
    connectOrCreate?: TuteurCreateOrConnectWithoutStructureInput | TuteurCreateOrConnectWithoutStructureInput[]
    createMany?: TuteurCreateManyStructureInputEnvelope
    connect?: TuteurWhereUniqueInput | TuteurWhereUniqueInput[]
  }

  export type StagiaireCreateNestedManyWithoutStructureInput = {
    create?: XOR<StagiaireCreateWithoutStructureInput, StagiaireUncheckedCreateWithoutStructureInput> | StagiaireCreateWithoutStructureInput[] | StagiaireUncheckedCreateWithoutStructureInput[]
    connectOrCreate?: StagiaireCreateOrConnectWithoutStructureInput | StagiaireCreateOrConnectWithoutStructureInput[]
    createMany?: StagiaireCreateManyStructureInputEnvelope
    connect?: StagiaireWhereUniqueInput | StagiaireWhereUniqueInput[]
  }

  export type DemandeStageCreateNestedManyWithoutStructureCibleInput = {
    create?: XOR<DemandeStageCreateWithoutStructureCibleInput, DemandeStageUncheckedCreateWithoutStructureCibleInput> | DemandeStageCreateWithoutStructureCibleInput[] | DemandeStageUncheckedCreateWithoutStructureCibleInput[]
    connectOrCreate?: DemandeStageCreateOrConnectWithoutStructureCibleInput | DemandeStageCreateOrConnectWithoutStructureCibleInput[]
    createMany?: DemandeStageCreateManyStructureCibleInputEnvelope
    connect?: DemandeStageWhereUniqueInput | DemandeStageWhereUniqueInput[]
  }

  export type StageCreateNestedManyWithoutStructureInput = {
    create?: XOR<StageCreateWithoutStructureInput, StageUncheckedCreateWithoutStructureInput> | StageCreateWithoutStructureInput[] | StageUncheckedCreateWithoutStructureInput[]
    connectOrCreate?: StageCreateOrConnectWithoutStructureInput | StageCreateOrConnectWithoutStructureInput[]
    createMany?: StageCreateManyStructureInputEnvelope
    connect?: StageWhereUniqueInput | StageWhereUniqueInput[]
  }

  export type TuteurUncheckedCreateNestedManyWithoutStructureInput = {
    create?: XOR<TuteurCreateWithoutStructureInput, TuteurUncheckedCreateWithoutStructureInput> | TuteurCreateWithoutStructureInput[] | TuteurUncheckedCreateWithoutStructureInput[]
    connectOrCreate?: TuteurCreateOrConnectWithoutStructureInput | TuteurCreateOrConnectWithoutStructureInput[]
    createMany?: TuteurCreateManyStructureInputEnvelope
    connect?: TuteurWhereUniqueInput | TuteurWhereUniqueInput[]
  }

  export type StagiaireUncheckedCreateNestedManyWithoutStructureInput = {
    create?: XOR<StagiaireCreateWithoutStructureInput, StagiaireUncheckedCreateWithoutStructureInput> | StagiaireCreateWithoutStructureInput[] | StagiaireUncheckedCreateWithoutStructureInput[]
    connectOrCreate?: StagiaireCreateOrConnectWithoutStructureInput | StagiaireCreateOrConnectWithoutStructureInput[]
    createMany?: StagiaireCreateManyStructureInputEnvelope
    connect?: StagiaireWhereUniqueInput | StagiaireWhereUniqueInput[]
  }

  export type DemandeStageUncheckedCreateNestedManyWithoutStructureCibleInput = {
    create?: XOR<DemandeStageCreateWithoutStructureCibleInput, DemandeStageUncheckedCreateWithoutStructureCibleInput> | DemandeStageCreateWithoutStructureCibleInput[] | DemandeStageUncheckedCreateWithoutStructureCibleInput[]
    connectOrCreate?: DemandeStageCreateOrConnectWithoutStructureCibleInput | DemandeStageCreateOrConnectWithoutStructureCibleInput[]
    createMany?: DemandeStageCreateManyStructureCibleInputEnvelope
    connect?: DemandeStageWhereUniqueInput | DemandeStageWhereUniqueInput[]
  }

  export type StageUncheckedCreateNestedManyWithoutStructureInput = {
    create?: XOR<StageCreateWithoutStructureInput, StageUncheckedCreateWithoutStructureInput> | StageCreateWithoutStructureInput[] | StageUncheckedCreateWithoutStructureInput[]
    connectOrCreate?: StageCreateOrConnectWithoutStructureInput | StageCreateOrConnectWithoutStructureInput[]
    createMany?: StageCreateManyStructureInputEnvelope
    connect?: StageWhereUniqueInput | StageWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutStructureNestedInput = {
    create?: XOR<UserCreateWithoutStructureInput, UserUncheckedCreateWithoutStructureInput>
    connectOrCreate?: UserCreateOrConnectWithoutStructureInput
    upsert?: UserUpsertWithoutStructureInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutStructureInput, UserUpdateWithoutStructureInput>, UserUncheckedUpdateWithoutStructureInput>
  }

  export type TuteurUpdateManyWithoutStructureNestedInput = {
    create?: XOR<TuteurCreateWithoutStructureInput, TuteurUncheckedCreateWithoutStructureInput> | TuteurCreateWithoutStructureInput[] | TuteurUncheckedCreateWithoutStructureInput[]
    connectOrCreate?: TuteurCreateOrConnectWithoutStructureInput | TuteurCreateOrConnectWithoutStructureInput[]
    upsert?: TuteurUpsertWithWhereUniqueWithoutStructureInput | TuteurUpsertWithWhereUniqueWithoutStructureInput[]
    createMany?: TuteurCreateManyStructureInputEnvelope
    set?: TuteurWhereUniqueInput | TuteurWhereUniqueInput[]
    disconnect?: TuteurWhereUniqueInput | TuteurWhereUniqueInput[]
    delete?: TuteurWhereUniqueInput | TuteurWhereUniqueInput[]
    connect?: TuteurWhereUniqueInput | TuteurWhereUniqueInput[]
    update?: TuteurUpdateWithWhereUniqueWithoutStructureInput | TuteurUpdateWithWhereUniqueWithoutStructureInput[]
    updateMany?: TuteurUpdateManyWithWhereWithoutStructureInput | TuteurUpdateManyWithWhereWithoutStructureInput[]
    deleteMany?: TuteurScalarWhereInput | TuteurScalarWhereInput[]
  }

  export type StagiaireUpdateManyWithoutStructureNestedInput = {
    create?: XOR<StagiaireCreateWithoutStructureInput, StagiaireUncheckedCreateWithoutStructureInput> | StagiaireCreateWithoutStructureInput[] | StagiaireUncheckedCreateWithoutStructureInput[]
    connectOrCreate?: StagiaireCreateOrConnectWithoutStructureInput | StagiaireCreateOrConnectWithoutStructureInput[]
    upsert?: StagiaireUpsertWithWhereUniqueWithoutStructureInput | StagiaireUpsertWithWhereUniqueWithoutStructureInput[]
    createMany?: StagiaireCreateManyStructureInputEnvelope
    set?: StagiaireWhereUniqueInput | StagiaireWhereUniqueInput[]
    disconnect?: StagiaireWhereUniqueInput | StagiaireWhereUniqueInput[]
    delete?: StagiaireWhereUniqueInput | StagiaireWhereUniqueInput[]
    connect?: StagiaireWhereUniqueInput | StagiaireWhereUniqueInput[]
    update?: StagiaireUpdateWithWhereUniqueWithoutStructureInput | StagiaireUpdateWithWhereUniqueWithoutStructureInput[]
    updateMany?: StagiaireUpdateManyWithWhereWithoutStructureInput | StagiaireUpdateManyWithWhereWithoutStructureInput[]
    deleteMany?: StagiaireScalarWhereInput | StagiaireScalarWhereInput[]
  }

  export type DemandeStageUpdateManyWithoutStructureCibleNestedInput = {
    create?: XOR<DemandeStageCreateWithoutStructureCibleInput, DemandeStageUncheckedCreateWithoutStructureCibleInput> | DemandeStageCreateWithoutStructureCibleInput[] | DemandeStageUncheckedCreateWithoutStructureCibleInput[]
    connectOrCreate?: DemandeStageCreateOrConnectWithoutStructureCibleInput | DemandeStageCreateOrConnectWithoutStructureCibleInput[]
    upsert?: DemandeStageUpsertWithWhereUniqueWithoutStructureCibleInput | DemandeStageUpsertWithWhereUniqueWithoutStructureCibleInput[]
    createMany?: DemandeStageCreateManyStructureCibleInputEnvelope
    set?: DemandeStageWhereUniqueInput | DemandeStageWhereUniqueInput[]
    disconnect?: DemandeStageWhereUniqueInput | DemandeStageWhereUniqueInput[]
    delete?: DemandeStageWhereUniqueInput | DemandeStageWhereUniqueInput[]
    connect?: DemandeStageWhereUniqueInput | DemandeStageWhereUniqueInput[]
    update?: DemandeStageUpdateWithWhereUniqueWithoutStructureCibleInput | DemandeStageUpdateWithWhereUniqueWithoutStructureCibleInput[]
    updateMany?: DemandeStageUpdateManyWithWhereWithoutStructureCibleInput | DemandeStageUpdateManyWithWhereWithoutStructureCibleInput[]
    deleteMany?: DemandeStageScalarWhereInput | DemandeStageScalarWhereInput[]
  }

  export type StageUpdateManyWithoutStructureNestedInput = {
    create?: XOR<StageCreateWithoutStructureInput, StageUncheckedCreateWithoutStructureInput> | StageCreateWithoutStructureInput[] | StageUncheckedCreateWithoutStructureInput[]
    connectOrCreate?: StageCreateOrConnectWithoutStructureInput | StageCreateOrConnectWithoutStructureInput[]
    upsert?: StageUpsertWithWhereUniqueWithoutStructureInput | StageUpsertWithWhereUniqueWithoutStructureInput[]
    createMany?: StageCreateManyStructureInputEnvelope
    set?: StageWhereUniqueInput | StageWhereUniqueInput[]
    disconnect?: StageWhereUniqueInput | StageWhereUniqueInput[]
    delete?: StageWhereUniqueInput | StageWhereUniqueInput[]
    connect?: StageWhereUniqueInput | StageWhereUniqueInput[]
    update?: StageUpdateWithWhereUniqueWithoutStructureInput | StageUpdateWithWhereUniqueWithoutStructureInput[]
    updateMany?: StageUpdateManyWithWhereWithoutStructureInput | StageUpdateManyWithWhereWithoutStructureInput[]
    deleteMany?: StageScalarWhereInput | StageScalarWhereInput[]
  }

  export type TuteurUncheckedUpdateManyWithoutStructureNestedInput = {
    create?: XOR<TuteurCreateWithoutStructureInput, TuteurUncheckedCreateWithoutStructureInput> | TuteurCreateWithoutStructureInput[] | TuteurUncheckedCreateWithoutStructureInput[]
    connectOrCreate?: TuteurCreateOrConnectWithoutStructureInput | TuteurCreateOrConnectWithoutStructureInput[]
    upsert?: TuteurUpsertWithWhereUniqueWithoutStructureInput | TuteurUpsertWithWhereUniqueWithoutStructureInput[]
    createMany?: TuteurCreateManyStructureInputEnvelope
    set?: TuteurWhereUniqueInput | TuteurWhereUniqueInput[]
    disconnect?: TuteurWhereUniqueInput | TuteurWhereUniqueInput[]
    delete?: TuteurWhereUniqueInput | TuteurWhereUniqueInput[]
    connect?: TuteurWhereUniqueInput | TuteurWhereUniqueInput[]
    update?: TuteurUpdateWithWhereUniqueWithoutStructureInput | TuteurUpdateWithWhereUniqueWithoutStructureInput[]
    updateMany?: TuteurUpdateManyWithWhereWithoutStructureInput | TuteurUpdateManyWithWhereWithoutStructureInput[]
    deleteMany?: TuteurScalarWhereInput | TuteurScalarWhereInput[]
  }

  export type StagiaireUncheckedUpdateManyWithoutStructureNestedInput = {
    create?: XOR<StagiaireCreateWithoutStructureInput, StagiaireUncheckedCreateWithoutStructureInput> | StagiaireCreateWithoutStructureInput[] | StagiaireUncheckedCreateWithoutStructureInput[]
    connectOrCreate?: StagiaireCreateOrConnectWithoutStructureInput | StagiaireCreateOrConnectWithoutStructureInput[]
    upsert?: StagiaireUpsertWithWhereUniqueWithoutStructureInput | StagiaireUpsertWithWhereUniqueWithoutStructureInput[]
    createMany?: StagiaireCreateManyStructureInputEnvelope
    set?: StagiaireWhereUniqueInput | StagiaireWhereUniqueInput[]
    disconnect?: StagiaireWhereUniqueInput | StagiaireWhereUniqueInput[]
    delete?: StagiaireWhereUniqueInput | StagiaireWhereUniqueInput[]
    connect?: StagiaireWhereUniqueInput | StagiaireWhereUniqueInput[]
    update?: StagiaireUpdateWithWhereUniqueWithoutStructureInput | StagiaireUpdateWithWhereUniqueWithoutStructureInput[]
    updateMany?: StagiaireUpdateManyWithWhereWithoutStructureInput | StagiaireUpdateManyWithWhereWithoutStructureInput[]
    deleteMany?: StagiaireScalarWhereInput | StagiaireScalarWhereInput[]
  }

  export type DemandeStageUncheckedUpdateManyWithoutStructureCibleNestedInput = {
    create?: XOR<DemandeStageCreateWithoutStructureCibleInput, DemandeStageUncheckedCreateWithoutStructureCibleInput> | DemandeStageCreateWithoutStructureCibleInput[] | DemandeStageUncheckedCreateWithoutStructureCibleInput[]
    connectOrCreate?: DemandeStageCreateOrConnectWithoutStructureCibleInput | DemandeStageCreateOrConnectWithoutStructureCibleInput[]
    upsert?: DemandeStageUpsertWithWhereUniqueWithoutStructureCibleInput | DemandeStageUpsertWithWhereUniqueWithoutStructureCibleInput[]
    createMany?: DemandeStageCreateManyStructureCibleInputEnvelope
    set?: DemandeStageWhereUniqueInput | DemandeStageWhereUniqueInput[]
    disconnect?: DemandeStageWhereUniqueInput | DemandeStageWhereUniqueInput[]
    delete?: DemandeStageWhereUniqueInput | DemandeStageWhereUniqueInput[]
    connect?: DemandeStageWhereUniqueInput | DemandeStageWhereUniqueInput[]
    update?: DemandeStageUpdateWithWhereUniqueWithoutStructureCibleInput | DemandeStageUpdateWithWhereUniqueWithoutStructureCibleInput[]
    updateMany?: DemandeStageUpdateManyWithWhereWithoutStructureCibleInput | DemandeStageUpdateManyWithWhereWithoutStructureCibleInput[]
    deleteMany?: DemandeStageScalarWhereInput | DemandeStageScalarWhereInput[]
  }

  export type StageUncheckedUpdateManyWithoutStructureNestedInput = {
    create?: XOR<StageCreateWithoutStructureInput, StageUncheckedCreateWithoutStructureInput> | StageCreateWithoutStructureInput[] | StageUncheckedCreateWithoutStructureInput[]
    connectOrCreate?: StageCreateOrConnectWithoutStructureInput | StageCreateOrConnectWithoutStructureInput[]
    upsert?: StageUpsertWithWhereUniqueWithoutStructureInput | StageUpsertWithWhereUniqueWithoutStructureInput[]
    createMany?: StageCreateManyStructureInputEnvelope
    set?: StageWhereUniqueInput | StageWhereUniqueInput[]
    disconnect?: StageWhereUniqueInput | StageWhereUniqueInput[]
    delete?: StageWhereUniqueInput | StageWhereUniqueInput[]
    connect?: StageWhereUniqueInput | StageWhereUniqueInput[]
    update?: StageUpdateWithWhereUniqueWithoutStructureInput | StageUpdateWithWhereUniqueWithoutStructureInput[]
    updateMany?: StageUpdateManyWithWhereWithoutStructureInput | StageUpdateManyWithWhereWithoutStructureInput[]
    deleteMany?: StageScalarWhereInput | StageScalarWhereInput[]
  }

  export type TuteurCreatecompetencesInput = {
    set: string[]
  }

  export type UserCreateNestedOneWithoutTuteurInput = {
    create?: XOR<UserCreateWithoutTuteurInput, UserUncheckedCreateWithoutTuteurInput>
    connectOrCreate?: UserCreateOrConnectWithoutTuteurInput
    connect?: UserWhereUniqueInput
  }

  export type StructureCreateNestedOneWithoutTuteursInput = {
    create?: XOR<StructureCreateWithoutTuteursInput, StructureUncheckedCreateWithoutTuteursInput>
    connectOrCreate?: StructureCreateOrConnectWithoutTuteursInput
    connect?: StructureWhereUniqueInput
  }

  export type StagiaireCreateNestedManyWithoutTuteurInput = {
    create?: XOR<StagiaireCreateWithoutTuteurInput, StagiaireUncheckedCreateWithoutTuteurInput> | StagiaireCreateWithoutTuteurInput[] | StagiaireUncheckedCreateWithoutTuteurInput[]
    connectOrCreate?: StagiaireCreateOrConnectWithoutTuteurInput | StagiaireCreateOrConnectWithoutTuteurInput[]
    createMany?: StagiaireCreateManyTuteurInputEnvelope
    connect?: StagiaireWhereUniqueInput | StagiaireWhereUniqueInput[]
  }

  export type StageCreateNestedManyWithoutTuteurInput = {
    create?: XOR<StageCreateWithoutTuteurInput, StageUncheckedCreateWithoutTuteurInput> | StageCreateWithoutTuteurInput[] | StageUncheckedCreateWithoutTuteurInput[]
    connectOrCreate?: StageCreateOrConnectWithoutTuteurInput | StageCreateOrConnectWithoutTuteurInput[]
    createMany?: StageCreateManyTuteurInputEnvelope
    connect?: StageWhereUniqueInput | StageWhereUniqueInput[]
  }

  export type ThemeTuteurCreateNestedManyWithoutTuteurInput = {
    create?: XOR<ThemeTuteurCreateWithoutTuteurInput, ThemeTuteurUncheckedCreateWithoutTuteurInput> | ThemeTuteurCreateWithoutTuteurInput[] | ThemeTuteurUncheckedCreateWithoutTuteurInput[]
    connectOrCreate?: ThemeTuteurCreateOrConnectWithoutTuteurInput | ThemeTuteurCreateOrConnectWithoutTuteurInput[]
    createMany?: ThemeTuteurCreateManyTuteurInputEnvelope
    connect?: ThemeTuteurWhereUniqueInput | ThemeTuteurWhereUniqueInput[]
  }

  export type SuggestionAffectationCreateNestedManyWithoutTuteurInput = {
    create?: XOR<SuggestionAffectationCreateWithoutTuteurInput, SuggestionAffectationUncheckedCreateWithoutTuteurInput> | SuggestionAffectationCreateWithoutTuteurInput[] | SuggestionAffectationUncheckedCreateWithoutTuteurInput[]
    connectOrCreate?: SuggestionAffectationCreateOrConnectWithoutTuteurInput | SuggestionAffectationCreateOrConnectWithoutTuteurInput[]
    createMany?: SuggestionAffectationCreateManyTuteurInputEnvelope
    connect?: SuggestionAffectationWhereUniqueInput | SuggestionAffectationWhereUniqueInput[]
  }

  export type StagiaireUncheckedCreateNestedManyWithoutTuteurInput = {
    create?: XOR<StagiaireCreateWithoutTuteurInput, StagiaireUncheckedCreateWithoutTuteurInput> | StagiaireCreateWithoutTuteurInput[] | StagiaireUncheckedCreateWithoutTuteurInput[]
    connectOrCreate?: StagiaireCreateOrConnectWithoutTuteurInput | StagiaireCreateOrConnectWithoutTuteurInput[]
    createMany?: StagiaireCreateManyTuteurInputEnvelope
    connect?: StagiaireWhereUniqueInput | StagiaireWhereUniqueInput[]
  }

  export type StageUncheckedCreateNestedManyWithoutTuteurInput = {
    create?: XOR<StageCreateWithoutTuteurInput, StageUncheckedCreateWithoutTuteurInput> | StageCreateWithoutTuteurInput[] | StageUncheckedCreateWithoutTuteurInput[]
    connectOrCreate?: StageCreateOrConnectWithoutTuteurInput | StageCreateOrConnectWithoutTuteurInput[]
    createMany?: StageCreateManyTuteurInputEnvelope
    connect?: StageWhereUniqueInput | StageWhereUniqueInput[]
  }

  export type ThemeTuteurUncheckedCreateNestedManyWithoutTuteurInput = {
    create?: XOR<ThemeTuteurCreateWithoutTuteurInput, ThemeTuteurUncheckedCreateWithoutTuteurInput> | ThemeTuteurCreateWithoutTuteurInput[] | ThemeTuteurUncheckedCreateWithoutTuteurInput[]
    connectOrCreate?: ThemeTuteurCreateOrConnectWithoutTuteurInput | ThemeTuteurCreateOrConnectWithoutTuteurInput[]
    createMany?: ThemeTuteurCreateManyTuteurInputEnvelope
    connect?: ThemeTuteurWhereUniqueInput | ThemeTuteurWhereUniqueInput[]
  }

  export type SuggestionAffectationUncheckedCreateNestedManyWithoutTuteurInput = {
    create?: XOR<SuggestionAffectationCreateWithoutTuteurInput, SuggestionAffectationUncheckedCreateWithoutTuteurInput> | SuggestionAffectationCreateWithoutTuteurInput[] | SuggestionAffectationUncheckedCreateWithoutTuteurInput[]
    connectOrCreate?: SuggestionAffectationCreateOrConnectWithoutTuteurInput | SuggestionAffectationCreateOrConnectWithoutTuteurInput[]
    createMany?: SuggestionAffectationCreateManyTuteurInputEnvelope
    connect?: SuggestionAffectationWhereUniqueInput | SuggestionAffectationWhereUniqueInput[]
  }

  export type TuteurUpdatecompetencesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type UserUpdateOneRequiredWithoutTuteurNestedInput = {
    create?: XOR<UserCreateWithoutTuteurInput, UserUncheckedCreateWithoutTuteurInput>
    connectOrCreate?: UserCreateOrConnectWithoutTuteurInput
    upsert?: UserUpsertWithoutTuteurInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTuteurInput, UserUpdateWithoutTuteurInput>, UserUncheckedUpdateWithoutTuteurInput>
  }

  export type StructureUpdateOneWithoutTuteursNestedInput = {
    create?: XOR<StructureCreateWithoutTuteursInput, StructureUncheckedCreateWithoutTuteursInput>
    connectOrCreate?: StructureCreateOrConnectWithoutTuteursInput
    upsert?: StructureUpsertWithoutTuteursInput
    disconnect?: StructureWhereInput | boolean
    delete?: StructureWhereInput | boolean
    connect?: StructureWhereUniqueInput
    update?: XOR<XOR<StructureUpdateToOneWithWhereWithoutTuteursInput, StructureUpdateWithoutTuteursInput>, StructureUncheckedUpdateWithoutTuteursInput>
  }

  export type StagiaireUpdateManyWithoutTuteurNestedInput = {
    create?: XOR<StagiaireCreateWithoutTuteurInput, StagiaireUncheckedCreateWithoutTuteurInput> | StagiaireCreateWithoutTuteurInput[] | StagiaireUncheckedCreateWithoutTuteurInput[]
    connectOrCreate?: StagiaireCreateOrConnectWithoutTuteurInput | StagiaireCreateOrConnectWithoutTuteurInput[]
    upsert?: StagiaireUpsertWithWhereUniqueWithoutTuteurInput | StagiaireUpsertWithWhereUniqueWithoutTuteurInput[]
    createMany?: StagiaireCreateManyTuteurInputEnvelope
    set?: StagiaireWhereUniqueInput | StagiaireWhereUniqueInput[]
    disconnect?: StagiaireWhereUniqueInput | StagiaireWhereUniqueInput[]
    delete?: StagiaireWhereUniqueInput | StagiaireWhereUniqueInput[]
    connect?: StagiaireWhereUniqueInput | StagiaireWhereUniqueInput[]
    update?: StagiaireUpdateWithWhereUniqueWithoutTuteurInput | StagiaireUpdateWithWhereUniqueWithoutTuteurInput[]
    updateMany?: StagiaireUpdateManyWithWhereWithoutTuteurInput | StagiaireUpdateManyWithWhereWithoutTuteurInput[]
    deleteMany?: StagiaireScalarWhereInput | StagiaireScalarWhereInput[]
  }

  export type StageUpdateManyWithoutTuteurNestedInput = {
    create?: XOR<StageCreateWithoutTuteurInput, StageUncheckedCreateWithoutTuteurInput> | StageCreateWithoutTuteurInput[] | StageUncheckedCreateWithoutTuteurInput[]
    connectOrCreate?: StageCreateOrConnectWithoutTuteurInput | StageCreateOrConnectWithoutTuteurInput[]
    upsert?: StageUpsertWithWhereUniqueWithoutTuteurInput | StageUpsertWithWhereUniqueWithoutTuteurInput[]
    createMany?: StageCreateManyTuteurInputEnvelope
    set?: StageWhereUniqueInput | StageWhereUniqueInput[]
    disconnect?: StageWhereUniqueInput | StageWhereUniqueInput[]
    delete?: StageWhereUniqueInput | StageWhereUniqueInput[]
    connect?: StageWhereUniqueInput | StageWhereUniqueInput[]
    update?: StageUpdateWithWhereUniqueWithoutTuteurInput | StageUpdateWithWhereUniqueWithoutTuteurInput[]
    updateMany?: StageUpdateManyWithWhereWithoutTuteurInput | StageUpdateManyWithWhereWithoutTuteurInput[]
    deleteMany?: StageScalarWhereInput | StageScalarWhereInput[]
  }

  export type ThemeTuteurUpdateManyWithoutTuteurNestedInput = {
    create?: XOR<ThemeTuteurCreateWithoutTuteurInput, ThemeTuteurUncheckedCreateWithoutTuteurInput> | ThemeTuteurCreateWithoutTuteurInput[] | ThemeTuteurUncheckedCreateWithoutTuteurInput[]
    connectOrCreate?: ThemeTuteurCreateOrConnectWithoutTuteurInput | ThemeTuteurCreateOrConnectWithoutTuteurInput[]
    upsert?: ThemeTuteurUpsertWithWhereUniqueWithoutTuteurInput | ThemeTuteurUpsertWithWhereUniqueWithoutTuteurInput[]
    createMany?: ThemeTuteurCreateManyTuteurInputEnvelope
    set?: ThemeTuteurWhereUniqueInput | ThemeTuteurWhereUniqueInput[]
    disconnect?: ThemeTuteurWhereUniqueInput | ThemeTuteurWhereUniqueInput[]
    delete?: ThemeTuteurWhereUniqueInput | ThemeTuteurWhereUniqueInput[]
    connect?: ThemeTuteurWhereUniqueInput | ThemeTuteurWhereUniqueInput[]
    update?: ThemeTuteurUpdateWithWhereUniqueWithoutTuteurInput | ThemeTuteurUpdateWithWhereUniqueWithoutTuteurInput[]
    updateMany?: ThemeTuteurUpdateManyWithWhereWithoutTuteurInput | ThemeTuteurUpdateManyWithWhereWithoutTuteurInput[]
    deleteMany?: ThemeTuteurScalarWhereInput | ThemeTuteurScalarWhereInput[]
  }

  export type SuggestionAffectationUpdateManyWithoutTuteurNestedInput = {
    create?: XOR<SuggestionAffectationCreateWithoutTuteurInput, SuggestionAffectationUncheckedCreateWithoutTuteurInput> | SuggestionAffectationCreateWithoutTuteurInput[] | SuggestionAffectationUncheckedCreateWithoutTuteurInput[]
    connectOrCreate?: SuggestionAffectationCreateOrConnectWithoutTuteurInput | SuggestionAffectationCreateOrConnectWithoutTuteurInput[]
    upsert?: SuggestionAffectationUpsertWithWhereUniqueWithoutTuteurInput | SuggestionAffectationUpsertWithWhereUniqueWithoutTuteurInput[]
    createMany?: SuggestionAffectationCreateManyTuteurInputEnvelope
    set?: SuggestionAffectationWhereUniqueInput | SuggestionAffectationWhereUniqueInput[]
    disconnect?: SuggestionAffectationWhereUniqueInput | SuggestionAffectationWhereUniqueInput[]
    delete?: SuggestionAffectationWhereUniqueInput | SuggestionAffectationWhereUniqueInput[]
    connect?: SuggestionAffectationWhereUniqueInput | SuggestionAffectationWhereUniqueInput[]
    update?: SuggestionAffectationUpdateWithWhereUniqueWithoutTuteurInput | SuggestionAffectationUpdateWithWhereUniqueWithoutTuteurInput[]
    updateMany?: SuggestionAffectationUpdateManyWithWhereWithoutTuteurInput | SuggestionAffectationUpdateManyWithWhereWithoutTuteurInput[]
    deleteMany?: SuggestionAffectationScalarWhereInput | SuggestionAffectationScalarWhereInput[]
  }

  export type StagiaireUncheckedUpdateManyWithoutTuteurNestedInput = {
    create?: XOR<StagiaireCreateWithoutTuteurInput, StagiaireUncheckedCreateWithoutTuteurInput> | StagiaireCreateWithoutTuteurInput[] | StagiaireUncheckedCreateWithoutTuteurInput[]
    connectOrCreate?: StagiaireCreateOrConnectWithoutTuteurInput | StagiaireCreateOrConnectWithoutTuteurInput[]
    upsert?: StagiaireUpsertWithWhereUniqueWithoutTuteurInput | StagiaireUpsertWithWhereUniqueWithoutTuteurInput[]
    createMany?: StagiaireCreateManyTuteurInputEnvelope
    set?: StagiaireWhereUniqueInput | StagiaireWhereUniqueInput[]
    disconnect?: StagiaireWhereUniqueInput | StagiaireWhereUniqueInput[]
    delete?: StagiaireWhereUniqueInput | StagiaireWhereUniqueInput[]
    connect?: StagiaireWhereUniqueInput | StagiaireWhereUniqueInput[]
    update?: StagiaireUpdateWithWhereUniqueWithoutTuteurInput | StagiaireUpdateWithWhereUniqueWithoutTuteurInput[]
    updateMany?: StagiaireUpdateManyWithWhereWithoutTuteurInput | StagiaireUpdateManyWithWhereWithoutTuteurInput[]
    deleteMany?: StagiaireScalarWhereInput | StagiaireScalarWhereInput[]
  }

  export type StageUncheckedUpdateManyWithoutTuteurNestedInput = {
    create?: XOR<StageCreateWithoutTuteurInput, StageUncheckedCreateWithoutTuteurInput> | StageCreateWithoutTuteurInput[] | StageUncheckedCreateWithoutTuteurInput[]
    connectOrCreate?: StageCreateOrConnectWithoutTuteurInput | StageCreateOrConnectWithoutTuteurInput[]
    upsert?: StageUpsertWithWhereUniqueWithoutTuteurInput | StageUpsertWithWhereUniqueWithoutTuteurInput[]
    createMany?: StageCreateManyTuteurInputEnvelope
    set?: StageWhereUniqueInput | StageWhereUniqueInput[]
    disconnect?: StageWhereUniqueInput | StageWhereUniqueInput[]
    delete?: StageWhereUniqueInput | StageWhereUniqueInput[]
    connect?: StageWhereUniqueInput | StageWhereUniqueInput[]
    update?: StageUpdateWithWhereUniqueWithoutTuteurInput | StageUpdateWithWhereUniqueWithoutTuteurInput[]
    updateMany?: StageUpdateManyWithWhereWithoutTuteurInput | StageUpdateManyWithWhereWithoutTuteurInput[]
    deleteMany?: StageScalarWhereInput | StageScalarWhereInput[]
  }

  export type ThemeTuteurUncheckedUpdateManyWithoutTuteurNestedInput = {
    create?: XOR<ThemeTuteurCreateWithoutTuteurInput, ThemeTuteurUncheckedCreateWithoutTuteurInput> | ThemeTuteurCreateWithoutTuteurInput[] | ThemeTuteurUncheckedCreateWithoutTuteurInput[]
    connectOrCreate?: ThemeTuteurCreateOrConnectWithoutTuteurInput | ThemeTuteurCreateOrConnectWithoutTuteurInput[]
    upsert?: ThemeTuteurUpsertWithWhereUniqueWithoutTuteurInput | ThemeTuteurUpsertWithWhereUniqueWithoutTuteurInput[]
    createMany?: ThemeTuteurCreateManyTuteurInputEnvelope
    set?: ThemeTuteurWhereUniqueInput | ThemeTuteurWhereUniqueInput[]
    disconnect?: ThemeTuteurWhereUniqueInput | ThemeTuteurWhereUniqueInput[]
    delete?: ThemeTuteurWhereUniqueInput | ThemeTuteurWhereUniqueInput[]
    connect?: ThemeTuteurWhereUniqueInput | ThemeTuteurWhereUniqueInput[]
    update?: ThemeTuteurUpdateWithWhereUniqueWithoutTuteurInput | ThemeTuteurUpdateWithWhereUniqueWithoutTuteurInput[]
    updateMany?: ThemeTuteurUpdateManyWithWhereWithoutTuteurInput | ThemeTuteurUpdateManyWithWhereWithoutTuteurInput[]
    deleteMany?: ThemeTuteurScalarWhereInput | ThemeTuteurScalarWhereInput[]
  }

  export type SuggestionAffectationUncheckedUpdateManyWithoutTuteurNestedInput = {
    create?: XOR<SuggestionAffectationCreateWithoutTuteurInput, SuggestionAffectationUncheckedCreateWithoutTuteurInput> | SuggestionAffectationCreateWithoutTuteurInput[] | SuggestionAffectationUncheckedCreateWithoutTuteurInput[]
    connectOrCreate?: SuggestionAffectationCreateOrConnectWithoutTuteurInput | SuggestionAffectationCreateOrConnectWithoutTuteurInput[]
    upsert?: SuggestionAffectationUpsertWithWhereUniqueWithoutTuteurInput | SuggestionAffectationUpsertWithWhereUniqueWithoutTuteurInput[]
    createMany?: SuggestionAffectationCreateManyTuteurInputEnvelope
    set?: SuggestionAffectationWhereUniqueInput | SuggestionAffectationWhereUniqueInput[]
    disconnect?: SuggestionAffectationWhereUniqueInput | SuggestionAffectationWhereUniqueInput[]
    delete?: SuggestionAffectationWhereUniqueInput | SuggestionAffectationWhereUniqueInput[]
    connect?: SuggestionAffectationWhereUniqueInput | SuggestionAffectationWhereUniqueInput[]
    update?: SuggestionAffectationUpdateWithWhereUniqueWithoutTuteurInput | SuggestionAffectationUpdateWithWhereUniqueWithoutTuteurInput[]
    updateMany?: SuggestionAffectationUpdateManyWithWhereWithoutTuteurInput | SuggestionAffectationUpdateManyWithWhereWithoutTuteurInput[]
    deleteMany?: SuggestionAffectationScalarWhereInput | SuggestionAffectationScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutStagiaireInput = {
    create?: XOR<UserCreateWithoutStagiaireInput, UserUncheckedCreateWithoutStagiaireInput>
    connectOrCreate?: UserCreateOrConnectWithoutStagiaireInput
    connect?: UserWhereUniqueInput
  }

  export type StructureCreateNestedOneWithoutStagiairesInput = {
    create?: XOR<StructureCreateWithoutStagiairesInput, StructureUncheckedCreateWithoutStagiairesInput>
    connectOrCreate?: StructureCreateOrConnectWithoutStagiairesInput
    connect?: StructureWhereUniqueInput
  }

  export type TuteurCreateNestedOneWithoutStagiairesInput = {
    create?: XOR<TuteurCreateWithoutStagiairesInput, TuteurUncheckedCreateWithoutStagiairesInput>
    connectOrCreate?: TuteurCreateOrConnectWithoutStagiairesInput
    connect?: TuteurWhereUniqueInput
  }

  export type DemandeStageCreateNestedManyWithoutStagiaireInput = {
    create?: XOR<DemandeStageCreateWithoutStagiaireInput, DemandeStageUncheckedCreateWithoutStagiaireInput> | DemandeStageCreateWithoutStagiaireInput[] | DemandeStageUncheckedCreateWithoutStagiaireInput[]
    connectOrCreate?: DemandeStageCreateOrConnectWithoutStagiaireInput | DemandeStageCreateOrConnectWithoutStagiaireInput[]
    createMany?: DemandeStageCreateManyStagiaireInputEnvelope
    connect?: DemandeStageWhereUniqueInput | DemandeStageWhereUniqueInput[]
  }

  export type StageCreateNestedManyWithoutStagiaireInput = {
    create?: XOR<StageCreateWithoutStagiaireInput, StageUncheckedCreateWithoutStagiaireInput> | StageCreateWithoutStagiaireInput[] | StageUncheckedCreateWithoutStagiaireInput[]
    connectOrCreate?: StageCreateOrConnectWithoutStagiaireInput | StageCreateOrConnectWithoutStagiaireInput[]
    createMany?: StageCreateManyStagiaireInputEnvelope
    connect?: StageWhereUniqueInput | StageWhereUniqueInput[]
  }

  export type CandidatureScoreCreateNestedManyWithoutStagiaireInput = {
    create?: XOR<CandidatureScoreCreateWithoutStagiaireInput, CandidatureScoreUncheckedCreateWithoutStagiaireInput> | CandidatureScoreCreateWithoutStagiaireInput[] | CandidatureScoreUncheckedCreateWithoutStagiaireInput[]
    connectOrCreate?: CandidatureScoreCreateOrConnectWithoutStagiaireInput | CandidatureScoreCreateOrConnectWithoutStagiaireInput[]
    createMany?: CandidatureScoreCreateManyStagiaireInputEnvelope
    connect?: CandidatureScoreWhereUniqueInput | CandidatureScoreWhereUniqueInput[]
  }

  export type SuggestionAffectationCreateNestedManyWithoutStagiaireInput = {
    create?: XOR<SuggestionAffectationCreateWithoutStagiaireInput, SuggestionAffectationUncheckedCreateWithoutStagiaireInput> | SuggestionAffectationCreateWithoutStagiaireInput[] | SuggestionAffectationUncheckedCreateWithoutStagiaireInput[]
    connectOrCreate?: SuggestionAffectationCreateOrConnectWithoutStagiaireInput | SuggestionAffectationCreateOrConnectWithoutStagiaireInput[]
    createMany?: SuggestionAffectationCreateManyStagiaireInputEnvelope
    connect?: SuggestionAffectationWhereUniqueInput | SuggestionAffectationWhereUniqueInput[]
  }

  export type DemandeStageUncheckedCreateNestedManyWithoutStagiaireInput = {
    create?: XOR<DemandeStageCreateWithoutStagiaireInput, DemandeStageUncheckedCreateWithoutStagiaireInput> | DemandeStageCreateWithoutStagiaireInput[] | DemandeStageUncheckedCreateWithoutStagiaireInput[]
    connectOrCreate?: DemandeStageCreateOrConnectWithoutStagiaireInput | DemandeStageCreateOrConnectWithoutStagiaireInput[]
    createMany?: DemandeStageCreateManyStagiaireInputEnvelope
    connect?: DemandeStageWhereUniqueInput | DemandeStageWhereUniqueInput[]
  }

  export type StageUncheckedCreateNestedManyWithoutStagiaireInput = {
    create?: XOR<StageCreateWithoutStagiaireInput, StageUncheckedCreateWithoutStagiaireInput> | StageCreateWithoutStagiaireInput[] | StageUncheckedCreateWithoutStagiaireInput[]
    connectOrCreate?: StageCreateOrConnectWithoutStagiaireInput | StageCreateOrConnectWithoutStagiaireInput[]
    createMany?: StageCreateManyStagiaireInputEnvelope
    connect?: StageWhereUniqueInput | StageWhereUniqueInput[]
  }

  export type CandidatureScoreUncheckedCreateNestedManyWithoutStagiaireInput = {
    create?: XOR<CandidatureScoreCreateWithoutStagiaireInput, CandidatureScoreUncheckedCreateWithoutStagiaireInput> | CandidatureScoreCreateWithoutStagiaireInput[] | CandidatureScoreUncheckedCreateWithoutStagiaireInput[]
    connectOrCreate?: CandidatureScoreCreateOrConnectWithoutStagiaireInput | CandidatureScoreCreateOrConnectWithoutStagiaireInput[]
    createMany?: CandidatureScoreCreateManyStagiaireInputEnvelope
    connect?: CandidatureScoreWhereUniqueInput | CandidatureScoreWhereUniqueInput[]
  }

  export type SuggestionAffectationUncheckedCreateNestedManyWithoutStagiaireInput = {
    create?: XOR<SuggestionAffectationCreateWithoutStagiaireInput, SuggestionAffectationUncheckedCreateWithoutStagiaireInput> | SuggestionAffectationCreateWithoutStagiaireInput[] | SuggestionAffectationUncheckedCreateWithoutStagiaireInput[]
    connectOrCreate?: SuggestionAffectationCreateOrConnectWithoutStagiaireInput | SuggestionAffectationCreateOrConnectWithoutStagiaireInput[]
    createMany?: SuggestionAffectationCreateManyStagiaireInputEnvelope
    connect?: SuggestionAffectationWhereUniqueInput | SuggestionAffectationWhereUniqueInput[]
  }

  export type NullableEnumStatutDemandeFieldUpdateOperationsInput = {
    set?: $Enums.StatutDemande | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type UserUpdateOneRequiredWithoutStagiaireNestedInput = {
    create?: XOR<UserCreateWithoutStagiaireInput, UserUncheckedCreateWithoutStagiaireInput>
    connectOrCreate?: UserCreateOrConnectWithoutStagiaireInput
    upsert?: UserUpsertWithoutStagiaireInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutStagiaireInput, UserUpdateWithoutStagiaireInput>, UserUncheckedUpdateWithoutStagiaireInput>
  }

  export type StructureUpdateOneWithoutStagiairesNestedInput = {
    create?: XOR<StructureCreateWithoutStagiairesInput, StructureUncheckedCreateWithoutStagiairesInput>
    connectOrCreate?: StructureCreateOrConnectWithoutStagiairesInput
    upsert?: StructureUpsertWithoutStagiairesInput
    disconnect?: StructureWhereInput | boolean
    delete?: StructureWhereInput | boolean
    connect?: StructureWhereUniqueInput
    update?: XOR<XOR<StructureUpdateToOneWithWhereWithoutStagiairesInput, StructureUpdateWithoutStagiairesInput>, StructureUncheckedUpdateWithoutStagiairesInput>
  }

  export type TuteurUpdateOneWithoutStagiairesNestedInput = {
    create?: XOR<TuteurCreateWithoutStagiairesInput, TuteurUncheckedCreateWithoutStagiairesInput>
    connectOrCreate?: TuteurCreateOrConnectWithoutStagiairesInput
    upsert?: TuteurUpsertWithoutStagiairesInput
    disconnect?: TuteurWhereInput | boolean
    delete?: TuteurWhereInput | boolean
    connect?: TuteurWhereUniqueInput
    update?: XOR<XOR<TuteurUpdateToOneWithWhereWithoutStagiairesInput, TuteurUpdateWithoutStagiairesInput>, TuteurUncheckedUpdateWithoutStagiairesInput>
  }

  export type DemandeStageUpdateManyWithoutStagiaireNestedInput = {
    create?: XOR<DemandeStageCreateWithoutStagiaireInput, DemandeStageUncheckedCreateWithoutStagiaireInput> | DemandeStageCreateWithoutStagiaireInput[] | DemandeStageUncheckedCreateWithoutStagiaireInput[]
    connectOrCreate?: DemandeStageCreateOrConnectWithoutStagiaireInput | DemandeStageCreateOrConnectWithoutStagiaireInput[]
    upsert?: DemandeStageUpsertWithWhereUniqueWithoutStagiaireInput | DemandeStageUpsertWithWhereUniqueWithoutStagiaireInput[]
    createMany?: DemandeStageCreateManyStagiaireInputEnvelope
    set?: DemandeStageWhereUniqueInput | DemandeStageWhereUniqueInput[]
    disconnect?: DemandeStageWhereUniqueInput | DemandeStageWhereUniqueInput[]
    delete?: DemandeStageWhereUniqueInput | DemandeStageWhereUniqueInput[]
    connect?: DemandeStageWhereUniqueInput | DemandeStageWhereUniqueInput[]
    update?: DemandeStageUpdateWithWhereUniqueWithoutStagiaireInput | DemandeStageUpdateWithWhereUniqueWithoutStagiaireInput[]
    updateMany?: DemandeStageUpdateManyWithWhereWithoutStagiaireInput | DemandeStageUpdateManyWithWhereWithoutStagiaireInput[]
    deleteMany?: DemandeStageScalarWhereInput | DemandeStageScalarWhereInput[]
  }

  export type StageUpdateManyWithoutStagiaireNestedInput = {
    create?: XOR<StageCreateWithoutStagiaireInput, StageUncheckedCreateWithoutStagiaireInput> | StageCreateWithoutStagiaireInput[] | StageUncheckedCreateWithoutStagiaireInput[]
    connectOrCreate?: StageCreateOrConnectWithoutStagiaireInput | StageCreateOrConnectWithoutStagiaireInput[]
    upsert?: StageUpsertWithWhereUniqueWithoutStagiaireInput | StageUpsertWithWhereUniqueWithoutStagiaireInput[]
    createMany?: StageCreateManyStagiaireInputEnvelope
    set?: StageWhereUniqueInput | StageWhereUniqueInput[]
    disconnect?: StageWhereUniqueInput | StageWhereUniqueInput[]
    delete?: StageWhereUniqueInput | StageWhereUniqueInput[]
    connect?: StageWhereUniqueInput | StageWhereUniqueInput[]
    update?: StageUpdateWithWhereUniqueWithoutStagiaireInput | StageUpdateWithWhereUniqueWithoutStagiaireInput[]
    updateMany?: StageUpdateManyWithWhereWithoutStagiaireInput | StageUpdateManyWithWhereWithoutStagiaireInput[]
    deleteMany?: StageScalarWhereInput | StageScalarWhereInput[]
  }

  export type CandidatureScoreUpdateManyWithoutStagiaireNestedInput = {
    create?: XOR<CandidatureScoreCreateWithoutStagiaireInput, CandidatureScoreUncheckedCreateWithoutStagiaireInput> | CandidatureScoreCreateWithoutStagiaireInput[] | CandidatureScoreUncheckedCreateWithoutStagiaireInput[]
    connectOrCreate?: CandidatureScoreCreateOrConnectWithoutStagiaireInput | CandidatureScoreCreateOrConnectWithoutStagiaireInput[]
    upsert?: CandidatureScoreUpsertWithWhereUniqueWithoutStagiaireInput | CandidatureScoreUpsertWithWhereUniqueWithoutStagiaireInput[]
    createMany?: CandidatureScoreCreateManyStagiaireInputEnvelope
    set?: CandidatureScoreWhereUniqueInput | CandidatureScoreWhereUniqueInput[]
    disconnect?: CandidatureScoreWhereUniqueInput | CandidatureScoreWhereUniqueInput[]
    delete?: CandidatureScoreWhereUniqueInput | CandidatureScoreWhereUniqueInput[]
    connect?: CandidatureScoreWhereUniqueInput | CandidatureScoreWhereUniqueInput[]
    update?: CandidatureScoreUpdateWithWhereUniqueWithoutStagiaireInput | CandidatureScoreUpdateWithWhereUniqueWithoutStagiaireInput[]
    updateMany?: CandidatureScoreUpdateManyWithWhereWithoutStagiaireInput | CandidatureScoreUpdateManyWithWhereWithoutStagiaireInput[]
    deleteMany?: CandidatureScoreScalarWhereInput | CandidatureScoreScalarWhereInput[]
  }

  export type SuggestionAffectationUpdateManyWithoutStagiaireNestedInput = {
    create?: XOR<SuggestionAffectationCreateWithoutStagiaireInput, SuggestionAffectationUncheckedCreateWithoutStagiaireInput> | SuggestionAffectationCreateWithoutStagiaireInput[] | SuggestionAffectationUncheckedCreateWithoutStagiaireInput[]
    connectOrCreate?: SuggestionAffectationCreateOrConnectWithoutStagiaireInput | SuggestionAffectationCreateOrConnectWithoutStagiaireInput[]
    upsert?: SuggestionAffectationUpsertWithWhereUniqueWithoutStagiaireInput | SuggestionAffectationUpsertWithWhereUniqueWithoutStagiaireInput[]
    createMany?: SuggestionAffectationCreateManyStagiaireInputEnvelope
    set?: SuggestionAffectationWhereUniqueInput | SuggestionAffectationWhereUniqueInput[]
    disconnect?: SuggestionAffectationWhereUniqueInput | SuggestionAffectationWhereUniqueInput[]
    delete?: SuggestionAffectationWhereUniqueInput | SuggestionAffectationWhereUniqueInput[]
    connect?: SuggestionAffectationWhereUniqueInput | SuggestionAffectationWhereUniqueInput[]
    update?: SuggestionAffectationUpdateWithWhereUniqueWithoutStagiaireInput | SuggestionAffectationUpdateWithWhereUniqueWithoutStagiaireInput[]
    updateMany?: SuggestionAffectationUpdateManyWithWhereWithoutStagiaireInput | SuggestionAffectationUpdateManyWithWhereWithoutStagiaireInput[]
    deleteMany?: SuggestionAffectationScalarWhereInput | SuggestionAffectationScalarWhereInput[]
  }

  export type DemandeStageUncheckedUpdateManyWithoutStagiaireNestedInput = {
    create?: XOR<DemandeStageCreateWithoutStagiaireInput, DemandeStageUncheckedCreateWithoutStagiaireInput> | DemandeStageCreateWithoutStagiaireInput[] | DemandeStageUncheckedCreateWithoutStagiaireInput[]
    connectOrCreate?: DemandeStageCreateOrConnectWithoutStagiaireInput | DemandeStageCreateOrConnectWithoutStagiaireInput[]
    upsert?: DemandeStageUpsertWithWhereUniqueWithoutStagiaireInput | DemandeStageUpsertWithWhereUniqueWithoutStagiaireInput[]
    createMany?: DemandeStageCreateManyStagiaireInputEnvelope
    set?: DemandeStageWhereUniqueInput | DemandeStageWhereUniqueInput[]
    disconnect?: DemandeStageWhereUniqueInput | DemandeStageWhereUniqueInput[]
    delete?: DemandeStageWhereUniqueInput | DemandeStageWhereUniqueInput[]
    connect?: DemandeStageWhereUniqueInput | DemandeStageWhereUniqueInput[]
    update?: DemandeStageUpdateWithWhereUniqueWithoutStagiaireInput | DemandeStageUpdateWithWhereUniqueWithoutStagiaireInput[]
    updateMany?: DemandeStageUpdateManyWithWhereWithoutStagiaireInput | DemandeStageUpdateManyWithWhereWithoutStagiaireInput[]
    deleteMany?: DemandeStageScalarWhereInput | DemandeStageScalarWhereInput[]
  }

  export type StageUncheckedUpdateManyWithoutStagiaireNestedInput = {
    create?: XOR<StageCreateWithoutStagiaireInput, StageUncheckedCreateWithoutStagiaireInput> | StageCreateWithoutStagiaireInput[] | StageUncheckedCreateWithoutStagiaireInput[]
    connectOrCreate?: StageCreateOrConnectWithoutStagiaireInput | StageCreateOrConnectWithoutStagiaireInput[]
    upsert?: StageUpsertWithWhereUniqueWithoutStagiaireInput | StageUpsertWithWhereUniqueWithoutStagiaireInput[]
    createMany?: StageCreateManyStagiaireInputEnvelope
    set?: StageWhereUniqueInput | StageWhereUniqueInput[]
    disconnect?: StageWhereUniqueInput | StageWhereUniqueInput[]
    delete?: StageWhereUniqueInput | StageWhereUniqueInput[]
    connect?: StageWhereUniqueInput | StageWhereUniqueInput[]
    update?: StageUpdateWithWhereUniqueWithoutStagiaireInput | StageUpdateWithWhereUniqueWithoutStagiaireInput[]
    updateMany?: StageUpdateManyWithWhereWithoutStagiaireInput | StageUpdateManyWithWhereWithoutStagiaireInput[]
    deleteMany?: StageScalarWhereInput | StageScalarWhereInput[]
  }

  export type CandidatureScoreUncheckedUpdateManyWithoutStagiaireNestedInput = {
    create?: XOR<CandidatureScoreCreateWithoutStagiaireInput, CandidatureScoreUncheckedCreateWithoutStagiaireInput> | CandidatureScoreCreateWithoutStagiaireInput[] | CandidatureScoreUncheckedCreateWithoutStagiaireInput[]
    connectOrCreate?: CandidatureScoreCreateOrConnectWithoutStagiaireInput | CandidatureScoreCreateOrConnectWithoutStagiaireInput[]
    upsert?: CandidatureScoreUpsertWithWhereUniqueWithoutStagiaireInput | CandidatureScoreUpsertWithWhereUniqueWithoutStagiaireInput[]
    createMany?: CandidatureScoreCreateManyStagiaireInputEnvelope
    set?: CandidatureScoreWhereUniqueInput | CandidatureScoreWhereUniqueInput[]
    disconnect?: CandidatureScoreWhereUniqueInput | CandidatureScoreWhereUniqueInput[]
    delete?: CandidatureScoreWhereUniqueInput | CandidatureScoreWhereUniqueInput[]
    connect?: CandidatureScoreWhereUniqueInput | CandidatureScoreWhereUniqueInput[]
    update?: CandidatureScoreUpdateWithWhereUniqueWithoutStagiaireInput | CandidatureScoreUpdateWithWhereUniqueWithoutStagiaireInput[]
    updateMany?: CandidatureScoreUpdateManyWithWhereWithoutStagiaireInput | CandidatureScoreUpdateManyWithWhereWithoutStagiaireInput[]
    deleteMany?: CandidatureScoreScalarWhereInput | CandidatureScoreScalarWhereInput[]
  }

  export type SuggestionAffectationUncheckedUpdateManyWithoutStagiaireNestedInput = {
    create?: XOR<SuggestionAffectationCreateWithoutStagiaireInput, SuggestionAffectationUncheckedCreateWithoutStagiaireInput> | SuggestionAffectationCreateWithoutStagiaireInput[] | SuggestionAffectationUncheckedCreateWithoutStagiaireInput[]
    connectOrCreate?: SuggestionAffectationCreateOrConnectWithoutStagiaireInput | SuggestionAffectationCreateOrConnectWithoutStagiaireInput[]
    upsert?: SuggestionAffectationUpsertWithWhereUniqueWithoutStagiaireInput | SuggestionAffectationUpsertWithWhereUniqueWithoutStagiaireInput[]
    createMany?: SuggestionAffectationCreateManyStagiaireInputEnvelope
    set?: SuggestionAffectationWhereUniqueInput | SuggestionAffectationWhereUniqueInput[]
    disconnect?: SuggestionAffectationWhereUniqueInput | SuggestionAffectationWhereUniqueInput[]
    delete?: SuggestionAffectationWhereUniqueInput | SuggestionAffectationWhereUniqueInput[]
    connect?: SuggestionAffectationWhereUniqueInput | SuggestionAffectationWhereUniqueInput[]
    update?: SuggestionAffectationUpdateWithWhereUniqueWithoutStagiaireInput | SuggestionAffectationUpdateWithWhereUniqueWithoutStagiaireInput[]
    updateMany?: SuggestionAffectationUpdateManyWithWhereWithoutStagiaireInput | SuggestionAffectationUpdateManyWithWhereWithoutStagiaireInput[]
    deleteMany?: SuggestionAffectationScalarWhereInput | SuggestionAffectationScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutDpafInput = {
    create?: XOR<UserCreateWithoutDpafInput, UserUncheckedCreateWithoutDpafInput>
    connectOrCreate?: UserCreateOrConnectWithoutDpafInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutDpafNestedInput = {
    create?: XOR<UserCreateWithoutDpafInput, UserUncheckedCreateWithoutDpafInput>
    connectOrCreate?: UserCreateOrConnectWithoutDpafInput
    upsert?: UserUpsertWithoutDpafInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDpafInput, UserUpdateWithoutDpafInput>, UserUncheckedUpdateWithoutDpafInput>
  }

  export type StagiaireCreateNestedOneWithoutDemandesStagesInput = {
    create?: XOR<StagiaireCreateWithoutDemandesStagesInput, StagiaireUncheckedCreateWithoutDemandesStagesInput>
    connectOrCreate?: StagiaireCreateOrConnectWithoutDemandesStagesInput
    connect?: StagiaireWhereUniqueInput
  }

  export type StructureCreateNestedOneWithoutDemandesStagesInput = {
    create?: XOR<StructureCreateWithoutDemandesStagesInput, StructureUncheckedCreateWithoutDemandesStagesInput>
    connectOrCreate?: StructureCreateOrConnectWithoutDemandesStagesInput
    connect?: StructureWhereUniqueInput
  }

  export type EnumEtatDemandeFieldUpdateOperationsInput = {
    set?: $Enums.EtatDemande
  }

  export type StagiaireUpdateOneRequiredWithoutDemandesStagesNestedInput = {
    create?: XOR<StagiaireCreateWithoutDemandesStagesInput, StagiaireUncheckedCreateWithoutDemandesStagesInput>
    connectOrCreate?: StagiaireCreateOrConnectWithoutDemandesStagesInput
    upsert?: StagiaireUpsertWithoutDemandesStagesInput
    connect?: StagiaireWhereUniqueInput
    update?: XOR<XOR<StagiaireUpdateToOneWithWhereWithoutDemandesStagesInput, StagiaireUpdateWithoutDemandesStagesInput>, StagiaireUncheckedUpdateWithoutDemandesStagesInput>
  }

  export type StructureUpdateOneWithoutDemandesStagesNestedInput = {
    create?: XOR<StructureCreateWithoutDemandesStagesInput, StructureUncheckedCreateWithoutDemandesStagesInput>
    connectOrCreate?: StructureCreateOrConnectWithoutDemandesStagesInput
    upsert?: StructureUpsertWithoutDemandesStagesInput
    disconnect?: StructureWhereInput | boolean
    delete?: StructureWhereInput | boolean
    connect?: StructureWhereUniqueInput
    update?: XOR<XOR<StructureUpdateToOneWithWhereWithoutDemandesStagesInput, StructureUpdateWithoutDemandesStagesInput>, StructureUncheckedUpdateWithoutDemandesStagesInput>
  }

  export type StagiaireCreateNestedOneWithoutStagesInput = {
    create?: XOR<StagiaireCreateWithoutStagesInput, StagiaireUncheckedCreateWithoutStagesInput>
    connectOrCreate?: StagiaireCreateOrConnectWithoutStagesInput
    connect?: StagiaireWhereUniqueInput
  }

  export type TuteurCreateNestedOneWithoutStagesInput = {
    create?: XOR<TuteurCreateWithoutStagesInput, TuteurUncheckedCreateWithoutStagesInput>
    connectOrCreate?: TuteurCreateOrConnectWithoutStagesInput
    connect?: TuteurWhereUniqueInput
  }

  export type StructureCreateNestedOneWithoutStagesInput = {
    create?: XOR<StructureCreateWithoutStagesInput, StructureUncheckedCreateWithoutStagesInput>
    connectOrCreate?: StructureCreateOrConnectWithoutStagesInput
    connect?: StructureWhereUniqueInput
  }

  export type EnumEtatStageFieldUpdateOperationsInput = {
    set?: $Enums.EtatStage
  }

  export type StagiaireUpdateOneRequiredWithoutStagesNestedInput = {
    create?: XOR<StagiaireCreateWithoutStagesInput, StagiaireUncheckedCreateWithoutStagesInput>
    connectOrCreate?: StagiaireCreateOrConnectWithoutStagesInput
    upsert?: StagiaireUpsertWithoutStagesInput
    connect?: StagiaireWhereUniqueInput
    update?: XOR<XOR<StagiaireUpdateToOneWithWhereWithoutStagesInput, StagiaireUpdateWithoutStagesInput>, StagiaireUncheckedUpdateWithoutStagesInput>
  }

  export type TuteurUpdateOneRequiredWithoutStagesNestedInput = {
    create?: XOR<TuteurCreateWithoutStagesInput, TuteurUncheckedCreateWithoutStagesInput>
    connectOrCreate?: TuteurCreateOrConnectWithoutStagesInput
    upsert?: TuteurUpsertWithoutStagesInput
    connect?: TuteurWhereUniqueInput
    update?: XOR<XOR<TuteurUpdateToOneWithWhereWithoutStagesInput, TuteurUpdateWithoutStagesInput>, TuteurUncheckedUpdateWithoutStagesInput>
  }

  export type StructureUpdateOneRequiredWithoutStagesNestedInput = {
    create?: XOR<StructureCreateWithoutStagesInput, StructureUncheckedCreateWithoutStagesInput>
    connectOrCreate?: StructureCreateOrConnectWithoutStagesInput
    upsert?: StructureUpsertWithoutStagesInput
    connect?: StructureWhereUniqueInput
    update?: XOR<XOR<StructureUpdateToOneWithWhereWithoutStagesInput, StructureUpdateWithoutStagesInput>, StructureUncheckedUpdateWithoutStagesInput>
  }

  export type StagiaireCreateNestedOneWithoutCandidatureScoresInput = {
    create?: XOR<StagiaireCreateWithoutCandidatureScoresInput, StagiaireUncheckedCreateWithoutCandidatureScoresInput>
    connectOrCreate?: StagiaireCreateOrConnectWithoutCandidatureScoresInput
    connect?: StagiaireWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type StagiaireUpdateOneRequiredWithoutCandidatureScoresNestedInput = {
    create?: XOR<StagiaireCreateWithoutCandidatureScoresInput, StagiaireUncheckedCreateWithoutCandidatureScoresInput>
    connectOrCreate?: StagiaireCreateOrConnectWithoutCandidatureScoresInput
    upsert?: StagiaireUpsertWithoutCandidatureScoresInput
    connect?: StagiaireWhereUniqueInput
    update?: XOR<XOR<StagiaireUpdateToOneWithWhereWithoutCandidatureScoresInput, StagiaireUpdateWithoutCandidatureScoresInput>, StagiaireUncheckedUpdateWithoutCandidatureScoresInput>
  }

  export type StagiaireCreateNestedOneWithoutSuggestionsInput = {
    create?: XOR<StagiaireCreateWithoutSuggestionsInput, StagiaireUncheckedCreateWithoutSuggestionsInput>
    connectOrCreate?: StagiaireCreateOrConnectWithoutSuggestionsInput
    connect?: StagiaireWhereUniqueInput
  }

  export type TuteurCreateNestedOneWithoutSuggestionsInput = {
    create?: XOR<TuteurCreateWithoutSuggestionsInput, TuteurUncheckedCreateWithoutSuggestionsInput>
    connectOrCreate?: TuteurCreateOrConnectWithoutSuggestionsInput
    connect?: TuteurWhereUniqueInput
  }

  export type StagiaireUpdateOneRequiredWithoutSuggestionsNestedInput = {
    create?: XOR<StagiaireCreateWithoutSuggestionsInput, StagiaireUncheckedCreateWithoutSuggestionsInput>
    connectOrCreate?: StagiaireCreateOrConnectWithoutSuggestionsInput
    upsert?: StagiaireUpsertWithoutSuggestionsInput
    connect?: StagiaireWhereUniqueInput
    update?: XOR<XOR<StagiaireUpdateToOneWithWhereWithoutSuggestionsInput, StagiaireUpdateWithoutSuggestionsInput>, StagiaireUncheckedUpdateWithoutSuggestionsInput>
  }

  export type TuteurUpdateOneRequiredWithoutSuggestionsNestedInput = {
    create?: XOR<TuteurCreateWithoutSuggestionsInput, TuteurUncheckedCreateWithoutSuggestionsInput>
    connectOrCreate?: TuteurCreateOrConnectWithoutSuggestionsInput
    upsert?: TuteurUpsertWithoutSuggestionsInput
    connect?: TuteurWhereUniqueInput
    update?: XOR<XOR<TuteurUpdateToOneWithWhereWithoutSuggestionsInput, TuteurUpdateWithoutSuggestionsInput>, TuteurUncheckedUpdateWithoutSuggestionsInput>
  }

  export type UserCreateNestedOneWithoutMessagesSentInput = {
    create?: XOR<UserCreateWithoutMessagesSentInput, UserUncheckedCreateWithoutMessagesSentInput>
    connectOrCreate?: UserCreateOrConnectWithoutMessagesSentInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutMessagesReceivedInput = {
    create?: XOR<UserCreateWithoutMessagesReceivedInput, UserUncheckedCreateWithoutMessagesReceivedInput>
    connectOrCreate?: UserCreateOrConnectWithoutMessagesReceivedInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutMessagesSentNestedInput = {
    create?: XOR<UserCreateWithoutMessagesSentInput, UserUncheckedCreateWithoutMessagesSentInput>
    connectOrCreate?: UserCreateOrConnectWithoutMessagesSentInput
    upsert?: UserUpsertWithoutMessagesSentInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMessagesSentInput, UserUpdateWithoutMessagesSentInput>, UserUncheckedUpdateWithoutMessagesSentInput>
  }

  export type UserUpdateOneRequiredWithoutMessagesReceivedNestedInput = {
    create?: XOR<UserCreateWithoutMessagesReceivedInput, UserUncheckedCreateWithoutMessagesReceivedInput>
    connectOrCreate?: UserCreateOrConnectWithoutMessagesReceivedInput
    upsert?: UserUpsertWithoutMessagesReceivedInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMessagesReceivedInput, UserUpdateWithoutMessagesReceivedInput>, UserUncheckedUpdateWithoutMessagesReceivedInput>
  }

  export type TuteurCreateNestedOneWithoutThemesInput = {
    create?: XOR<TuteurCreateWithoutThemesInput, TuteurUncheckedCreateWithoutThemesInput>
    connectOrCreate?: TuteurCreateOrConnectWithoutThemesInput
    connect?: TuteurWhereUniqueInput
  }

  export type TuteurUpdateOneRequiredWithoutThemesNestedInput = {
    create?: XOR<TuteurCreateWithoutThemesInput, TuteurUncheckedCreateWithoutThemesInput>
    connectOrCreate?: TuteurCreateOrConnectWithoutThemesInput
    upsert?: TuteurUpsertWithoutThemesInput
    connect?: TuteurWhereUniqueInput
    update?: XOR<XOR<TuteurUpdateToOneWithWhereWithoutThemesInput, TuteurUpdateWithoutThemesInput>, TuteurUncheckedUpdateWithoutThemesInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserCreateNestedOneWithoutJournalActionsInput = {
    create?: XOR<UserCreateWithoutJournalActionsInput, UserUncheckedCreateWithoutJournalActionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutJournalActionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutJournalActionsNestedInput = {
    create?: XOR<UserCreateWithoutJournalActionsInput, UserUncheckedCreateWithoutJournalActionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutJournalActionsInput
    upsert?: UserUpsertWithoutJournalActionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutJournalActionsInput, UserUpdateWithoutJournalActionsInput>, UserUncheckedUpdateWithoutJournalActionsInput>
  }

  export type NestedUuidFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidFilter<$PrismaModel> | string
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedUuidWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedEnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedUuidNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidNullableFilter<$PrismaModel> | string | null
  }

  export type NestedUuidNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedEnumStatutDemandeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.StatutDemande | EnumStatutDemandeFieldRefInput<$PrismaModel> | null
    in?: $Enums.StatutDemande[] | ListEnumStatutDemandeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.StatutDemande[] | ListEnumStatutDemandeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumStatutDemandeNullableFilter<$PrismaModel> | $Enums.StatutDemande | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumStatutDemandeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatutDemande | EnumStatutDemandeFieldRefInput<$PrismaModel> | null
    in?: $Enums.StatutDemande[] | ListEnumStatutDemandeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.StatutDemande[] | ListEnumStatutDemandeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumStatutDemandeNullableWithAggregatesFilter<$PrismaModel> | $Enums.StatutDemande | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumStatutDemandeNullableFilter<$PrismaModel>
    _max?: NestedEnumStatutDemandeNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumEtatDemandeFilter<$PrismaModel = never> = {
    equals?: $Enums.EtatDemande | EnumEtatDemandeFieldRefInput<$PrismaModel>
    in?: $Enums.EtatDemande[] | ListEnumEtatDemandeFieldRefInput<$PrismaModel>
    notIn?: $Enums.EtatDemande[] | ListEnumEtatDemandeFieldRefInput<$PrismaModel>
    not?: NestedEnumEtatDemandeFilter<$PrismaModel> | $Enums.EtatDemande
  }

  export type NestedEnumEtatDemandeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EtatDemande | EnumEtatDemandeFieldRefInput<$PrismaModel>
    in?: $Enums.EtatDemande[] | ListEnumEtatDemandeFieldRefInput<$PrismaModel>
    notIn?: $Enums.EtatDemande[] | ListEnumEtatDemandeFieldRefInput<$PrismaModel>
    not?: NestedEnumEtatDemandeWithAggregatesFilter<$PrismaModel> | $Enums.EtatDemande
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEtatDemandeFilter<$PrismaModel>
    _max?: NestedEnumEtatDemandeFilter<$PrismaModel>
  }

  export type NestedEnumEtatStageFilter<$PrismaModel = never> = {
    equals?: $Enums.EtatStage | EnumEtatStageFieldRefInput<$PrismaModel>
    in?: $Enums.EtatStage[] | ListEnumEtatStageFieldRefInput<$PrismaModel>
    notIn?: $Enums.EtatStage[] | ListEnumEtatStageFieldRefInput<$PrismaModel>
    not?: NestedEnumEtatStageFilter<$PrismaModel> | $Enums.EtatStage
  }

  export type NestedEnumEtatStageWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EtatStage | EnumEtatStageFieldRefInput<$PrismaModel>
    in?: $Enums.EtatStage[] | ListEnumEtatStageFieldRefInput<$PrismaModel>
    notIn?: $Enums.EtatStage[] | ListEnumEtatStageFieldRefInput<$PrismaModel>
    not?: NestedEnumEtatStageWithAggregatesFilter<$PrismaModel> | $Enums.EtatStage
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEtatStageFilter<$PrismaModel>
    _max?: NestedEnumEtatStageFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type UserProfileCreateWithoutUserInput = {
    nom?: string | null
    prenom?: string | null
    telephone?: string | null
    photo?: string | null
    adresse?: string | null
    autresInfos?: NullableJsonNullValueInput | InputJsonValue
  }

  export type UserProfileUncheckedCreateWithoutUserInput = {
    nom?: string | null
    prenom?: string | null
    telephone?: string | null
    photo?: string | null
    adresse?: string | null
    autresInfos?: NullableJsonNullValueInput | InputJsonValue
  }

  export type UserProfileCreateOrConnectWithoutUserInput = {
    where: UserProfileWhereUniqueInput
    create: XOR<UserProfileCreateWithoutUserInput, UserProfileUncheckedCreateWithoutUserInput>
  }

  export type TuteurCreateWithoutUserInput = {
    fonction?: string | null
    disponibilite?: boolean
    competences?: TuteurCreatecompetencesInput | string[]
    structure?: StructureCreateNestedOneWithoutTuteursInput
    stagiaires?: StagiaireCreateNestedManyWithoutTuteurInput
    stages?: StageCreateNestedManyWithoutTuteurInput
    themes?: ThemeTuteurCreateNestedManyWithoutTuteurInput
    suggestions?: SuggestionAffectationCreateNestedManyWithoutTuteurInput
  }

  export type TuteurUncheckedCreateWithoutUserInput = {
    structureId?: string | null
    fonction?: string | null
    disponibilite?: boolean
    competences?: TuteurCreatecompetencesInput | string[]
    stagiaires?: StagiaireUncheckedCreateNestedManyWithoutTuteurInput
    stages?: StageUncheckedCreateNestedManyWithoutTuteurInput
    themes?: ThemeTuteurUncheckedCreateNestedManyWithoutTuteurInput
    suggestions?: SuggestionAffectationUncheckedCreateNestedManyWithoutTuteurInput
  }

  export type TuteurCreateOrConnectWithoutUserInput = {
    where: TuteurWhereUniqueInput
    create: XOR<TuteurCreateWithoutUserInput, TuteurUncheckedCreateWithoutUserInput>
  }

  export type StagiaireCreateWithoutUserInput = {
    codeDemande?: string | null
    statutDemande?: $Enums.StatutDemande | null
    dateDebut?: Date | string | null
    dateFin?: Date | string | null
    structure?: StructureCreateNestedOneWithoutStagiairesInput
    tuteur?: TuteurCreateNestedOneWithoutStagiairesInput
    demandesStages?: DemandeStageCreateNestedManyWithoutStagiaireInput
    stages?: StageCreateNestedManyWithoutStagiaireInput
    candidatureScores?: CandidatureScoreCreateNestedManyWithoutStagiaireInput
    suggestions?: SuggestionAffectationCreateNestedManyWithoutStagiaireInput
  }

  export type StagiaireUncheckedCreateWithoutUserInput = {
    codeDemande?: string | null
    statutDemande?: $Enums.StatutDemande | null
    structureAffecteeId?: string | null
    tuteurId?: string | null
    dateDebut?: Date | string | null
    dateFin?: Date | string | null
    demandesStages?: DemandeStageUncheckedCreateNestedManyWithoutStagiaireInput
    stages?: StageUncheckedCreateNestedManyWithoutStagiaireInput
    candidatureScores?: CandidatureScoreUncheckedCreateNestedManyWithoutStagiaireInput
    suggestions?: SuggestionAffectationUncheckedCreateNestedManyWithoutStagiaireInput
  }

  export type StagiaireCreateOrConnectWithoutUserInput = {
    where: StagiaireWhereUniqueInput
    create: XOR<StagiaireCreateWithoutUserInput, StagiaireUncheckedCreateWithoutUserInput>
  }

  export type DPAFCreateWithoutUserInput = {

  }

  export type DPAFUncheckedCreateWithoutUserInput = {

  }

  export type DPAFCreateOrConnectWithoutUserInput = {
    where: DPAFWhereUniqueInput
    create: XOR<DPAFCreateWithoutUserInput, DPAFUncheckedCreateWithoutUserInput>
  }

  export type StructureCreateWithoutUserInput = {
    id?: string
    nomStructure: string
    type?: string | null
    adresse?: string | null
    emailContact?: string | null
    telephoneContact?: string | null
    tuteurs?: TuteurCreateNestedManyWithoutStructureInput
    stagiaires?: StagiaireCreateNestedManyWithoutStructureInput
    demandesStages?: DemandeStageCreateNestedManyWithoutStructureCibleInput
    stages?: StageCreateNestedManyWithoutStructureInput
  }

  export type StructureUncheckedCreateWithoutUserInput = {
    id?: string
    nomStructure: string
    type?: string | null
    adresse?: string | null
    emailContact?: string | null
    telephoneContact?: string | null
    tuteurs?: TuteurUncheckedCreateNestedManyWithoutStructureInput
    stagiaires?: StagiaireUncheckedCreateNestedManyWithoutStructureInput
    demandesStages?: DemandeStageUncheckedCreateNestedManyWithoutStructureCibleInput
    stages?: StageUncheckedCreateNestedManyWithoutStructureInput
  }

  export type StructureCreateOrConnectWithoutUserInput = {
    where: StructureWhereUniqueInput
    create: XOR<StructureCreateWithoutUserInput, StructureUncheckedCreateWithoutUserInput>
  }

  export type MessageCreateWithoutExpediteurInput = {
    id?: string
    contenu: string
    fichierJoint?: string | null
    lu?: boolean
    envoyeLe?: Date | string
    destinataire: UserCreateNestedOneWithoutMessagesReceivedInput
  }

  export type MessageUncheckedCreateWithoutExpediteurInput = {
    id?: string
    destinataireId: string
    contenu: string
    fichierJoint?: string | null
    lu?: boolean
    envoyeLe?: Date | string
  }

  export type MessageCreateOrConnectWithoutExpediteurInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutExpediteurInput, MessageUncheckedCreateWithoutExpediteurInput>
  }

  export type MessageCreateManyExpediteurInputEnvelope = {
    data: MessageCreateManyExpediteurInput | MessageCreateManyExpediteurInput[]
    skipDuplicates?: boolean
  }

  export type MessageCreateWithoutDestinataireInput = {
    id?: string
    contenu: string
    fichierJoint?: string | null
    lu?: boolean
    envoyeLe?: Date | string
    expediteur: UserCreateNestedOneWithoutMessagesSentInput
  }

  export type MessageUncheckedCreateWithoutDestinataireInput = {
    id?: string
    expediteurId: string
    contenu: string
    fichierJoint?: string | null
    lu?: boolean
    envoyeLe?: Date | string
  }

  export type MessageCreateOrConnectWithoutDestinataireInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutDestinataireInput, MessageUncheckedCreateWithoutDestinataireInput>
  }

  export type MessageCreateManyDestinataireInputEnvelope = {
    data: MessageCreateManyDestinataireInput | MessageCreateManyDestinataireInput[]
    skipDuplicates?: boolean
  }

  export type JournalActionCreateWithoutUserInput = {
    id?: string
    action: string
    cible: string
    timestamp?: Date | string
  }

  export type JournalActionUncheckedCreateWithoutUserInput = {
    id?: string
    action: string
    cible: string
    timestamp?: Date | string
  }

  export type JournalActionCreateOrConnectWithoutUserInput = {
    where: JournalActionWhereUniqueInput
    create: XOR<JournalActionCreateWithoutUserInput, JournalActionUncheckedCreateWithoutUserInput>
  }

  export type JournalActionCreateManyUserInputEnvelope = {
    data: JournalActionCreateManyUserInput | JournalActionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserProfileUpsertWithoutUserInput = {
    update: XOR<UserProfileUpdateWithoutUserInput, UserProfileUncheckedUpdateWithoutUserInput>
    create: XOR<UserProfileCreateWithoutUserInput, UserProfileUncheckedCreateWithoutUserInput>
    where?: UserProfileWhereInput
  }

  export type UserProfileUpdateToOneWithWhereWithoutUserInput = {
    where?: UserProfileWhereInput
    data: XOR<UserProfileUpdateWithoutUserInput, UserProfileUncheckedUpdateWithoutUserInput>
  }

  export type UserProfileUpdateWithoutUserInput = {
    nom?: NullableStringFieldUpdateOperationsInput | string | null
    prenom?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    adresse?: NullableStringFieldUpdateOperationsInput | string | null
    autresInfos?: NullableJsonNullValueInput | InputJsonValue
  }

  export type UserProfileUncheckedUpdateWithoutUserInput = {
    nom?: NullableStringFieldUpdateOperationsInput | string | null
    prenom?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    adresse?: NullableStringFieldUpdateOperationsInput | string | null
    autresInfos?: NullableJsonNullValueInput | InputJsonValue
  }

  export type TuteurUpsertWithoutUserInput = {
    update: XOR<TuteurUpdateWithoutUserInput, TuteurUncheckedUpdateWithoutUserInput>
    create: XOR<TuteurCreateWithoutUserInput, TuteurUncheckedCreateWithoutUserInput>
    where?: TuteurWhereInput
  }

  export type TuteurUpdateToOneWithWhereWithoutUserInput = {
    where?: TuteurWhereInput
    data: XOR<TuteurUpdateWithoutUserInput, TuteurUncheckedUpdateWithoutUserInput>
  }

  export type TuteurUpdateWithoutUserInput = {
    fonction?: NullableStringFieldUpdateOperationsInput | string | null
    disponibilite?: BoolFieldUpdateOperationsInput | boolean
    competences?: TuteurUpdatecompetencesInput | string[]
    structure?: StructureUpdateOneWithoutTuteursNestedInput
    stagiaires?: StagiaireUpdateManyWithoutTuteurNestedInput
    stages?: StageUpdateManyWithoutTuteurNestedInput
    themes?: ThemeTuteurUpdateManyWithoutTuteurNestedInput
    suggestions?: SuggestionAffectationUpdateManyWithoutTuteurNestedInput
  }

  export type TuteurUncheckedUpdateWithoutUserInput = {
    structureId?: NullableStringFieldUpdateOperationsInput | string | null
    fonction?: NullableStringFieldUpdateOperationsInput | string | null
    disponibilite?: BoolFieldUpdateOperationsInput | boolean
    competences?: TuteurUpdatecompetencesInput | string[]
    stagiaires?: StagiaireUncheckedUpdateManyWithoutTuteurNestedInput
    stages?: StageUncheckedUpdateManyWithoutTuteurNestedInput
    themes?: ThemeTuteurUncheckedUpdateManyWithoutTuteurNestedInput
    suggestions?: SuggestionAffectationUncheckedUpdateManyWithoutTuteurNestedInput
  }

  export type StagiaireUpsertWithoutUserInput = {
    update: XOR<StagiaireUpdateWithoutUserInput, StagiaireUncheckedUpdateWithoutUserInput>
    create: XOR<StagiaireCreateWithoutUserInput, StagiaireUncheckedCreateWithoutUserInput>
    where?: StagiaireWhereInput
  }

  export type StagiaireUpdateToOneWithWhereWithoutUserInput = {
    where?: StagiaireWhereInput
    data: XOR<StagiaireUpdateWithoutUserInput, StagiaireUncheckedUpdateWithoutUserInput>
  }

  export type StagiaireUpdateWithoutUserInput = {
    codeDemande?: NullableStringFieldUpdateOperationsInput | string | null
    statutDemande?: NullableEnumStatutDemandeFieldUpdateOperationsInput | $Enums.StatutDemande | null
    dateDebut?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dateFin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    structure?: StructureUpdateOneWithoutStagiairesNestedInput
    tuteur?: TuteurUpdateOneWithoutStagiairesNestedInput
    demandesStages?: DemandeStageUpdateManyWithoutStagiaireNestedInput
    stages?: StageUpdateManyWithoutStagiaireNestedInput
    candidatureScores?: CandidatureScoreUpdateManyWithoutStagiaireNestedInput
    suggestions?: SuggestionAffectationUpdateManyWithoutStagiaireNestedInput
  }

  export type StagiaireUncheckedUpdateWithoutUserInput = {
    codeDemande?: NullableStringFieldUpdateOperationsInput | string | null
    statutDemande?: NullableEnumStatutDemandeFieldUpdateOperationsInput | $Enums.StatutDemande | null
    structureAffecteeId?: NullableStringFieldUpdateOperationsInput | string | null
    tuteurId?: NullableStringFieldUpdateOperationsInput | string | null
    dateDebut?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dateFin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    demandesStages?: DemandeStageUncheckedUpdateManyWithoutStagiaireNestedInput
    stages?: StageUncheckedUpdateManyWithoutStagiaireNestedInput
    candidatureScores?: CandidatureScoreUncheckedUpdateManyWithoutStagiaireNestedInput
    suggestions?: SuggestionAffectationUncheckedUpdateManyWithoutStagiaireNestedInput
  }

  export type DPAFUpsertWithoutUserInput = {
    update: XOR<DPAFUpdateWithoutUserInput, DPAFUncheckedUpdateWithoutUserInput>
    create: XOR<DPAFCreateWithoutUserInput, DPAFUncheckedCreateWithoutUserInput>
    where?: DPAFWhereInput
  }

  export type DPAFUpdateToOneWithWhereWithoutUserInput = {
    where?: DPAFWhereInput
    data: XOR<DPAFUpdateWithoutUserInput, DPAFUncheckedUpdateWithoutUserInput>
  }

  export type DPAFUpdateWithoutUserInput = {

  }

  export type DPAFUncheckedUpdateWithoutUserInput = {

  }

  export type StructureUpsertWithoutUserInput = {
    update: XOR<StructureUpdateWithoutUserInput, StructureUncheckedUpdateWithoutUserInput>
    create: XOR<StructureCreateWithoutUserInput, StructureUncheckedCreateWithoutUserInput>
    where?: StructureWhereInput
  }

  export type StructureUpdateToOneWithWhereWithoutUserInput = {
    where?: StructureWhereInput
    data: XOR<StructureUpdateWithoutUserInput, StructureUncheckedUpdateWithoutUserInput>
  }

  export type StructureUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    nomStructure?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    adresse?: NullableStringFieldUpdateOperationsInput | string | null
    emailContact?: NullableStringFieldUpdateOperationsInput | string | null
    telephoneContact?: NullableStringFieldUpdateOperationsInput | string | null
    tuteurs?: TuteurUpdateManyWithoutStructureNestedInput
    stagiaires?: StagiaireUpdateManyWithoutStructureNestedInput
    demandesStages?: DemandeStageUpdateManyWithoutStructureCibleNestedInput
    stages?: StageUpdateManyWithoutStructureNestedInput
  }

  export type StructureUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    nomStructure?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    adresse?: NullableStringFieldUpdateOperationsInput | string | null
    emailContact?: NullableStringFieldUpdateOperationsInput | string | null
    telephoneContact?: NullableStringFieldUpdateOperationsInput | string | null
    tuteurs?: TuteurUncheckedUpdateManyWithoutStructureNestedInput
    stagiaires?: StagiaireUncheckedUpdateManyWithoutStructureNestedInput
    demandesStages?: DemandeStageUncheckedUpdateManyWithoutStructureCibleNestedInput
    stages?: StageUncheckedUpdateManyWithoutStructureNestedInput
  }

  export type MessageUpsertWithWhereUniqueWithoutExpediteurInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutExpediteurInput, MessageUncheckedUpdateWithoutExpediteurInput>
    create: XOR<MessageCreateWithoutExpediteurInput, MessageUncheckedCreateWithoutExpediteurInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutExpediteurInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutExpediteurInput, MessageUncheckedUpdateWithoutExpediteurInput>
  }

  export type MessageUpdateManyWithWhereWithoutExpediteurInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutExpediteurInput>
  }

  export type MessageScalarWhereInput = {
    AND?: MessageScalarWhereInput | MessageScalarWhereInput[]
    OR?: MessageScalarWhereInput[]
    NOT?: MessageScalarWhereInput | MessageScalarWhereInput[]
    id?: UuidFilter<"Message"> | string
    expediteurId?: UuidFilter<"Message"> | string
    destinataireId?: UuidFilter<"Message"> | string
    contenu?: StringFilter<"Message"> | string
    fichierJoint?: StringNullableFilter<"Message"> | string | null
    lu?: BoolFilter<"Message"> | boolean
    envoyeLe?: DateTimeFilter<"Message"> | Date | string
  }

  export type MessageUpsertWithWhereUniqueWithoutDestinataireInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutDestinataireInput, MessageUncheckedUpdateWithoutDestinataireInput>
    create: XOR<MessageCreateWithoutDestinataireInput, MessageUncheckedCreateWithoutDestinataireInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutDestinataireInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutDestinataireInput, MessageUncheckedUpdateWithoutDestinataireInput>
  }

  export type MessageUpdateManyWithWhereWithoutDestinataireInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutDestinataireInput>
  }

  export type JournalActionUpsertWithWhereUniqueWithoutUserInput = {
    where: JournalActionWhereUniqueInput
    update: XOR<JournalActionUpdateWithoutUserInput, JournalActionUncheckedUpdateWithoutUserInput>
    create: XOR<JournalActionCreateWithoutUserInput, JournalActionUncheckedCreateWithoutUserInput>
  }

  export type JournalActionUpdateWithWhereUniqueWithoutUserInput = {
    where: JournalActionWhereUniqueInput
    data: XOR<JournalActionUpdateWithoutUserInput, JournalActionUncheckedUpdateWithoutUserInput>
  }

  export type JournalActionUpdateManyWithWhereWithoutUserInput = {
    where: JournalActionScalarWhereInput
    data: XOR<JournalActionUpdateManyMutationInput, JournalActionUncheckedUpdateManyWithoutUserInput>
  }

  export type JournalActionScalarWhereInput = {
    AND?: JournalActionScalarWhereInput | JournalActionScalarWhereInput[]
    OR?: JournalActionScalarWhereInput[]
    NOT?: JournalActionScalarWhereInput | JournalActionScalarWhereInput[]
    id?: UuidFilter<"JournalAction"> | string
    userId?: UuidFilter<"JournalAction"> | string
    action?: StringFilter<"JournalAction"> | string
    cible?: StringFilter<"JournalAction"> | string
    timestamp?: DateTimeFilter<"JournalAction"> | Date | string
  }

  export type UserCreateWithoutProfileInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    tuteur?: TuteurCreateNestedOneWithoutUserInput
    stagiaire?: StagiaireCreateNestedOneWithoutUserInput
    dpaf?: DPAFCreateNestedOneWithoutUserInput
    structure?: StructureCreateNestedOneWithoutUserInput
    messagesSent?: MessageCreateNestedManyWithoutExpediteurInput
    messagesReceived?: MessageCreateNestedManyWithoutDestinataireInput
    journalActions?: JournalActionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutProfileInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    tuteur?: TuteurUncheckedCreateNestedOneWithoutUserInput
    stagiaire?: StagiaireUncheckedCreateNestedOneWithoutUserInput
    dpaf?: DPAFUncheckedCreateNestedOneWithoutUserInput
    structure?: StructureUncheckedCreateNestedOneWithoutUserInput
    messagesSent?: MessageUncheckedCreateNestedManyWithoutExpediteurInput
    messagesReceived?: MessageUncheckedCreateNestedManyWithoutDestinataireInput
    journalActions?: JournalActionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutProfileInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
  }

  export type UserUpsertWithoutProfileInput = {
    update: XOR<UserUpdateWithoutProfileInput, UserUncheckedUpdateWithoutProfileInput>
    create: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutProfileInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutProfileInput, UserUncheckedUpdateWithoutProfileInput>
  }

  export type UserUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tuteur?: TuteurUpdateOneWithoutUserNestedInput
    stagiaire?: StagiaireUpdateOneWithoutUserNestedInput
    dpaf?: DPAFUpdateOneWithoutUserNestedInput
    structure?: StructureUpdateOneWithoutUserNestedInput
    messagesSent?: MessageUpdateManyWithoutExpediteurNestedInput
    messagesReceived?: MessageUpdateManyWithoutDestinataireNestedInput
    journalActions?: JournalActionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tuteur?: TuteurUncheckedUpdateOneWithoutUserNestedInput
    stagiaire?: StagiaireUncheckedUpdateOneWithoutUserNestedInput
    dpaf?: DPAFUncheckedUpdateOneWithoutUserNestedInput
    structure?: StructureUncheckedUpdateOneWithoutUserNestedInput
    messagesSent?: MessageUncheckedUpdateManyWithoutExpediteurNestedInput
    messagesReceived?: MessageUncheckedUpdateManyWithoutDestinataireNestedInput
    journalActions?: JournalActionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutStructureInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    profile?: UserProfileCreateNestedOneWithoutUserInput
    tuteur?: TuteurCreateNestedOneWithoutUserInput
    stagiaire?: StagiaireCreateNestedOneWithoutUserInput
    dpaf?: DPAFCreateNestedOneWithoutUserInput
    messagesSent?: MessageCreateNestedManyWithoutExpediteurInput
    messagesReceived?: MessageCreateNestedManyWithoutDestinataireInput
    journalActions?: JournalActionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutStructureInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    tuteur?: TuteurUncheckedCreateNestedOneWithoutUserInput
    stagiaire?: StagiaireUncheckedCreateNestedOneWithoutUserInput
    dpaf?: DPAFUncheckedCreateNestedOneWithoutUserInput
    messagesSent?: MessageUncheckedCreateNestedManyWithoutExpediteurInput
    messagesReceived?: MessageUncheckedCreateNestedManyWithoutDestinataireInput
    journalActions?: JournalActionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutStructureInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutStructureInput, UserUncheckedCreateWithoutStructureInput>
  }

  export type TuteurCreateWithoutStructureInput = {
    fonction?: string | null
    disponibilite?: boolean
    competences?: TuteurCreatecompetencesInput | string[]
    user: UserCreateNestedOneWithoutTuteurInput
    stagiaires?: StagiaireCreateNestedManyWithoutTuteurInput
    stages?: StageCreateNestedManyWithoutTuteurInput
    themes?: ThemeTuteurCreateNestedManyWithoutTuteurInput
    suggestions?: SuggestionAffectationCreateNestedManyWithoutTuteurInput
  }

  export type TuteurUncheckedCreateWithoutStructureInput = {
    userId: string
    fonction?: string | null
    disponibilite?: boolean
    competences?: TuteurCreatecompetencesInput | string[]
    stagiaires?: StagiaireUncheckedCreateNestedManyWithoutTuteurInput
    stages?: StageUncheckedCreateNestedManyWithoutTuteurInput
    themes?: ThemeTuteurUncheckedCreateNestedManyWithoutTuteurInput
    suggestions?: SuggestionAffectationUncheckedCreateNestedManyWithoutTuteurInput
  }

  export type TuteurCreateOrConnectWithoutStructureInput = {
    where: TuteurWhereUniqueInput
    create: XOR<TuteurCreateWithoutStructureInput, TuteurUncheckedCreateWithoutStructureInput>
  }

  export type TuteurCreateManyStructureInputEnvelope = {
    data: TuteurCreateManyStructureInput | TuteurCreateManyStructureInput[]
    skipDuplicates?: boolean
  }

  export type StagiaireCreateWithoutStructureInput = {
    codeDemande?: string | null
    statutDemande?: $Enums.StatutDemande | null
    dateDebut?: Date | string | null
    dateFin?: Date | string | null
    user: UserCreateNestedOneWithoutStagiaireInput
    tuteur?: TuteurCreateNestedOneWithoutStagiairesInput
    demandesStages?: DemandeStageCreateNestedManyWithoutStagiaireInput
    stages?: StageCreateNestedManyWithoutStagiaireInput
    candidatureScores?: CandidatureScoreCreateNestedManyWithoutStagiaireInput
    suggestions?: SuggestionAffectationCreateNestedManyWithoutStagiaireInput
  }

  export type StagiaireUncheckedCreateWithoutStructureInput = {
    userId: string
    codeDemande?: string | null
    statutDemande?: $Enums.StatutDemande | null
    tuteurId?: string | null
    dateDebut?: Date | string | null
    dateFin?: Date | string | null
    demandesStages?: DemandeStageUncheckedCreateNestedManyWithoutStagiaireInput
    stages?: StageUncheckedCreateNestedManyWithoutStagiaireInput
    candidatureScores?: CandidatureScoreUncheckedCreateNestedManyWithoutStagiaireInput
    suggestions?: SuggestionAffectationUncheckedCreateNestedManyWithoutStagiaireInput
  }

  export type StagiaireCreateOrConnectWithoutStructureInput = {
    where: StagiaireWhereUniqueInput
    create: XOR<StagiaireCreateWithoutStructureInput, StagiaireUncheckedCreateWithoutStructureInput>
  }

  export type StagiaireCreateManyStructureInputEnvelope = {
    data: StagiaireCreateManyStructureInput | StagiaireCreateManyStructureInput[]
    skipDuplicates?: boolean
  }

  export type DemandeStageCreateWithoutStructureCibleInput = {
    id?: string
    dateDemande?: Date | string
    etat?: $Enums.EtatDemande
    motifRefus?: string | null
    dateTraitement?: Date | string | null
    stagiaire: StagiaireCreateNestedOneWithoutDemandesStagesInput
  }

  export type DemandeStageUncheckedCreateWithoutStructureCibleInput = {
    id?: string
    stagiaireId: string
    dateDemande?: Date | string
    etat?: $Enums.EtatDemande
    motifRefus?: string | null
    dateTraitement?: Date | string | null
  }

  export type DemandeStageCreateOrConnectWithoutStructureCibleInput = {
    where: DemandeStageWhereUniqueInput
    create: XOR<DemandeStageCreateWithoutStructureCibleInput, DemandeStageUncheckedCreateWithoutStructureCibleInput>
  }

  export type DemandeStageCreateManyStructureCibleInputEnvelope = {
    data: DemandeStageCreateManyStructureCibleInput | DemandeStageCreateManyStructureCibleInput[]
    skipDuplicates?: boolean
  }

  export type StageCreateWithoutStructureInput = {
    id?: string
    theme?: string | null
    etat?: $Enums.EtatStage
    dateDebut: Date | string
    dateFin: Date | string
    noteFinale?: string | null
    stagiaire: StagiaireCreateNestedOneWithoutStagesInput
    tuteur: TuteurCreateNestedOneWithoutStagesInput
  }

  export type StageUncheckedCreateWithoutStructureInput = {
    id?: string
    stagiaireId: string
    tuteurId: string
    theme?: string | null
    etat?: $Enums.EtatStage
    dateDebut: Date | string
    dateFin: Date | string
    noteFinale?: string | null
  }

  export type StageCreateOrConnectWithoutStructureInput = {
    where: StageWhereUniqueInput
    create: XOR<StageCreateWithoutStructureInput, StageUncheckedCreateWithoutStructureInput>
  }

  export type StageCreateManyStructureInputEnvelope = {
    data: StageCreateManyStructureInput | StageCreateManyStructureInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutStructureInput = {
    update: XOR<UserUpdateWithoutStructureInput, UserUncheckedUpdateWithoutStructureInput>
    create: XOR<UserCreateWithoutStructureInput, UserUncheckedCreateWithoutStructureInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutStructureInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutStructureInput, UserUncheckedUpdateWithoutStructureInput>
  }

  export type UserUpdateWithoutStructureInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    tuteur?: TuteurUpdateOneWithoutUserNestedInput
    stagiaire?: StagiaireUpdateOneWithoutUserNestedInput
    dpaf?: DPAFUpdateOneWithoutUserNestedInput
    messagesSent?: MessageUpdateManyWithoutExpediteurNestedInput
    messagesReceived?: MessageUpdateManyWithoutDestinataireNestedInput
    journalActions?: JournalActionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutStructureInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    tuteur?: TuteurUncheckedUpdateOneWithoutUserNestedInput
    stagiaire?: StagiaireUncheckedUpdateOneWithoutUserNestedInput
    dpaf?: DPAFUncheckedUpdateOneWithoutUserNestedInput
    messagesSent?: MessageUncheckedUpdateManyWithoutExpediteurNestedInput
    messagesReceived?: MessageUncheckedUpdateManyWithoutDestinataireNestedInput
    journalActions?: JournalActionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type TuteurUpsertWithWhereUniqueWithoutStructureInput = {
    where: TuteurWhereUniqueInput
    update: XOR<TuteurUpdateWithoutStructureInput, TuteurUncheckedUpdateWithoutStructureInput>
    create: XOR<TuteurCreateWithoutStructureInput, TuteurUncheckedCreateWithoutStructureInput>
  }

  export type TuteurUpdateWithWhereUniqueWithoutStructureInput = {
    where: TuteurWhereUniqueInput
    data: XOR<TuteurUpdateWithoutStructureInput, TuteurUncheckedUpdateWithoutStructureInput>
  }

  export type TuteurUpdateManyWithWhereWithoutStructureInput = {
    where: TuteurScalarWhereInput
    data: XOR<TuteurUpdateManyMutationInput, TuteurUncheckedUpdateManyWithoutStructureInput>
  }

  export type TuteurScalarWhereInput = {
    AND?: TuteurScalarWhereInput | TuteurScalarWhereInput[]
    OR?: TuteurScalarWhereInput[]
    NOT?: TuteurScalarWhereInput | TuteurScalarWhereInput[]
    userId?: UuidFilter<"Tuteur"> | string
    structureId?: UuidNullableFilter<"Tuteur"> | string | null
    fonction?: StringNullableFilter<"Tuteur"> | string | null
    disponibilite?: BoolFilter<"Tuteur"> | boolean
    competences?: StringNullableListFilter<"Tuteur">
  }

  export type StagiaireUpsertWithWhereUniqueWithoutStructureInput = {
    where: StagiaireWhereUniqueInput
    update: XOR<StagiaireUpdateWithoutStructureInput, StagiaireUncheckedUpdateWithoutStructureInput>
    create: XOR<StagiaireCreateWithoutStructureInput, StagiaireUncheckedCreateWithoutStructureInput>
  }

  export type StagiaireUpdateWithWhereUniqueWithoutStructureInput = {
    where: StagiaireWhereUniqueInput
    data: XOR<StagiaireUpdateWithoutStructureInput, StagiaireUncheckedUpdateWithoutStructureInput>
  }

  export type StagiaireUpdateManyWithWhereWithoutStructureInput = {
    where: StagiaireScalarWhereInput
    data: XOR<StagiaireUpdateManyMutationInput, StagiaireUncheckedUpdateManyWithoutStructureInput>
  }

  export type StagiaireScalarWhereInput = {
    AND?: StagiaireScalarWhereInput | StagiaireScalarWhereInput[]
    OR?: StagiaireScalarWhereInput[]
    NOT?: StagiaireScalarWhereInput | StagiaireScalarWhereInput[]
    userId?: UuidFilter<"Stagiaire"> | string
    codeDemande?: StringNullableFilter<"Stagiaire"> | string | null
    statutDemande?: EnumStatutDemandeNullableFilter<"Stagiaire"> | $Enums.StatutDemande | null
    structureAffecteeId?: UuidNullableFilter<"Stagiaire"> | string | null
    tuteurId?: UuidNullableFilter<"Stagiaire"> | string | null
    dateDebut?: DateTimeNullableFilter<"Stagiaire"> | Date | string | null
    dateFin?: DateTimeNullableFilter<"Stagiaire"> | Date | string | null
  }

  export type DemandeStageUpsertWithWhereUniqueWithoutStructureCibleInput = {
    where: DemandeStageWhereUniqueInput
    update: XOR<DemandeStageUpdateWithoutStructureCibleInput, DemandeStageUncheckedUpdateWithoutStructureCibleInput>
    create: XOR<DemandeStageCreateWithoutStructureCibleInput, DemandeStageUncheckedCreateWithoutStructureCibleInput>
  }

  export type DemandeStageUpdateWithWhereUniqueWithoutStructureCibleInput = {
    where: DemandeStageWhereUniqueInput
    data: XOR<DemandeStageUpdateWithoutStructureCibleInput, DemandeStageUncheckedUpdateWithoutStructureCibleInput>
  }

  export type DemandeStageUpdateManyWithWhereWithoutStructureCibleInput = {
    where: DemandeStageScalarWhereInput
    data: XOR<DemandeStageUpdateManyMutationInput, DemandeStageUncheckedUpdateManyWithoutStructureCibleInput>
  }

  export type DemandeStageScalarWhereInput = {
    AND?: DemandeStageScalarWhereInput | DemandeStageScalarWhereInput[]
    OR?: DemandeStageScalarWhereInput[]
    NOT?: DemandeStageScalarWhereInput | DemandeStageScalarWhereInput[]
    id?: UuidFilter<"DemandeStage"> | string
    stagiaireId?: UuidFilter<"DemandeStage"> | string
    dateDemande?: DateTimeFilter<"DemandeStage"> | Date | string
    etat?: EnumEtatDemandeFilter<"DemandeStage"> | $Enums.EtatDemande
    motifRefus?: StringNullableFilter<"DemandeStage"> | string | null
    dateTraitement?: DateTimeNullableFilter<"DemandeStage"> | Date | string | null
    structureCibleId?: UuidNullableFilter<"DemandeStage"> | string | null
  }

  export type StageUpsertWithWhereUniqueWithoutStructureInput = {
    where: StageWhereUniqueInput
    update: XOR<StageUpdateWithoutStructureInput, StageUncheckedUpdateWithoutStructureInput>
    create: XOR<StageCreateWithoutStructureInput, StageUncheckedCreateWithoutStructureInput>
  }

  export type StageUpdateWithWhereUniqueWithoutStructureInput = {
    where: StageWhereUniqueInput
    data: XOR<StageUpdateWithoutStructureInput, StageUncheckedUpdateWithoutStructureInput>
  }

  export type StageUpdateManyWithWhereWithoutStructureInput = {
    where: StageScalarWhereInput
    data: XOR<StageUpdateManyMutationInput, StageUncheckedUpdateManyWithoutStructureInput>
  }

  export type StageScalarWhereInput = {
    AND?: StageScalarWhereInput | StageScalarWhereInput[]
    OR?: StageScalarWhereInput[]
    NOT?: StageScalarWhereInput | StageScalarWhereInput[]
    id?: UuidFilter<"Stage"> | string
    stagiaireId?: UuidFilter<"Stage"> | string
    tuteurId?: UuidFilter<"Stage"> | string
    structureId?: UuidFilter<"Stage"> | string
    theme?: StringNullableFilter<"Stage"> | string | null
    etat?: EnumEtatStageFilter<"Stage"> | $Enums.EtatStage
    dateDebut?: DateTimeFilter<"Stage"> | Date | string
    dateFin?: DateTimeFilter<"Stage"> | Date | string
    noteFinale?: StringNullableFilter<"Stage"> | string | null
  }

  export type UserCreateWithoutTuteurInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    profile?: UserProfileCreateNestedOneWithoutUserInput
    stagiaire?: StagiaireCreateNestedOneWithoutUserInput
    dpaf?: DPAFCreateNestedOneWithoutUserInput
    structure?: StructureCreateNestedOneWithoutUserInput
    messagesSent?: MessageCreateNestedManyWithoutExpediteurInput
    messagesReceived?: MessageCreateNestedManyWithoutDestinataireInput
    journalActions?: JournalActionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTuteurInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    stagiaire?: StagiaireUncheckedCreateNestedOneWithoutUserInput
    dpaf?: DPAFUncheckedCreateNestedOneWithoutUserInput
    structure?: StructureUncheckedCreateNestedOneWithoutUserInput
    messagesSent?: MessageUncheckedCreateNestedManyWithoutExpediteurInput
    messagesReceived?: MessageUncheckedCreateNestedManyWithoutDestinataireInput
    journalActions?: JournalActionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTuteurInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTuteurInput, UserUncheckedCreateWithoutTuteurInput>
  }

  export type StructureCreateWithoutTuteursInput = {
    id?: string
    nomStructure: string
    type?: string | null
    adresse?: string | null
    emailContact?: string | null
    telephoneContact?: string | null
    user: UserCreateNestedOneWithoutStructureInput
    stagiaires?: StagiaireCreateNestedManyWithoutStructureInput
    demandesStages?: DemandeStageCreateNestedManyWithoutStructureCibleInput
    stages?: StageCreateNestedManyWithoutStructureInput
  }

  export type StructureUncheckedCreateWithoutTuteursInput = {
    id?: string
    userId: string
    nomStructure: string
    type?: string | null
    adresse?: string | null
    emailContact?: string | null
    telephoneContact?: string | null
    stagiaires?: StagiaireUncheckedCreateNestedManyWithoutStructureInput
    demandesStages?: DemandeStageUncheckedCreateNestedManyWithoutStructureCibleInput
    stages?: StageUncheckedCreateNestedManyWithoutStructureInput
  }

  export type StructureCreateOrConnectWithoutTuteursInput = {
    where: StructureWhereUniqueInput
    create: XOR<StructureCreateWithoutTuteursInput, StructureUncheckedCreateWithoutTuteursInput>
  }

  export type StagiaireCreateWithoutTuteurInput = {
    codeDemande?: string | null
    statutDemande?: $Enums.StatutDemande | null
    dateDebut?: Date | string | null
    dateFin?: Date | string | null
    user: UserCreateNestedOneWithoutStagiaireInput
    structure?: StructureCreateNestedOneWithoutStagiairesInput
    demandesStages?: DemandeStageCreateNestedManyWithoutStagiaireInput
    stages?: StageCreateNestedManyWithoutStagiaireInput
    candidatureScores?: CandidatureScoreCreateNestedManyWithoutStagiaireInput
    suggestions?: SuggestionAffectationCreateNestedManyWithoutStagiaireInput
  }

  export type StagiaireUncheckedCreateWithoutTuteurInput = {
    userId: string
    codeDemande?: string | null
    statutDemande?: $Enums.StatutDemande | null
    structureAffecteeId?: string | null
    dateDebut?: Date | string | null
    dateFin?: Date | string | null
    demandesStages?: DemandeStageUncheckedCreateNestedManyWithoutStagiaireInput
    stages?: StageUncheckedCreateNestedManyWithoutStagiaireInput
    candidatureScores?: CandidatureScoreUncheckedCreateNestedManyWithoutStagiaireInput
    suggestions?: SuggestionAffectationUncheckedCreateNestedManyWithoutStagiaireInput
  }

  export type StagiaireCreateOrConnectWithoutTuteurInput = {
    where: StagiaireWhereUniqueInput
    create: XOR<StagiaireCreateWithoutTuteurInput, StagiaireUncheckedCreateWithoutTuteurInput>
  }

  export type StagiaireCreateManyTuteurInputEnvelope = {
    data: StagiaireCreateManyTuteurInput | StagiaireCreateManyTuteurInput[]
    skipDuplicates?: boolean
  }

  export type StageCreateWithoutTuteurInput = {
    id?: string
    theme?: string | null
    etat?: $Enums.EtatStage
    dateDebut: Date | string
    dateFin: Date | string
    noteFinale?: string | null
    stagiaire: StagiaireCreateNestedOneWithoutStagesInput
    structure: StructureCreateNestedOneWithoutStagesInput
  }

  export type StageUncheckedCreateWithoutTuteurInput = {
    id?: string
    stagiaireId: string
    structureId: string
    theme?: string | null
    etat?: $Enums.EtatStage
    dateDebut: Date | string
    dateFin: Date | string
    noteFinale?: string | null
  }

  export type StageCreateOrConnectWithoutTuteurInput = {
    where: StageWhereUniqueInput
    create: XOR<StageCreateWithoutTuteurInput, StageUncheckedCreateWithoutTuteurInput>
  }

  export type StageCreateManyTuteurInputEnvelope = {
    data: StageCreateManyTuteurInput | StageCreateManyTuteurInput[]
    skipDuplicates?: boolean
  }

  export type ThemeTuteurCreateWithoutTuteurInput = {
    id?: string
    titre: string
    description?: string | null
    disponible?: boolean
  }

  export type ThemeTuteurUncheckedCreateWithoutTuteurInput = {
    id?: string
    titre: string
    description?: string | null
    disponible?: boolean
  }

  export type ThemeTuteurCreateOrConnectWithoutTuteurInput = {
    where: ThemeTuteurWhereUniqueInput
    create: XOR<ThemeTuteurCreateWithoutTuteurInput, ThemeTuteurUncheckedCreateWithoutTuteurInput>
  }

  export type ThemeTuteurCreateManyTuteurInputEnvelope = {
    data: ThemeTuteurCreateManyTuteurInput | ThemeTuteurCreateManyTuteurInput[]
    skipDuplicates?: boolean
  }

  export type SuggestionAffectationCreateWithoutTuteurInput = {
    id?: string
    scoreMatch: number
    createdAt?: Date | string
    stagiaire: StagiaireCreateNestedOneWithoutSuggestionsInput
  }

  export type SuggestionAffectationUncheckedCreateWithoutTuteurInput = {
    id?: string
    stagiaireId: string
    scoreMatch: number
    createdAt?: Date | string
  }

  export type SuggestionAffectationCreateOrConnectWithoutTuteurInput = {
    where: SuggestionAffectationWhereUniqueInput
    create: XOR<SuggestionAffectationCreateWithoutTuteurInput, SuggestionAffectationUncheckedCreateWithoutTuteurInput>
  }

  export type SuggestionAffectationCreateManyTuteurInputEnvelope = {
    data: SuggestionAffectationCreateManyTuteurInput | SuggestionAffectationCreateManyTuteurInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutTuteurInput = {
    update: XOR<UserUpdateWithoutTuteurInput, UserUncheckedUpdateWithoutTuteurInput>
    create: XOR<UserCreateWithoutTuteurInput, UserUncheckedCreateWithoutTuteurInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTuteurInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTuteurInput, UserUncheckedUpdateWithoutTuteurInput>
  }

  export type UserUpdateWithoutTuteurInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    stagiaire?: StagiaireUpdateOneWithoutUserNestedInput
    dpaf?: DPAFUpdateOneWithoutUserNestedInput
    structure?: StructureUpdateOneWithoutUserNestedInput
    messagesSent?: MessageUpdateManyWithoutExpediteurNestedInput
    messagesReceived?: MessageUpdateManyWithoutDestinataireNestedInput
    journalActions?: JournalActionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTuteurInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    stagiaire?: StagiaireUncheckedUpdateOneWithoutUserNestedInput
    dpaf?: DPAFUncheckedUpdateOneWithoutUserNestedInput
    structure?: StructureUncheckedUpdateOneWithoutUserNestedInput
    messagesSent?: MessageUncheckedUpdateManyWithoutExpediteurNestedInput
    messagesReceived?: MessageUncheckedUpdateManyWithoutDestinataireNestedInput
    journalActions?: JournalActionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type StructureUpsertWithoutTuteursInput = {
    update: XOR<StructureUpdateWithoutTuteursInput, StructureUncheckedUpdateWithoutTuteursInput>
    create: XOR<StructureCreateWithoutTuteursInput, StructureUncheckedCreateWithoutTuteursInput>
    where?: StructureWhereInput
  }

  export type StructureUpdateToOneWithWhereWithoutTuteursInput = {
    where?: StructureWhereInput
    data: XOR<StructureUpdateWithoutTuteursInput, StructureUncheckedUpdateWithoutTuteursInput>
  }

  export type StructureUpdateWithoutTuteursInput = {
    id?: StringFieldUpdateOperationsInput | string
    nomStructure?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    adresse?: NullableStringFieldUpdateOperationsInput | string | null
    emailContact?: NullableStringFieldUpdateOperationsInput | string | null
    telephoneContact?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutStructureNestedInput
    stagiaires?: StagiaireUpdateManyWithoutStructureNestedInput
    demandesStages?: DemandeStageUpdateManyWithoutStructureCibleNestedInput
    stages?: StageUpdateManyWithoutStructureNestedInput
  }

  export type StructureUncheckedUpdateWithoutTuteursInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    nomStructure?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    adresse?: NullableStringFieldUpdateOperationsInput | string | null
    emailContact?: NullableStringFieldUpdateOperationsInput | string | null
    telephoneContact?: NullableStringFieldUpdateOperationsInput | string | null
    stagiaires?: StagiaireUncheckedUpdateManyWithoutStructureNestedInput
    demandesStages?: DemandeStageUncheckedUpdateManyWithoutStructureCibleNestedInput
    stages?: StageUncheckedUpdateManyWithoutStructureNestedInput
  }

  export type StagiaireUpsertWithWhereUniqueWithoutTuteurInput = {
    where: StagiaireWhereUniqueInput
    update: XOR<StagiaireUpdateWithoutTuteurInput, StagiaireUncheckedUpdateWithoutTuteurInput>
    create: XOR<StagiaireCreateWithoutTuteurInput, StagiaireUncheckedCreateWithoutTuteurInput>
  }

  export type StagiaireUpdateWithWhereUniqueWithoutTuteurInput = {
    where: StagiaireWhereUniqueInput
    data: XOR<StagiaireUpdateWithoutTuteurInput, StagiaireUncheckedUpdateWithoutTuteurInput>
  }

  export type StagiaireUpdateManyWithWhereWithoutTuteurInput = {
    where: StagiaireScalarWhereInput
    data: XOR<StagiaireUpdateManyMutationInput, StagiaireUncheckedUpdateManyWithoutTuteurInput>
  }

  export type StageUpsertWithWhereUniqueWithoutTuteurInput = {
    where: StageWhereUniqueInput
    update: XOR<StageUpdateWithoutTuteurInput, StageUncheckedUpdateWithoutTuteurInput>
    create: XOR<StageCreateWithoutTuteurInput, StageUncheckedCreateWithoutTuteurInput>
  }

  export type StageUpdateWithWhereUniqueWithoutTuteurInput = {
    where: StageWhereUniqueInput
    data: XOR<StageUpdateWithoutTuteurInput, StageUncheckedUpdateWithoutTuteurInput>
  }

  export type StageUpdateManyWithWhereWithoutTuteurInput = {
    where: StageScalarWhereInput
    data: XOR<StageUpdateManyMutationInput, StageUncheckedUpdateManyWithoutTuteurInput>
  }

  export type ThemeTuteurUpsertWithWhereUniqueWithoutTuteurInput = {
    where: ThemeTuteurWhereUniqueInput
    update: XOR<ThemeTuteurUpdateWithoutTuteurInput, ThemeTuteurUncheckedUpdateWithoutTuteurInput>
    create: XOR<ThemeTuteurCreateWithoutTuteurInput, ThemeTuteurUncheckedCreateWithoutTuteurInput>
  }

  export type ThemeTuteurUpdateWithWhereUniqueWithoutTuteurInput = {
    where: ThemeTuteurWhereUniqueInput
    data: XOR<ThemeTuteurUpdateWithoutTuteurInput, ThemeTuteurUncheckedUpdateWithoutTuteurInput>
  }

  export type ThemeTuteurUpdateManyWithWhereWithoutTuteurInput = {
    where: ThemeTuteurScalarWhereInput
    data: XOR<ThemeTuteurUpdateManyMutationInput, ThemeTuteurUncheckedUpdateManyWithoutTuteurInput>
  }

  export type ThemeTuteurScalarWhereInput = {
    AND?: ThemeTuteurScalarWhereInput | ThemeTuteurScalarWhereInput[]
    OR?: ThemeTuteurScalarWhereInput[]
    NOT?: ThemeTuteurScalarWhereInput | ThemeTuteurScalarWhereInput[]
    id?: UuidFilter<"ThemeTuteur"> | string
    tuteurId?: UuidFilter<"ThemeTuteur"> | string
    titre?: StringFilter<"ThemeTuteur"> | string
    description?: StringNullableFilter<"ThemeTuteur"> | string | null
    disponible?: BoolFilter<"ThemeTuteur"> | boolean
  }

  export type SuggestionAffectationUpsertWithWhereUniqueWithoutTuteurInput = {
    where: SuggestionAffectationWhereUniqueInput
    update: XOR<SuggestionAffectationUpdateWithoutTuteurInput, SuggestionAffectationUncheckedUpdateWithoutTuteurInput>
    create: XOR<SuggestionAffectationCreateWithoutTuteurInput, SuggestionAffectationUncheckedCreateWithoutTuteurInput>
  }

  export type SuggestionAffectationUpdateWithWhereUniqueWithoutTuteurInput = {
    where: SuggestionAffectationWhereUniqueInput
    data: XOR<SuggestionAffectationUpdateWithoutTuteurInput, SuggestionAffectationUncheckedUpdateWithoutTuteurInput>
  }

  export type SuggestionAffectationUpdateManyWithWhereWithoutTuteurInput = {
    where: SuggestionAffectationScalarWhereInput
    data: XOR<SuggestionAffectationUpdateManyMutationInput, SuggestionAffectationUncheckedUpdateManyWithoutTuteurInput>
  }

  export type SuggestionAffectationScalarWhereInput = {
    AND?: SuggestionAffectationScalarWhereInput | SuggestionAffectationScalarWhereInput[]
    OR?: SuggestionAffectationScalarWhereInput[]
    NOT?: SuggestionAffectationScalarWhereInput | SuggestionAffectationScalarWhereInput[]
    id?: UuidFilter<"SuggestionAffectation"> | string
    stagiaireId?: UuidFilter<"SuggestionAffectation"> | string
    tuteurId?: UuidFilter<"SuggestionAffectation"> | string
    scoreMatch?: FloatFilter<"SuggestionAffectation"> | number
    createdAt?: DateTimeFilter<"SuggestionAffectation"> | Date | string
  }

  export type UserCreateWithoutStagiaireInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    profile?: UserProfileCreateNestedOneWithoutUserInput
    tuteur?: TuteurCreateNestedOneWithoutUserInput
    dpaf?: DPAFCreateNestedOneWithoutUserInput
    structure?: StructureCreateNestedOneWithoutUserInput
    messagesSent?: MessageCreateNestedManyWithoutExpediteurInput
    messagesReceived?: MessageCreateNestedManyWithoutDestinataireInput
    journalActions?: JournalActionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutStagiaireInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    tuteur?: TuteurUncheckedCreateNestedOneWithoutUserInput
    dpaf?: DPAFUncheckedCreateNestedOneWithoutUserInput
    structure?: StructureUncheckedCreateNestedOneWithoutUserInput
    messagesSent?: MessageUncheckedCreateNestedManyWithoutExpediteurInput
    messagesReceived?: MessageUncheckedCreateNestedManyWithoutDestinataireInput
    journalActions?: JournalActionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutStagiaireInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutStagiaireInput, UserUncheckedCreateWithoutStagiaireInput>
  }

  export type StructureCreateWithoutStagiairesInput = {
    id?: string
    nomStructure: string
    type?: string | null
    adresse?: string | null
    emailContact?: string | null
    telephoneContact?: string | null
    user: UserCreateNestedOneWithoutStructureInput
    tuteurs?: TuteurCreateNestedManyWithoutStructureInput
    demandesStages?: DemandeStageCreateNestedManyWithoutStructureCibleInput
    stages?: StageCreateNestedManyWithoutStructureInput
  }

  export type StructureUncheckedCreateWithoutStagiairesInput = {
    id?: string
    userId: string
    nomStructure: string
    type?: string | null
    adresse?: string | null
    emailContact?: string | null
    telephoneContact?: string | null
    tuteurs?: TuteurUncheckedCreateNestedManyWithoutStructureInput
    demandesStages?: DemandeStageUncheckedCreateNestedManyWithoutStructureCibleInput
    stages?: StageUncheckedCreateNestedManyWithoutStructureInput
  }

  export type StructureCreateOrConnectWithoutStagiairesInput = {
    where: StructureWhereUniqueInput
    create: XOR<StructureCreateWithoutStagiairesInput, StructureUncheckedCreateWithoutStagiairesInput>
  }

  export type TuteurCreateWithoutStagiairesInput = {
    fonction?: string | null
    disponibilite?: boolean
    competences?: TuteurCreatecompetencesInput | string[]
    user: UserCreateNestedOneWithoutTuteurInput
    structure?: StructureCreateNestedOneWithoutTuteursInput
    stages?: StageCreateNestedManyWithoutTuteurInput
    themes?: ThemeTuteurCreateNestedManyWithoutTuteurInput
    suggestions?: SuggestionAffectationCreateNestedManyWithoutTuteurInput
  }

  export type TuteurUncheckedCreateWithoutStagiairesInput = {
    userId: string
    structureId?: string | null
    fonction?: string | null
    disponibilite?: boolean
    competences?: TuteurCreatecompetencesInput | string[]
    stages?: StageUncheckedCreateNestedManyWithoutTuteurInput
    themes?: ThemeTuteurUncheckedCreateNestedManyWithoutTuteurInput
    suggestions?: SuggestionAffectationUncheckedCreateNestedManyWithoutTuteurInput
  }

  export type TuteurCreateOrConnectWithoutStagiairesInput = {
    where: TuteurWhereUniqueInput
    create: XOR<TuteurCreateWithoutStagiairesInput, TuteurUncheckedCreateWithoutStagiairesInput>
  }

  export type DemandeStageCreateWithoutStagiaireInput = {
    id?: string
    dateDemande?: Date | string
    etat?: $Enums.EtatDemande
    motifRefus?: string | null
    dateTraitement?: Date | string | null
    structureCible?: StructureCreateNestedOneWithoutDemandesStagesInput
  }

  export type DemandeStageUncheckedCreateWithoutStagiaireInput = {
    id?: string
    dateDemande?: Date | string
    etat?: $Enums.EtatDemande
    motifRefus?: string | null
    dateTraitement?: Date | string | null
    structureCibleId?: string | null
  }

  export type DemandeStageCreateOrConnectWithoutStagiaireInput = {
    where: DemandeStageWhereUniqueInput
    create: XOR<DemandeStageCreateWithoutStagiaireInput, DemandeStageUncheckedCreateWithoutStagiaireInput>
  }

  export type DemandeStageCreateManyStagiaireInputEnvelope = {
    data: DemandeStageCreateManyStagiaireInput | DemandeStageCreateManyStagiaireInput[]
    skipDuplicates?: boolean
  }

  export type StageCreateWithoutStagiaireInput = {
    id?: string
    theme?: string | null
    etat?: $Enums.EtatStage
    dateDebut: Date | string
    dateFin: Date | string
    noteFinale?: string | null
    tuteur: TuteurCreateNestedOneWithoutStagesInput
    structure: StructureCreateNestedOneWithoutStagesInput
  }

  export type StageUncheckedCreateWithoutStagiaireInput = {
    id?: string
    tuteurId: string
    structureId: string
    theme?: string | null
    etat?: $Enums.EtatStage
    dateDebut: Date | string
    dateFin: Date | string
    noteFinale?: string | null
  }

  export type StageCreateOrConnectWithoutStagiaireInput = {
    where: StageWhereUniqueInput
    create: XOR<StageCreateWithoutStagiaireInput, StageUncheckedCreateWithoutStagiaireInput>
  }

  export type StageCreateManyStagiaireInputEnvelope = {
    data: StageCreateManyStagiaireInput | StageCreateManyStagiaireInput[]
    skipDuplicates?: boolean
  }

  export type CandidatureScoreCreateWithoutStagiaireInput = {
    id?: string
    scorePertinence: number
    dateEvaluation?: Date | string
  }

  export type CandidatureScoreUncheckedCreateWithoutStagiaireInput = {
    id?: string
    scorePertinence: number
    dateEvaluation?: Date | string
  }

  export type CandidatureScoreCreateOrConnectWithoutStagiaireInput = {
    where: CandidatureScoreWhereUniqueInput
    create: XOR<CandidatureScoreCreateWithoutStagiaireInput, CandidatureScoreUncheckedCreateWithoutStagiaireInput>
  }

  export type CandidatureScoreCreateManyStagiaireInputEnvelope = {
    data: CandidatureScoreCreateManyStagiaireInput | CandidatureScoreCreateManyStagiaireInput[]
    skipDuplicates?: boolean
  }

  export type SuggestionAffectationCreateWithoutStagiaireInput = {
    id?: string
    scoreMatch: number
    createdAt?: Date | string
    tuteur: TuteurCreateNestedOneWithoutSuggestionsInput
  }

  export type SuggestionAffectationUncheckedCreateWithoutStagiaireInput = {
    id?: string
    tuteurId: string
    scoreMatch: number
    createdAt?: Date | string
  }

  export type SuggestionAffectationCreateOrConnectWithoutStagiaireInput = {
    where: SuggestionAffectationWhereUniqueInput
    create: XOR<SuggestionAffectationCreateWithoutStagiaireInput, SuggestionAffectationUncheckedCreateWithoutStagiaireInput>
  }

  export type SuggestionAffectationCreateManyStagiaireInputEnvelope = {
    data: SuggestionAffectationCreateManyStagiaireInput | SuggestionAffectationCreateManyStagiaireInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutStagiaireInput = {
    update: XOR<UserUpdateWithoutStagiaireInput, UserUncheckedUpdateWithoutStagiaireInput>
    create: XOR<UserCreateWithoutStagiaireInput, UserUncheckedCreateWithoutStagiaireInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutStagiaireInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutStagiaireInput, UserUncheckedUpdateWithoutStagiaireInput>
  }

  export type UserUpdateWithoutStagiaireInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    tuteur?: TuteurUpdateOneWithoutUserNestedInput
    dpaf?: DPAFUpdateOneWithoutUserNestedInput
    structure?: StructureUpdateOneWithoutUserNestedInput
    messagesSent?: MessageUpdateManyWithoutExpediteurNestedInput
    messagesReceived?: MessageUpdateManyWithoutDestinataireNestedInput
    journalActions?: JournalActionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutStagiaireInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    tuteur?: TuteurUncheckedUpdateOneWithoutUserNestedInput
    dpaf?: DPAFUncheckedUpdateOneWithoutUserNestedInput
    structure?: StructureUncheckedUpdateOneWithoutUserNestedInput
    messagesSent?: MessageUncheckedUpdateManyWithoutExpediteurNestedInput
    messagesReceived?: MessageUncheckedUpdateManyWithoutDestinataireNestedInput
    journalActions?: JournalActionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type StructureUpsertWithoutStagiairesInput = {
    update: XOR<StructureUpdateWithoutStagiairesInput, StructureUncheckedUpdateWithoutStagiairesInput>
    create: XOR<StructureCreateWithoutStagiairesInput, StructureUncheckedCreateWithoutStagiairesInput>
    where?: StructureWhereInput
  }

  export type StructureUpdateToOneWithWhereWithoutStagiairesInput = {
    where?: StructureWhereInput
    data: XOR<StructureUpdateWithoutStagiairesInput, StructureUncheckedUpdateWithoutStagiairesInput>
  }

  export type StructureUpdateWithoutStagiairesInput = {
    id?: StringFieldUpdateOperationsInput | string
    nomStructure?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    adresse?: NullableStringFieldUpdateOperationsInput | string | null
    emailContact?: NullableStringFieldUpdateOperationsInput | string | null
    telephoneContact?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutStructureNestedInput
    tuteurs?: TuteurUpdateManyWithoutStructureNestedInput
    demandesStages?: DemandeStageUpdateManyWithoutStructureCibleNestedInput
    stages?: StageUpdateManyWithoutStructureNestedInput
  }

  export type StructureUncheckedUpdateWithoutStagiairesInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    nomStructure?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    adresse?: NullableStringFieldUpdateOperationsInput | string | null
    emailContact?: NullableStringFieldUpdateOperationsInput | string | null
    telephoneContact?: NullableStringFieldUpdateOperationsInput | string | null
    tuteurs?: TuteurUncheckedUpdateManyWithoutStructureNestedInput
    demandesStages?: DemandeStageUncheckedUpdateManyWithoutStructureCibleNestedInput
    stages?: StageUncheckedUpdateManyWithoutStructureNestedInput
  }

  export type TuteurUpsertWithoutStagiairesInput = {
    update: XOR<TuteurUpdateWithoutStagiairesInput, TuteurUncheckedUpdateWithoutStagiairesInput>
    create: XOR<TuteurCreateWithoutStagiairesInput, TuteurUncheckedCreateWithoutStagiairesInput>
    where?: TuteurWhereInput
  }

  export type TuteurUpdateToOneWithWhereWithoutStagiairesInput = {
    where?: TuteurWhereInput
    data: XOR<TuteurUpdateWithoutStagiairesInput, TuteurUncheckedUpdateWithoutStagiairesInput>
  }

  export type TuteurUpdateWithoutStagiairesInput = {
    fonction?: NullableStringFieldUpdateOperationsInput | string | null
    disponibilite?: BoolFieldUpdateOperationsInput | boolean
    competences?: TuteurUpdatecompetencesInput | string[]
    user?: UserUpdateOneRequiredWithoutTuteurNestedInput
    structure?: StructureUpdateOneWithoutTuteursNestedInput
    stages?: StageUpdateManyWithoutTuteurNestedInput
    themes?: ThemeTuteurUpdateManyWithoutTuteurNestedInput
    suggestions?: SuggestionAffectationUpdateManyWithoutTuteurNestedInput
  }

  export type TuteurUncheckedUpdateWithoutStagiairesInput = {
    userId?: StringFieldUpdateOperationsInput | string
    structureId?: NullableStringFieldUpdateOperationsInput | string | null
    fonction?: NullableStringFieldUpdateOperationsInput | string | null
    disponibilite?: BoolFieldUpdateOperationsInput | boolean
    competences?: TuteurUpdatecompetencesInput | string[]
    stages?: StageUncheckedUpdateManyWithoutTuteurNestedInput
    themes?: ThemeTuteurUncheckedUpdateManyWithoutTuteurNestedInput
    suggestions?: SuggestionAffectationUncheckedUpdateManyWithoutTuteurNestedInput
  }

  export type DemandeStageUpsertWithWhereUniqueWithoutStagiaireInput = {
    where: DemandeStageWhereUniqueInput
    update: XOR<DemandeStageUpdateWithoutStagiaireInput, DemandeStageUncheckedUpdateWithoutStagiaireInput>
    create: XOR<DemandeStageCreateWithoutStagiaireInput, DemandeStageUncheckedCreateWithoutStagiaireInput>
  }

  export type DemandeStageUpdateWithWhereUniqueWithoutStagiaireInput = {
    where: DemandeStageWhereUniqueInput
    data: XOR<DemandeStageUpdateWithoutStagiaireInput, DemandeStageUncheckedUpdateWithoutStagiaireInput>
  }

  export type DemandeStageUpdateManyWithWhereWithoutStagiaireInput = {
    where: DemandeStageScalarWhereInput
    data: XOR<DemandeStageUpdateManyMutationInput, DemandeStageUncheckedUpdateManyWithoutStagiaireInput>
  }

  export type StageUpsertWithWhereUniqueWithoutStagiaireInput = {
    where: StageWhereUniqueInput
    update: XOR<StageUpdateWithoutStagiaireInput, StageUncheckedUpdateWithoutStagiaireInput>
    create: XOR<StageCreateWithoutStagiaireInput, StageUncheckedCreateWithoutStagiaireInput>
  }

  export type StageUpdateWithWhereUniqueWithoutStagiaireInput = {
    where: StageWhereUniqueInput
    data: XOR<StageUpdateWithoutStagiaireInput, StageUncheckedUpdateWithoutStagiaireInput>
  }

  export type StageUpdateManyWithWhereWithoutStagiaireInput = {
    where: StageScalarWhereInput
    data: XOR<StageUpdateManyMutationInput, StageUncheckedUpdateManyWithoutStagiaireInput>
  }

  export type CandidatureScoreUpsertWithWhereUniqueWithoutStagiaireInput = {
    where: CandidatureScoreWhereUniqueInput
    update: XOR<CandidatureScoreUpdateWithoutStagiaireInput, CandidatureScoreUncheckedUpdateWithoutStagiaireInput>
    create: XOR<CandidatureScoreCreateWithoutStagiaireInput, CandidatureScoreUncheckedCreateWithoutStagiaireInput>
  }

  export type CandidatureScoreUpdateWithWhereUniqueWithoutStagiaireInput = {
    where: CandidatureScoreWhereUniqueInput
    data: XOR<CandidatureScoreUpdateWithoutStagiaireInput, CandidatureScoreUncheckedUpdateWithoutStagiaireInput>
  }

  export type CandidatureScoreUpdateManyWithWhereWithoutStagiaireInput = {
    where: CandidatureScoreScalarWhereInput
    data: XOR<CandidatureScoreUpdateManyMutationInput, CandidatureScoreUncheckedUpdateManyWithoutStagiaireInput>
  }

  export type CandidatureScoreScalarWhereInput = {
    AND?: CandidatureScoreScalarWhereInput | CandidatureScoreScalarWhereInput[]
    OR?: CandidatureScoreScalarWhereInput[]
    NOT?: CandidatureScoreScalarWhereInput | CandidatureScoreScalarWhereInput[]
    id?: UuidFilter<"CandidatureScore"> | string
    stagiaireId?: UuidFilter<"CandidatureScore"> | string
    scorePertinence?: FloatFilter<"CandidatureScore"> | number
    dateEvaluation?: DateTimeFilter<"CandidatureScore"> | Date | string
  }

  export type SuggestionAffectationUpsertWithWhereUniqueWithoutStagiaireInput = {
    where: SuggestionAffectationWhereUniqueInput
    update: XOR<SuggestionAffectationUpdateWithoutStagiaireInput, SuggestionAffectationUncheckedUpdateWithoutStagiaireInput>
    create: XOR<SuggestionAffectationCreateWithoutStagiaireInput, SuggestionAffectationUncheckedCreateWithoutStagiaireInput>
  }

  export type SuggestionAffectationUpdateWithWhereUniqueWithoutStagiaireInput = {
    where: SuggestionAffectationWhereUniqueInput
    data: XOR<SuggestionAffectationUpdateWithoutStagiaireInput, SuggestionAffectationUncheckedUpdateWithoutStagiaireInput>
  }

  export type SuggestionAffectationUpdateManyWithWhereWithoutStagiaireInput = {
    where: SuggestionAffectationScalarWhereInput
    data: XOR<SuggestionAffectationUpdateManyMutationInput, SuggestionAffectationUncheckedUpdateManyWithoutStagiaireInput>
  }

  export type UserCreateWithoutDpafInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    profile?: UserProfileCreateNestedOneWithoutUserInput
    tuteur?: TuteurCreateNestedOneWithoutUserInput
    stagiaire?: StagiaireCreateNestedOneWithoutUserInput
    structure?: StructureCreateNestedOneWithoutUserInput
    messagesSent?: MessageCreateNestedManyWithoutExpediteurInput
    messagesReceived?: MessageCreateNestedManyWithoutDestinataireInput
    journalActions?: JournalActionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutDpafInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    tuteur?: TuteurUncheckedCreateNestedOneWithoutUserInput
    stagiaire?: StagiaireUncheckedCreateNestedOneWithoutUserInput
    structure?: StructureUncheckedCreateNestedOneWithoutUserInput
    messagesSent?: MessageUncheckedCreateNestedManyWithoutExpediteurInput
    messagesReceived?: MessageUncheckedCreateNestedManyWithoutDestinataireInput
    journalActions?: JournalActionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutDpafInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDpafInput, UserUncheckedCreateWithoutDpafInput>
  }

  export type UserUpsertWithoutDpafInput = {
    update: XOR<UserUpdateWithoutDpafInput, UserUncheckedUpdateWithoutDpafInput>
    create: XOR<UserCreateWithoutDpafInput, UserUncheckedCreateWithoutDpafInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutDpafInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutDpafInput, UserUncheckedUpdateWithoutDpafInput>
  }

  export type UserUpdateWithoutDpafInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    tuteur?: TuteurUpdateOneWithoutUserNestedInput
    stagiaire?: StagiaireUpdateOneWithoutUserNestedInput
    structure?: StructureUpdateOneWithoutUserNestedInput
    messagesSent?: MessageUpdateManyWithoutExpediteurNestedInput
    messagesReceived?: MessageUpdateManyWithoutDestinataireNestedInput
    journalActions?: JournalActionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutDpafInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    tuteur?: TuteurUncheckedUpdateOneWithoutUserNestedInput
    stagiaire?: StagiaireUncheckedUpdateOneWithoutUserNestedInput
    structure?: StructureUncheckedUpdateOneWithoutUserNestedInput
    messagesSent?: MessageUncheckedUpdateManyWithoutExpediteurNestedInput
    messagesReceived?: MessageUncheckedUpdateManyWithoutDestinataireNestedInput
    journalActions?: JournalActionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type StagiaireCreateWithoutDemandesStagesInput = {
    codeDemande?: string | null
    statutDemande?: $Enums.StatutDemande | null
    dateDebut?: Date | string | null
    dateFin?: Date | string | null
    user: UserCreateNestedOneWithoutStagiaireInput
    structure?: StructureCreateNestedOneWithoutStagiairesInput
    tuteur?: TuteurCreateNestedOneWithoutStagiairesInput
    stages?: StageCreateNestedManyWithoutStagiaireInput
    candidatureScores?: CandidatureScoreCreateNestedManyWithoutStagiaireInput
    suggestions?: SuggestionAffectationCreateNestedManyWithoutStagiaireInput
  }

  export type StagiaireUncheckedCreateWithoutDemandesStagesInput = {
    userId: string
    codeDemande?: string | null
    statutDemande?: $Enums.StatutDemande | null
    structureAffecteeId?: string | null
    tuteurId?: string | null
    dateDebut?: Date | string | null
    dateFin?: Date | string | null
    stages?: StageUncheckedCreateNestedManyWithoutStagiaireInput
    candidatureScores?: CandidatureScoreUncheckedCreateNestedManyWithoutStagiaireInput
    suggestions?: SuggestionAffectationUncheckedCreateNestedManyWithoutStagiaireInput
  }

  export type StagiaireCreateOrConnectWithoutDemandesStagesInput = {
    where: StagiaireWhereUniqueInput
    create: XOR<StagiaireCreateWithoutDemandesStagesInput, StagiaireUncheckedCreateWithoutDemandesStagesInput>
  }

  export type StructureCreateWithoutDemandesStagesInput = {
    id?: string
    nomStructure: string
    type?: string | null
    adresse?: string | null
    emailContact?: string | null
    telephoneContact?: string | null
    user: UserCreateNestedOneWithoutStructureInput
    tuteurs?: TuteurCreateNestedManyWithoutStructureInput
    stagiaires?: StagiaireCreateNestedManyWithoutStructureInput
    stages?: StageCreateNestedManyWithoutStructureInput
  }

  export type StructureUncheckedCreateWithoutDemandesStagesInput = {
    id?: string
    userId: string
    nomStructure: string
    type?: string | null
    adresse?: string | null
    emailContact?: string | null
    telephoneContact?: string | null
    tuteurs?: TuteurUncheckedCreateNestedManyWithoutStructureInput
    stagiaires?: StagiaireUncheckedCreateNestedManyWithoutStructureInput
    stages?: StageUncheckedCreateNestedManyWithoutStructureInput
  }

  export type StructureCreateOrConnectWithoutDemandesStagesInput = {
    where: StructureWhereUniqueInput
    create: XOR<StructureCreateWithoutDemandesStagesInput, StructureUncheckedCreateWithoutDemandesStagesInput>
  }

  export type StagiaireUpsertWithoutDemandesStagesInput = {
    update: XOR<StagiaireUpdateWithoutDemandesStagesInput, StagiaireUncheckedUpdateWithoutDemandesStagesInput>
    create: XOR<StagiaireCreateWithoutDemandesStagesInput, StagiaireUncheckedCreateWithoutDemandesStagesInput>
    where?: StagiaireWhereInput
  }

  export type StagiaireUpdateToOneWithWhereWithoutDemandesStagesInput = {
    where?: StagiaireWhereInput
    data: XOR<StagiaireUpdateWithoutDemandesStagesInput, StagiaireUncheckedUpdateWithoutDemandesStagesInput>
  }

  export type StagiaireUpdateWithoutDemandesStagesInput = {
    codeDemande?: NullableStringFieldUpdateOperationsInput | string | null
    statutDemande?: NullableEnumStatutDemandeFieldUpdateOperationsInput | $Enums.StatutDemande | null
    dateDebut?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dateFin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutStagiaireNestedInput
    structure?: StructureUpdateOneWithoutStagiairesNestedInput
    tuteur?: TuteurUpdateOneWithoutStagiairesNestedInput
    stages?: StageUpdateManyWithoutStagiaireNestedInput
    candidatureScores?: CandidatureScoreUpdateManyWithoutStagiaireNestedInput
    suggestions?: SuggestionAffectationUpdateManyWithoutStagiaireNestedInput
  }

  export type StagiaireUncheckedUpdateWithoutDemandesStagesInput = {
    userId?: StringFieldUpdateOperationsInput | string
    codeDemande?: NullableStringFieldUpdateOperationsInput | string | null
    statutDemande?: NullableEnumStatutDemandeFieldUpdateOperationsInput | $Enums.StatutDemande | null
    structureAffecteeId?: NullableStringFieldUpdateOperationsInput | string | null
    tuteurId?: NullableStringFieldUpdateOperationsInput | string | null
    dateDebut?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dateFin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stages?: StageUncheckedUpdateManyWithoutStagiaireNestedInput
    candidatureScores?: CandidatureScoreUncheckedUpdateManyWithoutStagiaireNestedInput
    suggestions?: SuggestionAffectationUncheckedUpdateManyWithoutStagiaireNestedInput
  }

  export type StructureUpsertWithoutDemandesStagesInput = {
    update: XOR<StructureUpdateWithoutDemandesStagesInput, StructureUncheckedUpdateWithoutDemandesStagesInput>
    create: XOR<StructureCreateWithoutDemandesStagesInput, StructureUncheckedCreateWithoutDemandesStagesInput>
    where?: StructureWhereInput
  }

  export type StructureUpdateToOneWithWhereWithoutDemandesStagesInput = {
    where?: StructureWhereInput
    data: XOR<StructureUpdateWithoutDemandesStagesInput, StructureUncheckedUpdateWithoutDemandesStagesInput>
  }

  export type StructureUpdateWithoutDemandesStagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    nomStructure?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    adresse?: NullableStringFieldUpdateOperationsInput | string | null
    emailContact?: NullableStringFieldUpdateOperationsInput | string | null
    telephoneContact?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutStructureNestedInput
    tuteurs?: TuteurUpdateManyWithoutStructureNestedInput
    stagiaires?: StagiaireUpdateManyWithoutStructureNestedInput
    stages?: StageUpdateManyWithoutStructureNestedInput
  }

  export type StructureUncheckedUpdateWithoutDemandesStagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    nomStructure?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    adresse?: NullableStringFieldUpdateOperationsInput | string | null
    emailContact?: NullableStringFieldUpdateOperationsInput | string | null
    telephoneContact?: NullableStringFieldUpdateOperationsInput | string | null
    tuteurs?: TuteurUncheckedUpdateManyWithoutStructureNestedInput
    stagiaires?: StagiaireUncheckedUpdateManyWithoutStructureNestedInput
    stages?: StageUncheckedUpdateManyWithoutStructureNestedInput
  }

  export type StagiaireCreateWithoutStagesInput = {
    codeDemande?: string | null
    statutDemande?: $Enums.StatutDemande | null
    dateDebut?: Date | string | null
    dateFin?: Date | string | null
    user: UserCreateNestedOneWithoutStagiaireInput
    structure?: StructureCreateNestedOneWithoutStagiairesInput
    tuteur?: TuteurCreateNestedOneWithoutStagiairesInput
    demandesStages?: DemandeStageCreateNestedManyWithoutStagiaireInput
    candidatureScores?: CandidatureScoreCreateNestedManyWithoutStagiaireInput
    suggestions?: SuggestionAffectationCreateNestedManyWithoutStagiaireInput
  }

  export type StagiaireUncheckedCreateWithoutStagesInput = {
    userId: string
    codeDemande?: string | null
    statutDemande?: $Enums.StatutDemande | null
    structureAffecteeId?: string | null
    tuteurId?: string | null
    dateDebut?: Date | string | null
    dateFin?: Date | string | null
    demandesStages?: DemandeStageUncheckedCreateNestedManyWithoutStagiaireInput
    candidatureScores?: CandidatureScoreUncheckedCreateNestedManyWithoutStagiaireInput
    suggestions?: SuggestionAffectationUncheckedCreateNestedManyWithoutStagiaireInput
  }

  export type StagiaireCreateOrConnectWithoutStagesInput = {
    where: StagiaireWhereUniqueInput
    create: XOR<StagiaireCreateWithoutStagesInput, StagiaireUncheckedCreateWithoutStagesInput>
  }

  export type TuteurCreateWithoutStagesInput = {
    fonction?: string | null
    disponibilite?: boolean
    competences?: TuteurCreatecompetencesInput | string[]
    user: UserCreateNestedOneWithoutTuteurInput
    structure?: StructureCreateNestedOneWithoutTuteursInput
    stagiaires?: StagiaireCreateNestedManyWithoutTuteurInput
    themes?: ThemeTuteurCreateNestedManyWithoutTuteurInput
    suggestions?: SuggestionAffectationCreateNestedManyWithoutTuteurInput
  }

  export type TuteurUncheckedCreateWithoutStagesInput = {
    userId: string
    structureId?: string | null
    fonction?: string | null
    disponibilite?: boolean
    competences?: TuteurCreatecompetencesInput | string[]
    stagiaires?: StagiaireUncheckedCreateNestedManyWithoutTuteurInput
    themes?: ThemeTuteurUncheckedCreateNestedManyWithoutTuteurInput
    suggestions?: SuggestionAffectationUncheckedCreateNestedManyWithoutTuteurInput
  }

  export type TuteurCreateOrConnectWithoutStagesInput = {
    where: TuteurWhereUniqueInput
    create: XOR<TuteurCreateWithoutStagesInput, TuteurUncheckedCreateWithoutStagesInput>
  }

  export type StructureCreateWithoutStagesInput = {
    id?: string
    nomStructure: string
    type?: string | null
    adresse?: string | null
    emailContact?: string | null
    telephoneContact?: string | null
    user: UserCreateNestedOneWithoutStructureInput
    tuteurs?: TuteurCreateNestedManyWithoutStructureInput
    stagiaires?: StagiaireCreateNestedManyWithoutStructureInput
    demandesStages?: DemandeStageCreateNestedManyWithoutStructureCibleInput
  }

  export type StructureUncheckedCreateWithoutStagesInput = {
    id?: string
    userId: string
    nomStructure: string
    type?: string | null
    adresse?: string | null
    emailContact?: string | null
    telephoneContact?: string | null
    tuteurs?: TuteurUncheckedCreateNestedManyWithoutStructureInput
    stagiaires?: StagiaireUncheckedCreateNestedManyWithoutStructureInput
    demandesStages?: DemandeStageUncheckedCreateNestedManyWithoutStructureCibleInput
  }

  export type StructureCreateOrConnectWithoutStagesInput = {
    where: StructureWhereUniqueInput
    create: XOR<StructureCreateWithoutStagesInput, StructureUncheckedCreateWithoutStagesInput>
  }

  export type StagiaireUpsertWithoutStagesInput = {
    update: XOR<StagiaireUpdateWithoutStagesInput, StagiaireUncheckedUpdateWithoutStagesInput>
    create: XOR<StagiaireCreateWithoutStagesInput, StagiaireUncheckedCreateWithoutStagesInput>
    where?: StagiaireWhereInput
  }

  export type StagiaireUpdateToOneWithWhereWithoutStagesInput = {
    where?: StagiaireWhereInput
    data: XOR<StagiaireUpdateWithoutStagesInput, StagiaireUncheckedUpdateWithoutStagesInput>
  }

  export type StagiaireUpdateWithoutStagesInput = {
    codeDemande?: NullableStringFieldUpdateOperationsInput | string | null
    statutDemande?: NullableEnumStatutDemandeFieldUpdateOperationsInput | $Enums.StatutDemande | null
    dateDebut?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dateFin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutStagiaireNestedInput
    structure?: StructureUpdateOneWithoutStagiairesNestedInput
    tuteur?: TuteurUpdateOneWithoutStagiairesNestedInput
    demandesStages?: DemandeStageUpdateManyWithoutStagiaireNestedInput
    candidatureScores?: CandidatureScoreUpdateManyWithoutStagiaireNestedInput
    suggestions?: SuggestionAffectationUpdateManyWithoutStagiaireNestedInput
  }

  export type StagiaireUncheckedUpdateWithoutStagesInput = {
    userId?: StringFieldUpdateOperationsInput | string
    codeDemande?: NullableStringFieldUpdateOperationsInput | string | null
    statutDemande?: NullableEnumStatutDemandeFieldUpdateOperationsInput | $Enums.StatutDemande | null
    structureAffecteeId?: NullableStringFieldUpdateOperationsInput | string | null
    tuteurId?: NullableStringFieldUpdateOperationsInput | string | null
    dateDebut?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dateFin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    demandesStages?: DemandeStageUncheckedUpdateManyWithoutStagiaireNestedInput
    candidatureScores?: CandidatureScoreUncheckedUpdateManyWithoutStagiaireNestedInput
    suggestions?: SuggestionAffectationUncheckedUpdateManyWithoutStagiaireNestedInput
  }

  export type TuteurUpsertWithoutStagesInput = {
    update: XOR<TuteurUpdateWithoutStagesInput, TuteurUncheckedUpdateWithoutStagesInput>
    create: XOR<TuteurCreateWithoutStagesInput, TuteurUncheckedCreateWithoutStagesInput>
    where?: TuteurWhereInput
  }

  export type TuteurUpdateToOneWithWhereWithoutStagesInput = {
    where?: TuteurWhereInput
    data: XOR<TuteurUpdateWithoutStagesInput, TuteurUncheckedUpdateWithoutStagesInput>
  }

  export type TuteurUpdateWithoutStagesInput = {
    fonction?: NullableStringFieldUpdateOperationsInput | string | null
    disponibilite?: BoolFieldUpdateOperationsInput | boolean
    competences?: TuteurUpdatecompetencesInput | string[]
    user?: UserUpdateOneRequiredWithoutTuteurNestedInput
    structure?: StructureUpdateOneWithoutTuteursNestedInput
    stagiaires?: StagiaireUpdateManyWithoutTuteurNestedInput
    themes?: ThemeTuteurUpdateManyWithoutTuteurNestedInput
    suggestions?: SuggestionAffectationUpdateManyWithoutTuteurNestedInput
  }

  export type TuteurUncheckedUpdateWithoutStagesInput = {
    userId?: StringFieldUpdateOperationsInput | string
    structureId?: NullableStringFieldUpdateOperationsInput | string | null
    fonction?: NullableStringFieldUpdateOperationsInput | string | null
    disponibilite?: BoolFieldUpdateOperationsInput | boolean
    competences?: TuteurUpdatecompetencesInput | string[]
    stagiaires?: StagiaireUncheckedUpdateManyWithoutTuteurNestedInput
    themes?: ThemeTuteurUncheckedUpdateManyWithoutTuteurNestedInput
    suggestions?: SuggestionAffectationUncheckedUpdateManyWithoutTuteurNestedInput
  }

  export type StructureUpsertWithoutStagesInput = {
    update: XOR<StructureUpdateWithoutStagesInput, StructureUncheckedUpdateWithoutStagesInput>
    create: XOR<StructureCreateWithoutStagesInput, StructureUncheckedCreateWithoutStagesInput>
    where?: StructureWhereInput
  }

  export type StructureUpdateToOneWithWhereWithoutStagesInput = {
    where?: StructureWhereInput
    data: XOR<StructureUpdateWithoutStagesInput, StructureUncheckedUpdateWithoutStagesInput>
  }

  export type StructureUpdateWithoutStagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    nomStructure?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    adresse?: NullableStringFieldUpdateOperationsInput | string | null
    emailContact?: NullableStringFieldUpdateOperationsInput | string | null
    telephoneContact?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutStructureNestedInput
    tuteurs?: TuteurUpdateManyWithoutStructureNestedInput
    stagiaires?: StagiaireUpdateManyWithoutStructureNestedInput
    demandesStages?: DemandeStageUpdateManyWithoutStructureCibleNestedInput
  }

  export type StructureUncheckedUpdateWithoutStagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    nomStructure?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    adresse?: NullableStringFieldUpdateOperationsInput | string | null
    emailContact?: NullableStringFieldUpdateOperationsInput | string | null
    telephoneContact?: NullableStringFieldUpdateOperationsInput | string | null
    tuteurs?: TuteurUncheckedUpdateManyWithoutStructureNestedInput
    stagiaires?: StagiaireUncheckedUpdateManyWithoutStructureNestedInput
    demandesStages?: DemandeStageUncheckedUpdateManyWithoutStructureCibleNestedInput
  }

  export type StagiaireCreateWithoutCandidatureScoresInput = {
    codeDemande?: string | null
    statutDemande?: $Enums.StatutDemande | null
    dateDebut?: Date | string | null
    dateFin?: Date | string | null
    user: UserCreateNestedOneWithoutStagiaireInput
    structure?: StructureCreateNestedOneWithoutStagiairesInput
    tuteur?: TuteurCreateNestedOneWithoutStagiairesInput
    demandesStages?: DemandeStageCreateNestedManyWithoutStagiaireInput
    stages?: StageCreateNestedManyWithoutStagiaireInput
    suggestions?: SuggestionAffectationCreateNestedManyWithoutStagiaireInput
  }

  export type StagiaireUncheckedCreateWithoutCandidatureScoresInput = {
    userId: string
    codeDemande?: string | null
    statutDemande?: $Enums.StatutDemande | null
    structureAffecteeId?: string | null
    tuteurId?: string | null
    dateDebut?: Date | string | null
    dateFin?: Date | string | null
    demandesStages?: DemandeStageUncheckedCreateNestedManyWithoutStagiaireInput
    stages?: StageUncheckedCreateNestedManyWithoutStagiaireInput
    suggestions?: SuggestionAffectationUncheckedCreateNestedManyWithoutStagiaireInput
  }

  export type StagiaireCreateOrConnectWithoutCandidatureScoresInput = {
    where: StagiaireWhereUniqueInput
    create: XOR<StagiaireCreateWithoutCandidatureScoresInput, StagiaireUncheckedCreateWithoutCandidatureScoresInput>
  }

  export type StagiaireUpsertWithoutCandidatureScoresInput = {
    update: XOR<StagiaireUpdateWithoutCandidatureScoresInput, StagiaireUncheckedUpdateWithoutCandidatureScoresInput>
    create: XOR<StagiaireCreateWithoutCandidatureScoresInput, StagiaireUncheckedCreateWithoutCandidatureScoresInput>
    where?: StagiaireWhereInput
  }

  export type StagiaireUpdateToOneWithWhereWithoutCandidatureScoresInput = {
    where?: StagiaireWhereInput
    data: XOR<StagiaireUpdateWithoutCandidatureScoresInput, StagiaireUncheckedUpdateWithoutCandidatureScoresInput>
  }

  export type StagiaireUpdateWithoutCandidatureScoresInput = {
    codeDemande?: NullableStringFieldUpdateOperationsInput | string | null
    statutDemande?: NullableEnumStatutDemandeFieldUpdateOperationsInput | $Enums.StatutDemande | null
    dateDebut?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dateFin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutStagiaireNestedInput
    structure?: StructureUpdateOneWithoutStagiairesNestedInput
    tuteur?: TuteurUpdateOneWithoutStagiairesNestedInput
    demandesStages?: DemandeStageUpdateManyWithoutStagiaireNestedInput
    stages?: StageUpdateManyWithoutStagiaireNestedInput
    suggestions?: SuggestionAffectationUpdateManyWithoutStagiaireNestedInput
  }

  export type StagiaireUncheckedUpdateWithoutCandidatureScoresInput = {
    userId?: StringFieldUpdateOperationsInput | string
    codeDemande?: NullableStringFieldUpdateOperationsInput | string | null
    statutDemande?: NullableEnumStatutDemandeFieldUpdateOperationsInput | $Enums.StatutDemande | null
    structureAffecteeId?: NullableStringFieldUpdateOperationsInput | string | null
    tuteurId?: NullableStringFieldUpdateOperationsInput | string | null
    dateDebut?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dateFin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    demandesStages?: DemandeStageUncheckedUpdateManyWithoutStagiaireNestedInput
    stages?: StageUncheckedUpdateManyWithoutStagiaireNestedInput
    suggestions?: SuggestionAffectationUncheckedUpdateManyWithoutStagiaireNestedInput
  }

  export type StagiaireCreateWithoutSuggestionsInput = {
    codeDemande?: string | null
    statutDemande?: $Enums.StatutDemande | null
    dateDebut?: Date | string | null
    dateFin?: Date | string | null
    user: UserCreateNestedOneWithoutStagiaireInput
    structure?: StructureCreateNestedOneWithoutStagiairesInput
    tuteur?: TuteurCreateNestedOneWithoutStagiairesInput
    demandesStages?: DemandeStageCreateNestedManyWithoutStagiaireInput
    stages?: StageCreateNestedManyWithoutStagiaireInput
    candidatureScores?: CandidatureScoreCreateNestedManyWithoutStagiaireInput
  }

  export type StagiaireUncheckedCreateWithoutSuggestionsInput = {
    userId: string
    codeDemande?: string | null
    statutDemande?: $Enums.StatutDemande | null
    structureAffecteeId?: string | null
    tuteurId?: string | null
    dateDebut?: Date | string | null
    dateFin?: Date | string | null
    demandesStages?: DemandeStageUncheckedCreateNestedManyWithoutStagiaireInput
    stages?: StageUncheckedCreateNestedManyWithoutStagiaireInput
    candidatureScores?: CandidatureScoreUncheckedCreateNestedManyWithoutStagiaireInput
  }

  export type StagiaireCreateOrConnectWithoutSuggestionsInput = {
    where: StagiaireWhereUniqueInput
    create: XOR<StagiaireCreateWithoutSuggestionsInput, StagiaireUncheckedCreateWithoutSuggestionsInput>
  }

  export type TuteurCreateWithoutSuggestionsInput = {
    fonction?: string | null
    disponibilite?: boolean
    competences?: TuteurCreatecompetencesInput | string[]
    user: UserCreateNestedOneWithoutTuteurInput
    structure?: StructureCreateNestedOneWithoutTuteursInput
    stagiaires?: StagiaireCreateNestedManyWithoutTuteurInput
    stages?: StageCreateNestedManyWithoutTuteurInput
    themes?: ThemeTuteurCreateNestedManyWithoutTuteurInput
  }

  export type TuteurUncheckedCreateWithoutSuggestionsInput = {
    userId: string
    structureId?: string | null
    fonction?: string | null
    disponibilite?: boolean
    competences?: TuteurCreatecompetencesInput | string[]
    stagiaires?: StagiaireUncheckedCreateNestedManyWithoutTuteurInput
    stages?: StageUncheckedCreateNestedManyWithoutTuteurInput
    themes?: ThemeTuteurUncheckedCreateNestedManyWithoutTuteurInput
  }

  export type TuteurCreateOrConnectWithoutSuggestionsInput = {
    where: TuteurWhereUniqueInput
    create: XOR<TuteurCreateWithoutSuggestionsInput, TuteurUncheckedCreateWithoutSuggestionsInput>
  }

  export type StagiaireUpsertWithoutSuggestionsInput = {
    update: XOR<StagiaireUpdateWithoutSuggestionsInput, StagiaireUncheckedUpdateWithoutSuggestionsInput>
    create: XOR<StagiaireCreateWithoutSuggestionsInput, StagiaireUncheckedCreateWithoutSuggestionsInput>
    where?: StagiaireWhereInput
  }

  export type StagiaireUpdateToOneWithWhereWithoutSuggestionsInput = {
    where?: StagiaireWhereInput
    data: XOR<StagiaireUpdateWithoutSuggestionsInput, StagiaireUncheckedUpdateWithoutSuggestionsInput>
  }

  export type StagiaireUpdateWithoutSuggestionsInput = {
    codeDemande?: NullableStringFieldUpdateOperationsInput | string | null
    statutDemande?: NullableEnumStatutDemandeFieldUpdateOperationsInput | $Enums.StatutDemande | null
    dateDebut?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dateFin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutStagiaireNestedInput
    structure?: StructureUpdateOneWithoutStagiairesNestedInput
    tuteur?: TuteurUpdateOneWithoutStagiairesNestedInput
    demandesStages?: DemandeStageUpdateManyWithoutStagiaireNestedInput
    stages?: StageUpdateManyWithoutStagiaireNestedInput
    candidatureScores?: CandidatureScoreUpdateManyWithoutStagiaireNestedInput
  }

  export type StagiaireUncheckedUpdateWithoutSuggestionsInput = {
    userId?: StringFieldUpdateOperationsInput | string
    codeDemande?: NullableStringFieldUpdateOperationsInput | string | null
    statutDemande?: NullableEnumStatutDemandeFieldUpdateOperationsInput | $Enums.StatutDemande | null
    structureAffecteeId?: NullableStringFieldUpdateOperationsInput | string | null
    tuteurId?: NullableStringFieldUpdateOperationsInput | string | null
    dateDebut?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dateFin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    demandesStages?: DemandeStageUncheckedUpdateManyWithoutStagiaireNestedInput
    stages?: StageUncheckedUpdateManyWithoutStagiaireNestedInput
    candidatureScores?: CandidatureScoreUncheckedUpdateManyWithoutStagiaireNestedInput
  }

  export type TuteurUpsertWithoutSuggestionsInput = {
    update: XOR<TuteurUpdateWithoutSuggestionsInput, TuteurUncheckedUpdateWithoutSuggestionsInput>
    create: XOR<TuteurCreateWithoutSuggestionsInput, TuteurUncheckedCreateWithoutSuggestionsInput>
    where?: TuteurWhereInput
  }

  export type TuteurUpdateToOneWithWhereWithoutSuggestionsInput = {
    where?: TuteurWhereInput
    data: XOR<TuteurUpdateWithoutSuggestionsInput, TuteurUncheckedUpdateWithoutSuggestionsInput>
  }

  export type TuteurUpdateWithoutSuggestionsInput = {
    fonction?: NullableStringFieldUpdateOperationsInput | string | null
    disponibilite?: BoolFieldUpdateOperationsInput | boolean
    competences?: TuteurUpdatecompetencesInput | string[]
    user?: UserUpdateOneRequiredWithoutTuteurNestedInput
    structure?: StructureUpdateOneWithoutTuteursNestedInput
    stagiaires?: StagiaireUpdateManyWithoutTuteurNestedInput
    stages?: StageUpdateManyWithoutTuteurNestedInput
    themes?: ThemeTuteurUpdateManyWithoutTuteurNestedInput
  }

  export type TuteurUncheckedUpdateWithoutSuggestionsInput = {
    userId?: StringFieldUpdateOperationsInput | string
    structureId?: NullableStringFieldUpdateOperationsInput | string | null
    fonction?: NullableStringFieldUpdateOperationsInput | string | null
    disponibilite?: BoolFieldUpdateOperationsInput | boolean
    competences?: TuteurUpdatecompetencesInput | string[]
    stagiaires?: StagiaireUncheckedUpdateManyWithoutTuteurNestedInput
    stages?: StageUncheckedUpdateManyWithoutTuteurNestedInput
    themes?: ThemeTuteurUncheckedUpdateManyWithoutTuteurNestedInput
  }

  export type UserCreateWithoutMessagesSentInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    profile?: UserProfileCreateNestedOneWithoutUserInput
    tuteur?: TuteurCreateNestedOneWithoutUserInput
    stagiaire?: StagiaireCreateNestedOneWithoutUserInput
    dpaf?: DPAFCreateNestedOneWithoutUserInput
    structure?: StructureCreateNestedOneWithoutUserInput
    messagesReceived?: MessageCreateNestedManyWithoutDestinataireInput
    journalActions?: JournalActionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutMessagesSentInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    tuteur?: TuteurUncheckedCreateNestedOneWithoutUserInput
    stagiaire?: StagiaireUncheckedCreateNestedOneWithoutUserInput
    dpaf?: DPAFUncheckedCreateNestedOneWithoutUserInput
    structure?: StructureUncheckedCreateNestedOneWithoutUserInput
    messagesReceived?: MessageUncheckedCreateNestedManyWithoutDestinataireInput
    journalActions?: JournalActionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutMessagesSentInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMessagesSentInput, UserUncheckedCreateWithoutMessagesSentInput>
  }

  export type UserCreateWithoutMessagesReceivedInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    profile?: UserProfileCreateNestedOneWithoutUserInput
    tuteur?: TuteurCreateNestedOneWithoutUserInput
    stagiaire?: StagiaireCreateNestedOneWithoutUserInput
    dpaf?: DPAFCreateNestedOneWithoutUserInput
    structure?: StructureCreateNestedOneWithoutUserInput
    messagesSent?: MessageCreateNestedManyWithoutExpediteurInput
    journalActions?: JournalActionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutMessagesReceivedInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    tuteur?: TuteurUncheckedCreateNestedOneWithoutUserInput
    stagiaire?: StagiaireUncheckedCreateNestedOneWithoutUserInput
    dpaf?: DPAFUncheckedCreateNestedOneWithoutUserInput
    structure?: StructureUncheckedCreateNestedOneWithoutUserInput
    messagesSent?: MessageUncheckedCreateNestedManyWithoutExpediteurInput
    journalActions?: JournalActionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutMessagesReceivedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMessagesReceivedInput, UserUncheckedCreateWithoutMessagesReceivedInput>
  }

  export type UserUpsertWithoutMessagesSentInput = {
    update: XOR<UserUpdateWithoutMessagesSentInput, UserUncheckedUpdateWithoutMessagesSentInput>
    create: XOR<UserCreateWithoutMessagesSentInput, UserUncheckedCreateWithoutMessagesSentInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMessagesSentInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMessagesSentInput, UserUncheckedUpdateWithoutMessagesSentInput>
  }

  export type UserUpdateWithoutMessagesSentInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    tuteur?: TuteurUpdateOneWithoutUserNestedInput
    stagiaire?: StagiaireUpdateOneWithoutUserNestedInput
    dpaf?: DPAFUpdateOneWithoutUserNestedInput
    structure?: StructureUpdateOneWithoutUserNestedInput
    messagesReceived?: MessageUpdateManyWithoutDestinataireNestedInput
    journalActions?: JournalActionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutMessagesSentInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    tuteur?: TuteurUncheckedUpdateOneWithoutUserNestedInput
    stagiaire?: StagiaireUncheckedUpdateOneWithoutUserNestedInput
    dpaf?: DPAFUncheckedUpdateOneWithoutUserNestedInput
    structure?: StructureUncheckedUpdateOneWithoutUserNestedInput
    messagesReceived?: MessageUncheckedUpdateManyWithoutDestinataireNestedInput
    journalActions?: JournalActionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutMessagesReceivedInput = {
    update: XOR<UserUpdateWithoutMessagesReceivedInput, UserUncheckedUpdateWithoutMessagesReceivedInput>
    create: XOR<UserCreateWithoutMessagesReceivedInput, UserUncheckedCreateWithoutMessagesReceivedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMessagesReceivedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMessagesReceivedInput, UserUncheckedUpdateWithoutMessagesReceivedInput>
  }

  export type UserUpdateWithoutMessagesReceivedInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    tuteur?: TuteurUpdateOneWithoutUserNestedInput
    stagiaire?: StagiaireUpdateOneWithoutUserNestedInput
    dpaf?: DPAFUpdateOneWithoutUserNestedInput
    structure?: StructureUpdateOneWithoutUserNestedInput
    messagesSent?: MessageUpdateManyWithoutExpediteurNestedInput
    journalActions?: JournalActionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutMessagesReceivedInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    tuteur?: TuteurUncheckedUpdateOneWithoutUserNestedInput
    stagiaire?: StagiaireUncheckedUpdateOneWithoutUserNestedInput
    dpaf?: DPAFUncheckedUpdateOneWithoutUserNestedInput
    structure?: StructureUncheckedUpdateOneWithoutUserNestedInput
    messagesSent?: MessageUncheckedUpdateManyWithoutExpediteurNestedInput
    journalActions?: JournalActionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type TuteurCreateWithoutThemesInput = {
    fonction?: string | null
    disponibilite?: boolean
    competences?: TuteurCreatecompetencesInput | string[]
    user: UserCreateNestedOneWithoutTuteurInput
    structure?: StructureCreateNestedOneWithoutTuteursInput
    stagiaires?: StagiaireCreateNestedManyWithoutTuteurInput
    stages?: StageCreateNestedManyWithoutTuteurInput
    suggestions?: SuggestionAffectationCreateNestedManyWithoutTuteurInput
  }

  export type TuteurUncheckedCreateWithoutThemesInput = {
    userId: string
    structureId?: string | null
    fonction?: string | null
    disponibilite?: boolean
    competences?: TuteurCreatecompetencesInput | string[]
    stagiaires?: StagiaireUncheckedCreateNestedManyWithoutTuteurInput
    stages?: StageUncheckedCreateNestedManyWithoutTuteurInput
    suggestions?: SuggestionAffectationUncheckedCreateNestedManyWithoutTuteurInput
  }

  export type TuteurCreateOrConnectWithoutThemesInput = {
    where: TuteurWhereUniqueInput
    create: XOR<TuteurCreateWithoutThemesInput, TuteurUncheckedCreateWithoutThemesInput>
  }

  export type TuteurUpsertWithoutThemesInput = {
    update: XOR<TuteurUpdateWithoutThemesInput, TuteurUncheckedUpdateWithoutThemesInput>
    create: XOR<TuteurCreateWithoutThemesInput, TuteurUncheckedCreateWithoutThemesInput>
    where?: TuteurWhereInput
  }

  export type TuteurUpdateToOneWithWhereWithoutThemesInput = {
    where?: TuteurWhereInput
    data: XOR<TuteurUpdateWithoutThemesInput, TuteurUncheckedUpdateWithoutThemesInput>
  }

  export type TuteurUpdateWithoutThemesInput = {
    fonction?: NullableStringFieldUpdateOperationsInput | string | null
    disponibilite?: BoolFieldUpdateOperationsInput | boolean
    competences?: TuteurUpdatecompetencesInput | string[]
    user?: UserUpdateOneRequiredWithoutTuteurNestedInput
    structure?: StructureUpdateOneWithoutTuteursNestedInput
    stagiaires?: StagiaireUpdateManyWithoutTuteurNestedInput
    stages?: StageUpdateManyWithoutTuteurNestedInput
    suggestions?: SuggestionAffectationUpdateManyWithoutTuteurNestedInput
  }

  export type TuteurUncheckedUpdateWithoutThemesInput = {
    userId?: StringFieldUpdateOperationsInput | string
    structureId?: NullableStringFieldUpdateOperationsInput | string | null
    fonction?: NullableStringFieldUpdateOperationsInput | string | null
    disponibilite?: BoolFieldUpdateOperationsInput | boolean
    competences?: TuteurUpdatecompetencesInput | string[]
    stagiaires?: StagiaireUncheckedUpdateManyWithoutTuteurNestedInput
    stages?: StageUncheckedUpdateManyWithoutTuteurNestedInput
    suggestions?: SuggestionAffectationUncheckedUpdateManyWithoutTuteurNestedInput
  }

  export type UserCreateWithoutJournalActionsInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    profile?: UserProfileCreateNestedOneWithoutUserInput
    tuteur?: TuteurCreateNestedOneWithoutUserInput
    stagiaire?: StagiaireCreateNestedOneWithoutUserInput
    dpaf?: DPAFCreateNestedOneWithoutUserInput
    structure?: StructureCreateNestedOneWithoutUserInput
    messagesSent?: MessageCreateNestedManyWithoutExpediteurInput
    messagesReceived?: MessageCreateNestedManyWithoutDestinataireInput
  }

  export type UserUncheckedCreateWithoutJournalActionsInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    tuteur?: TuteurUncheckedCreateNestedOneWithoutUserInput
    stagiaire?: StagiaireUncheckedCreateNestedOneWithoutUserInput
    dpaf?: DPAFUncheckedCreateNestedOneWithoutUserInput
    structure?: StructureUncheckedCreateNestedOneWithoutUserInput
    messagesSent?: MessageUncheckedCreateNestedManyWithoutExpediteurInput
    messagesReceived?: MessageUncheckedCreateNestedManyWithoutDestinataireInput
  }

  export type UserCreateOrConnectWithoutJournalActionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutJournalActionsInput, UserUncheckedCreateWithoutJournalActionsInput>
  }

  export type UserUpsertWithoutJournalActionsInput = {
    update: XOR<UserUpdateWithoutJournalActionsInput, UserUncheckedUpdateWithoutJournalActionsInput>
    create: XOR<UserCreateWithoutJournalActionsInput, UserUncheckedCreateWithoutJournalActionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutJournalActionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutJournalActionsInput, UserUncheckedUpdateWithoutJournalActionsInput>
  }

  export type UserUpdateWithoutJournalActionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    tuteur?: TuteurUpdateOneWithoutUserNestedInput
    stagiaire?: StagiaireUpdateOneWithoutUserNestedInput
    dpaf?: DPAFUpdateOneWithoutUserNestedInput
    structure?: StructureUpdateOneWithoutUserNestedInput
    messagesSent?: MessageUpdateManyWithoutExpediteurNestedInput
    messagesReceived?: MessageUpdateManyWithoutDestinataireNestedInput
  }

  export type UserUncheckedUpdateWithoutJournalActionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    tuteur?: TuteurUncheckedUpdateOneWithoutUserNestedInput
    stagiaire?: StagiaireUncheckedUpdateOneWithoutUserNestedInput
    dpaf?: DPAFUncheckedUpdateOneWithoutUserNestedInput
    structure?: StructureUncheckedUpdateOneWithoutUserNestedInput
    messagesSent?: MessageUncheckedUpdateManyWithoutExpediteurNestedInput
    messagesReceived?: MessageUncheckedUpdateManyWithoutDestinataireNestedInput
  }

  export type MessageCreateManyExpediteurInput = {
    id?: string
    destinataireId: string
    contenu: string
    fichierJoint?: string | null
    lu?: boolean
    envoyeLe?: Date | string
  }

  export type MessageCreateManyDestinataireInput = {
    id?: string
    expediteurId: string
    contenu: string
    fichierJoint?: string | null
    lu?: boolean
    envoyeLe?: Date | string
  }

  export type JournalActionCreateManyUserInput = {
    id?: string
    action: string
    cible: string
    timestamp?: Date | string
  }

  export type MessageUpdateWithoutExpediteurInput = {
    id?: StringFieldUpdateOperationsInput | string
    contenu?: StringFieldUpdateOperationsInput | string
    fichierJoint?: NullableStringFieldUpdateOperationsInput | string | null
    lu?: BoolFieldUpdateOperationsInput | boolean
    envoyeLe?: DateTimeFieldUpdateOperationsInput | Date | string
    destinataire?: UserUpdateOneRequiredWithoutMessagesReceivedNestedInput
  }

  export type MessageUncheckedUpdateWithoutExpediteurInput = {
    id?: StringFieldUpdateOperationsInput | string
    destinataireId?: StringFieldUpdateOperationsInput | string
    contenu?: StringFieldUpdateOperationsInput | string
    fichierJoint?: NullableStringFieldUpdateOperationsInput | string | null
    lu?: BoolFieldUpdateOperationsInput | boolean
    envoyeLe?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageUncheckedUpdateManyWithoutExpediteurInput = {
    id?: StringFieldUpdateOperationsInput | string
    destinataireId?: StringFieldUpdateOperationsInput | string
    contenu?: StringFieldUpdateOperationsInput | string
    fichierJoint?: NullableStringFieldUpdateOperationsInput | string | null
    lu?: BoolFieldUpdateOperationsInput | boolean
    envoyeLe?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageUpdateWithoutDestinataireInput = {
    id?: StringFieldUpdateOperationsInput | string
    contenu?: StringFieldUpdateOperationsInput | string
    fichierJoint?: NullableStringFieldUpdateOperationsInput | string | null
    lu?: BoolFieldUpdateOperationsInput | boolean
    envoyeLe?: DateTimeFieldUpdateOperationsInput | Date | string
    expediteur?: UserUpdateOneRequiredWithoutMessagesSentNestedInput
  }

  export type MessageUncheckedUpdateWithoutDestinataireInput = {
    id?: StringFieldUpdateOperationsInput | string
    expediteurId?: StringFieldUpdateOperationsInput | string
    contenu?: StringFieldUpdateOperationsInput | string
    fichierJoint?: NullableStringFieldUpdateOperationsInput | string | null
    lu?: BoolFieldUpdateOperationsInput | boolean
    envoyeLe?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageUncheckedUpdateManyWithoutDestinataireInput = {
    id?: StringFieldUpdateOperationsInput | string
    expediteurId?: StringFieldUpdateOperationsInput | string
    contenu?: StringFieldUpdateOperationsInput | string
    fichierJoint?: NullableStringFieldUpdateOperationsInput | string | null
    lu?: BoolFieldUpdateOperationsInput | boolean
    envoyeLe?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JournalActionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    cible?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JournalActionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    cible?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JournalActionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    cible?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TuteurCreateManyStructureInput = {
    userId: string
    fonction?: string | null
    disponibilite?: boolean
    competences?: TuteurCreatecompetencesInput | string[]
  }

  export type StagiaireCreateManyStructureInput = {
    userId: string
    codeDemande?: string | null
    statutDemande?: $Enums.StatutDemande | null
    tuteurId?: string | null
    dateDebut?: Date | string | null
    dateFin?: Date | string | null
  }

  export type DemandeStageCreateManyStructureCibleInput = {
    id?: string
    stagiaireId: string
    dateDemande?: Date | string
    etat?: $Enums.EtatDemande
    motifRefus?: string | null
    dateTraitement?: Date | string | null
  }

  export type StageCreateManyStructureInput = {
    id?: string
    stagiaireId: string
    tuteurId: string
    theme?: string | null
    etat?: $Enums.EtatStage
    dateDebut: Date | string
    dateFin: Date | string
    noteFinale?: string | null
  }

  export type TuteurUpdateWithoutStructureInput = {
    fonction?: NullableStringFieldUpdateOperationsInput | string | null
    disponibilite?: BoolFieldUpdateOperationsInput | boolean
    competences?: TuteurUpdatecompetencesInput | string[]
    user?: UserUpdateOneRequiredWithoutTuteurNestedInput
    stagiaires?: StagiaireUpdateManyWithoutTuteurNestedInput
    stages?: StageUpdateManyWithoutTuteurNestedInput
    themes?: ThemeTuteurUpdateManyWithoutTuteurNestedInput
    suggestions?: SuggestionAffectationUpdateManyWithoutTuteurNestedInput
  }

  export type TuteurUncheckedUpdateWithoutStructureInput = {
    userId?: StringFieldUpdateOperationsInput | string
    fonction?: NullableStringFieldUpdateOperationsInput | string | null
    disponibilite?: BoolFieldUpdateOperationsInput | boolean
    competences?: TuteurUpdatecompetencesInput | string[]
    stagiaires?: StagiaireUncheckedUpdateManyWithoutTuteurNestedInput
    stages?: StageUncheckedUpdateManyWithoutTuteurNestedInput
    themes?: ThemeTuteurUncheckedUpdateManyWithoutTuteurNestedInput
    suggestions?: SuggestionAffectationUncheckedUpdateManyWithoutTuteurNestedInput
  }

  export type TuteurUncheckedUpdateManyWithoutStructureInput = {
    userId?: StringFieldUpdateOperationsInput | string
    fonction?: NullableStringFieldUpdateOperationsInput | string | null
    disponibilite?: BoolFieldUpdateOperationsInput | boolean
    competences?: TuteurUpdatecompetencesInput | string[]
  }

  export type StagiaireUpdateWithoutStructureInput = {
    codeDemande?: NullableStringFieldUpdateOperationsInput | string | null
    statutDemande?: NullableEnumStatutDemandeFieldUpdateOperationsInput | $Enums.StatutDemande | null
    dateDebut?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dateFin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutStagiaireNestedInput
    tuteur?: TuteurUpdateOneWithoutStagiairesNestedInput
    demandesStages?: DemandeStageUpdateManyWithoutStagiaireNestedInput
    stages?: StageUpdateManyWithoutStagiaireNestedInput
    candidatureScores?: CandidatureScoreUpdateManyWithoutStagiaireNestedInput
    suggestions?: SuggestionAffectationUpdateManyWithoutStagiaireNestedInput
  }

  export type StagiaireUncheckedUpdateWithoutStructureInput = {
    userId?: StringFieldUpdateOperationsInput | string
    codeDemande?: NullableStringFieldUpdateOperationsInput | string | null
    statutDemande?: NullableEnumStatutDemandeFieldUpdateOperationsInput | $Enums.StatutDemande | null
    tuteurId?: NullableStringFieldUpdateOperationsInput | string | null
    dateDebut?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dateFin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    demandesStages?: DemandeStageUncheckedUpdateManyWithoutStagiaireNestedInput
    stages?: StageUncheckedUpdateManyWithoutStagiaireNestedInput
    candidatureScores?: CandidatureScoreUncheckedUpdateManyWithoutStagiaireNestedInput
    suggestions?: SuggestionAffectationUncheckedUpdateManyWithoutStagiaireNestedInput
  }

  export type StagiaireUncheckedUpdateManyWithoutStructureInput = {
    userId?: StringFieldUpdateOperationsInput | string
    codeDemande?: NullableStringFieldUpdateOperationsInput | string | null
    statutDemande?: NullableEnumStatutDemandeFieldUpdateOperationsInput | $Enums.StatutDemande | null
    tuteurId?: NullableStringFieldUpdateOperationsInput | string | null
    dateDebut?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dateFin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type DemandeStageUpdateWithoutStructureCibleInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateDemande?: DateTimeFieldUpdateOperationsInput | Date | string
    etat?: EnumEtatDemandeFieldUpdateOperationsInput | $Enums.EtatDemande
    motifRefus?: NullableStringFieldUpdateOperationsInput | string | null
    dateTraitement?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stagiaire?: StagiaireUpdateOneRequiredWithoutDemandesStagesNestedInput
  }

  export type DemandeStageUncheckedUpdateWithoutStructureCibleInput = {
    id?: StringFieldUpdateOperationsInput | string
    stagiaireId?: StringFieldUpdateOperationsInput | string
    dateDemande?: DateTimeFieldUpdateOperationsInput | Date | string
    etat?: EnumEtatDemandeFieldUpdateOperationsInput | $Enums.EtatDemande
    motifRefus?: NullableStringFieldUpdateOperationsInput | string | null
    dateTraitement?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type DemandeStageUncheckedUpdateManyWithoutStructureCibleInput = {
    id?: StringFieldUpdateOperationsInput | string
    stagiaireId?: StringFieldUpdateOperationsInput | string
    dateDemande?: DateTimeFieldUpdateOperationsInput | Date | string
    etat?: EnumEtatDemandeFieldUpdateOperationsInput | $Enums.EtatDemande
    motifRefus?: NullableStringFieldUpdateOperationsInput | string | null
    dateTraitement?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type StageUpdateWithoutStructureInput = {
    id?: StringFieldUpdateOperationsInput | string
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    etat?: EnumEtatStageFieldUpdateOperationsInput | $Enums.EtatStage
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    noteFinale?: NullableStringFieldUpdateOperationsInput | string | null
    stagiaire?: StagiaireUpdateOneRequiredWithoutStagesNestedInput
    tuteur?: TuteurUpdateOneRequiredWithoutStagesNestedInput
  }

  export type StageUncheckedUpdateWithoutStructureInput = {
    id?: StringFieldUpdateOperationsInput | string
    stagiaireId?: StringFieldUpdateOperationsInput | string
    tuteurId?: StringFieldUpdateOperationsInput | string
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    etat?: EnumEtatStageFieldUpdateOperationsInput | $Enums.EtatStage
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    noteFinale?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StageUncheckedUpdateManyWithoutStructureInput = {
    id?: StringFieldUpdateOperationsInput | string
    stagiaireId?: StringFieldUpdateOperationsInput | string
    tuteurId?: StringFieldUpdateOperationsInput | string
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    etat?: EnumEtatStageFieldUpdateOperationsInput | $Enums.EtatStage
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    noteFinale?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StagiaireCreateManyTuteurInput = {
    userId: string
    codeDemande?: string | null
    statutDemande?: $Enums.StatutDemande | null
    structureAffecteeId?: string | null
    dateDebut?: Date | string | null
    dateFin?: Date | string | null
  }

  export type StageCreateManyTuteurInput = {
    id?: string
    stagiaireId: string
    structureId: string
    theme?: string | null
    etat?: $Enums.EtatStage
    dateDebut: Date | string
    dateFin: Date | string
    noteFinale?: string | null
  }

  export type ThemeTuteurCreateManyTuteurInput = {
    id?: string
    titre: string
    description?: string | null
    disponible?: boolean
  }

  export type SuggestionAffectationCreateManyTuteurInput = {
    id?: string
    stagiaireId: string
    scoreMatch: number
    createdAt?: Date | string
  }

  export type StagiaireUpdateWithoutTuteurInput = {
    codeDemande?: NullableStringFieldUpdateOperationsInput | string | null
    statutDemande?: NullableEnumStatutDemandeFieldUpdateOperationsInput | $Enums.StatutDemande | null
    dateDebut?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dateFin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutStagiaireNestedInput
    structure?: StructureUpdateOneWithoutStagiairesNestedInput
    demandesStages?: DemandeStageUpdateManyWithoutStagiaireNestedInput
    stages?: StageUpdateManyWithoutStagiaireNestedInput
    candidatureScores?: CandidatureScoreUpdateManyWithoutStagiaireNestedInput
    suggestions?: SuggestionAffectationUpdateManyWithoutStagiaireNestedInput
  }

  export type StagiaireUncheckedUpdateWithoutTuteurInput = {
    userId?: StringFieldUpdateOperationsInput | string
    codeDemande?: NullableStringFieldUpdateOperationsInput | string | null
    statutDemande?: NullableEnumStatutDemandeFieldUpdateOperationsInput | $Enums.StatutDemande | null
    structureAffecteeId?: NullableStringFieldUpdateOperationsInput | string | null
    dateDebut?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dateFin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    demandesStages?: DemandeStageUncheckedUpdateManyWithoutStagiaireNestedInput
    stages?: StageUncheckedUpdateManyWithoutStagiaireNestedInput
    candidatureScores?: CandidatureScoreUncheckedUpdateManyWithoutStagiaireNestedInput
    suggestions?: SuggestionAffectationUncheckedUpdateManyWithoutStagiaireNestedInput
  }

  export type StagiaireUncheckedUpdateManyWithoutTuteurInput = {
    userId?: StringFieldUpdateOperationsInput | string
    codeDemande?: NullableStringFieldUpdateOperationsInput | string | null
    statutDemande?: NullableEnumStatutDemandeFieldUpdateOperationsInput | $Enums.StatutDemande | null
    structureAffecteeId?: NullableStringFieldUpdateOperationsInput | string | null
    dateDebut?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dateFin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type StageUpdateWithoutTuteurInput = {
    id?: StringFieldUpdateOperationsInput | string
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    etat?: EnumEtatStageFieldUpdateOperationsInput | $Enums.EtatStage
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    noteFinale?: NullableStringFieldUpdateOperationsInput | string | null
    stagiaire?: StagiaireUpdateOneRequiredWithoutStagesNestedInput
    structure?: StructureUpdateOneRequiredWithoutStagesNestedInput
  }

  export type StageUncheckedUpdateWithoutTuteurInput = {
    id?: StringFieldUpdateOperationsInput | string
    stagiaireId?: StringFieldUpdateOperationsInput | string
    structureId?: StringFieldUpdateOperationsInput | string
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    etat?: EnumEtatStageFieldUpdateOperationsInput | $Enums.EtatStage
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    noteFinale?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StageUncheckedUpdateManyWithoutTuteurInput = {
    id?: StringFieldUpdateOperationsInput | string
    stagiaireId?: StringFieldUpdateOperationsInput | string
    structureId?: StringFieldUpdateOperationsInput | string
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    etat?: EnumEtatStageFieldUpdateOperationsInput | $Enums.EtatStage
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    noteFinale?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ThemeTuteurUpdateWithoutTuteurInput = {
    id?: StringFieldUpdateOperationsInput | string
    titre?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    disponible?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ThemeTuteurUncheckedUpdateWithoutTuteurInput = {
    id?: StringFieldUpdateOperationsInput | string
    titre?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    disponible?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ThemeTuteurUncheckedUpdateManyWithoutTuteurInput = {
    id?: StringFieldUpdateOperationsInput | string
    titre?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    disponible?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SuggestionAffectationUpdateWithoutTuteurInput = {
    id?: StringFieldUpdateOperationsInput | string
    scoreMatch?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stagiaire?: StagiaireUpdateOneRequiredWithoutSuggestionsNestedInput
  }

  export type SuggestionAffectationUncheckedUpdateWithoutTuteurInput = {
    id?: StringFieldUpdateOperationsInput | string
    stagiaireId?: StringFieldUpdateOperationsInput | string
    scoreMatch?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SuggestionAffectationUncheckedUpdateManyWithoutTuteurInput = {
    id?: StringFieldUpdateOperationsInput | string
    stagiaireId?: StringFieldUpdateOperationsInput | string
    scoreMatch?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DemandeStageCreateManyStagiaireInput = {
    id?: string
    dateDemande?: Date | string
    etat?: $Enums.EtatDemande
    motifRefus?: string | null
    dateTraitement?: Date | string | null
    structureCibleId?: string | null
  }

  export type StageCreateManyStagiaireInput = {
    id?: string
    tuteurId: string
    structureId: string
    theme?: string | null
    etat?: $Enums.EtatStage
    dateDebut: Date | string
    dateFin: Date | string
    noteFinale?: string | null
  }

  export type CandidatureScoreCreateManyStagiaireInput = {
    id?: string
    scorePertinence: number
    dateEvaluation?: Date | string
  }

  export type SuggestionAffectationCreateManyStagiaireInput = {
    id?: string
    tuteurId: string
    scoreMatch: number
    createdAt?: Date | string
  }

  export type DemandeStageUpdateWithoutStagiaireInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateDemande?: DateTimeFieldUpdateOperationsInput | Date | string
    etat?: EnumEtatDemandeFieldUpdateOperationsInput | $Enums.EtatDemande
    motifRefus?: NullableStringFieldUpdateOperationsInput | string | null
    dateTraitement?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    structureCible?: StructureUpdateOneWithoutDemandesStagesNestedInput
  }

  export type DemandeStageUncheckedUpdateWithoutStagiaireInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateDemande?: DateTimeFieldUpdateOperationsInput | Date | string
    etat?: EnumEtatDemandeFieldUpdateOperationsInput | $Enums.EtatDemande
    motifRefus?: NullableStringFieldUpdateOperationsInput | string | null
    dateTraitement?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    structureCibleId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DemandeStageUncheckedUpdateManyWithoutStagiaireInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateDemande?: DateTimeFieldUpdateOperationsInput | Date | string
    etat?: EnumEtatDemandeFieldUpdateOperationsInput | $Enums.EtatDemande
    motifRefus?: NullableStringFieldUpdateOperationsInput | string | null
    dateTraitement?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    structureCibleId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StageUpdateWithoutStagiaireInput = {
    id?: StringFieldUpdateOperationsInput | string
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    etat?: EnumEtatStageFieldUpdateOperationsInput | $Enums.EtatStage
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    noteFinale?: NullableStringFieldUpdateOperationsInput | string | null
    tuteur?: TuteurUpdateOneRequiredWithoutStagesNestedInput
    structure?: StructureUpdateOneRequiredWithoutStagesNestedInput
  }

  export type StageUncheckedUpdateWithoutStagiaireInput = {
    id?: StringFieldUpdateOperationsInput | string
    tuteurId?: StringFieldUpdateOperationsInput | string
    structureId?: StringFieldUpdateOperationsInput | string
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    etat?: EnumEtatStageFieldUpdateOperationsInput | $Enums.EtatStage
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    noteFinale?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StageUncheckedUpdateManyWithoutStagiaireInput = {
    id?: StringFieldUpdateOperationsInput | string
    tuteurId?: StringFieldUpdateOperationsInput | string
    structureId?: StringFieldUpdateOperationsInput | string
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    etat?: EnumEtatStageFieldUpdateOperationsInput | $Enums.EtatStage
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    noteFinale?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CandidatureScoreUpdateWithoutStagiaireInput = {
    id?: StringFieldUpdateOperationsInput | string
    scorePertinence?: FloatFieldUpdateOperationsInput | number
    dateEvaluation?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CandidatureScoreUncheckedUpdateWithoutStagiaireInput = {
    id?: StringFieldUpdateOperationsInput | string
    scorePertinence?: FloatFieldUpdateOperationsInput | number
    dateEvaluation?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CandidatureScoreUncheckedUpdateManyWithoutStagiaireInput = {
    id?: StringFieldUpdateOperationsInput | string
    scorePertinence?: FloatFieldUpdateOperationsInput | number
    dateEvaluation?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SuggestionAffectationUpdateWithoutStagiaireInput = {
    id?: StringFieldUpdateOperationsInput | string
    scoreMatch?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tuteur?: TuteurUpdateOneRequiredWithoutSuggestionsNestedInput
  }

  export type SuggestionAffectationUncheckedUpdateWithoutStagiaireInput = {
    id?: StringFieldUpdateOperationsInput | string
    tuteurId?: StringFieldUpdateOperationsInput | string
    scoreMatch?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SuggestionAffectationUncheckedUpdateManyWithoutStagiaireInput = {
    id?: StringFieldUpdateOperationsInput | string
    tuteurId?: StringFieldUpdateOperationsInput | string
    scoreMatch?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}